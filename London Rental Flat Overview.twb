<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0605.1023                               -->
<workbook original-version='18.1' source-build='2021.2.0 (20212.21.0605.1023)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <DashboardMttwImageObject />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.SingleValuePerNestSorting.true...SingleValuePerNestSorting />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style>
    <style-rule element='worksheet'>
      <format attr='color' value='#333333' />
    </style-rule>
    <style-rule element='title'>
      <format attr='font-size' value='12' />
      <format attr='font-weight' value='bold' />
    </style-rule>
    <style-rule element='tooltip'>
      <format attr='color' value='#333333' />
    </style-rule>
    <style-rule element='all'>
      <format attr='font-family' value='calibri' />
      <format attr='color' value='#333333' />
    </style-rule>
  </style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
        <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
        <aliases>
          <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
          <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
        </aliases>
        <members>
          <member alias='By Borough' value='&quot;Rent By Scrape Date&quot;' />
          <member alias='By Available Date' value='&quot;Rent By Available Date&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='all_rental_data' inline='true' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='all_rental_data' name='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5'>
            <connection class='textscan' directory='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate' filename='all_rental_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='property_id' ordinal='0' />
            <column datatype='string' name='property_link' ordinal='1' />
            <column datatype='string' name='listing_title' ordinal='2' />
            <column datatype='string' name='description' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='real' name='num_bedrooms' ordinal='5' />
            <column datatype='real' name='num_bathrooms' ordinal='6' />
            <column datatype='integer' name='max_tenants' ordinal='7' />
            <column datatype='string' name='deposit' ordinal='8' />
            <column datatype='real' name='rent_pcm' ordinal='9' />
            <column datatype='string' name='bills_included' ordinal='10' />
            <column datatype='string' name='student_friendly' ordinal='11' />
            <column datatype='string' name='family_friendly' ordinal='12' />
            <column datatype='string' name='pet_friendly' ordinal='13' />
            <column datatype='string' name='smoker_friendly' ordinal='14' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
            <column datatype='string' name='min_tenancy_months' ordinal='16' />
            <column datatype='string' name='garden' ordinal='17' />
            <column datatype='string' name='parking' ordinal='18' />
            <column datatype='string' name='fireplace' ordinal='19' />
            <column datatype='string' name='furnishing' ordinal='20' />
            <column datatype='string' name='closest_station' ordinal='21' />
            <column datatype='string' name='closest_station_mins' ordinal='22' />
            <column datatype='string' name='postcode' ordinal='23' />
            <column datatype='string' name='listing_type' ordinal='24' />
            <column datatype='string' name='region_loc' ordinal='25' />
            <column datatype='real' name='bed_bath_ratio' ordinal='26' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
            <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='property_id' ordinal='0' />
            <column datatype='string' name='property_link' ordinal='1' />
            <column datatype='string' name='listing_title' ordinal='2' />
            <column datatype='string' name='description' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='real' name='num_bedrooms' ordinal='5' />
            <column datatype='real' name='num_bathrooms' ordinal='6' />
            <column datatype='integer' name='max_tenants' ordinal='7' />
            <column datatype='string' name='deposit' ordinal='8' />
            <column datatype='real' name='rent_pcm' ordinal='9' />
            <column datatype='string' name='bills_included' ordinal='10' />
            <column datatype='string' name='student_friendly' ordinal='11' />
            <column datatype='string' name='family_friendly' ordinal='12' />
            <column datatype='string' name='pet_friendly' ordinal='13' />
            <column datatype='string' name='smoker_friendly' ordinal='14' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
            <column datatype='string' name='min_tenancy_months' ordinal='16' />
            <column datatype='string' name='garden' ordinal='17' />
            <column datatype='string' name='parking' ordinal='18' />
            <column datatype='string' name='fireplace' ordinal='19' />
            <column datatype='string' name='furnishing' ordinal='20' />
            <column datatype='string' name='closest_station' ordinal='21' />
            <column datatype='string' name='closest_station_mins' ordinal='22' />
            <column datatype='string' name='postcode' ordinal='23' />
            <column datatype='string' name='listing_type' ordinal='24' />
            <column datatype='string' name='region_loc' ordinal='25' />
            <column datatype='real' name='bed_bath_ratio' ordinal='26' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
            <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;Â£&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>property_id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[property_id]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>property_id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>property_link</remote-name>
            <remote-type>129</remote-type>
            <local-name>[property_link]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>property_link</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listing_title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[listing_title]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>listing_title</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>129</remote-type>
            <local-name>[description]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_bedrooms</remote-name>
            <remote-type>5</remote-type>
            <local-name>[num_bedrooms]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>num_bedrooms</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_bathrooms</remote-name>
            <remote-type>5</remote-type>
            <local-name>[num_bathrooms]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>num_bathrooms</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>max_tenants</remote-name>
            <remote-type>20</remote-type>
            <local-name>[max_tenants]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>max_tenants</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>deposit</remote-name>
            <remote-type>129</remote-type>
            <local-name>[deposit]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>deposit</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rent_pcm</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rent_pcm]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>rent_pcm</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bills_included</remote-name>
            <remote-type>129</remote-type>
            <local-name>[bills_included]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>bills_included</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>student_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[student_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>student_friendly</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>family_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[family_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>family_friendly</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pet_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[pet_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>pet_friendly</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>smoker_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[smoker_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>smoker_friendly</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>available_from</remote-name>
            <remote-type>7</remote-type>
            <local-name>[available_from]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>available_from</remote-alias>
            <ordinal>15</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>min_tenancy_months</remote-name>
            <remote-type>129</remote-type>
            <local-name>[min_tenancy_months]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>min_tenancy_months</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>garden</remote-name>
            <remote-type>129</remote-type>
            <local-name>[garden]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>garden</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>parking</remote-name>
            <remote-type>129</remote-type>
            <local-name>[parking]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>parking</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fireplace</remote-name>
            <remote-type>129</remote-type>
            <local-name>[fireplace]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>fireplace</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>furnishing</remote-name>
            <remote-type>129</remote-type>
            <local-name>[furnishing]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>furnishing</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closest_station</remote-name>
            <remote-type>129</remote-type>
            <local-name>[closest_station]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>closest_station</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closest_station_mins</remote-name>
            <remote-type>129</remote-type>
            <local-name>[closest_station_mins]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>closest_station_mins</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>postcode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[postcode]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>postcode</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listing_type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[listing_type]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>listing_type</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>region_loc</remote-name>
            <remote-type>129</remote-type>
            <local-name>[region_loc]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>region_loc</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bed_bath_ratio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[bed_bath_ratio]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>bed_bath_ratio</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>scrape_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[scrape_date]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>scrape_date</remote-alias>
            <ordinal>27</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_monthly_rent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_monthly_rent]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>predicted_monthly_rent</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Value' datatype='real' name='[Calculation_1970606335739912192]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[rent_pcm] - [predicted_monthly_rent]' />
      </column>
      <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
      </column>
      <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
      </column>
      <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
      </column>
      <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([property_id])' />
      </column>
      <column caption='Days On Market' datatype='integer' name='[Calculation_768919287822987264]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
      </column>
      <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
      </column>
      <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
      </column>
      <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
      </column>
      <column caption='Days on Market' datatype='integer' name='[Calculation_888546153548345344]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='all_rental_data.csv' datatype='table' name='[__tableau_internal_object_id__].[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]' role='measure' type='quantitative' />
      <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
      <column caption='Bills Included' datatype='string' name='[bills_included]' role='dimension' type='nominal' />
      <column caption='Closest Station' datatype='string' name='[closest_station]' role='dimension' type='nominal' />
      <column caption='Closest Station Mins' datatype='string' default-role='measure' default-type='quantitative' name='[closest_station_mins]' role='dimension' type='nominal' />
      <column caption='Deposit' datatype='string' name='[deposit]' role='dimension' type='nominal' />
      <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
      <column caption='Family Friendly' datatype='string' name='[family_friendly]' role='dimension' type='nominal' />
      <column caption='Fireplace' datatype='string' name='[fireplace]' role='dimension' type='nominal' />
      <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
      <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
      <column caption='Listing Title' datatype='string' name='[listing_title]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;flat&quot;' value='Flat' />
          <alias key='&quot;shared&quot;' value='Shared Accom.' />
          <alias key='&quot;studio&quot;' value='Studio' />
        </aliases>
      </column>
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Max Tenants' datatype='integer' name='[max_tenants]' role='measure' type='quantitative' />
      <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
      <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
      <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
      <column caption='Pet Friendly' datatype='string' name='[pet_friendly]' role='dimension' type='nominal' />
      <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
      <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
      <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
      <column caption='Property Link' datatype='string' name='[property_link]' role='dimension' type='nominal' />
      <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
      <column caption='Smoker Friendly' datatype='string' name='[smoker_friendly]' role='dimension' type='nominal' />
      <column caption='Student Friendly' datatype='string' name='[student_friendly]' role='dimension' type='nominal' />
      <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rent_pcm]' derivation='Median' name='[med:rent_pcm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1970606335739912192]' derivation='Sum' name='[sum:Calculation_1970606335739912192:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Borough)' hidden='true' name='[Action (Borough)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_816770033929490432]' />
        </groupfilter>
      </group>
      <group caption='Action (Postcode)' hidden='true' name='[Action (Postcode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Action (Value Classification,Postcode)' hidden='true' name='[Action (Value Classification,Postcode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Postcode)' hidden='true' name='[Tooltip (Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Still On Market,Postcode)' hidden='true' name='[Tooltip (Still On Market,Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_719379691605893121]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Value Classification,Postcode)' hidden='true' name='[Tooltip (Value Classification,Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Calculation_719379691605893121:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>true</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[med:rent_pcm:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335739912192:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1970606335741288450:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;Good Value&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Over Valued&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fairly Valued&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-date-format>*dd-mmm-yy</default-date-format>
      <datasource-dependencies datasource='Parameters'>
        <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
          <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
          <aliases>
            <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
            <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
          </aliases>
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='all_rental_data.csv' id='all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B'>
            <properties context=''>
              <relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
                  <column datatype='string' name='property_id' ordinal='0' />
                  <column datatype='string' name='property_link' ordinal='1' />
                  <column datatype='string' name='listing_title' ordinal='2' />
                  <column datatype='string' name='description' ordinal='3' />
                  <column datatype='string' name='location' ordinal='4' />
                  <column datatype='real' name='num_bedrooms' ordinal='5' />
                  <column datatype='real' name='num_bathrooms' ordinal='6' />
                  <column datatype='integer' name='max_tenants' ordinal='7' />
                  <column datatype='string' name='deposit' ordinal='8' />
                  <column datatype='real' name='rent_pcm' ordinal='9' />
                  <column datatype='string' name='bills_included' ordinal='10' />
                  <column datatype='string' name='student_friendly' ordinal='11' />
                  <column datatype='string' name='family_friendly' ordinal='12' />
                  <column datatype='string' name='pet_friendly' ordinal='13' />
                  <column datatype='string' name='smoker_friendly' ordinal='14' />
                  <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
                  <column datatype='string' name='min_tenancy_months' ordinal='16' />
                  <column datatype='string' name='garden' ordinal='17' />
                  <column datatype='string' name='parking' ordinal='18' />
                  <column datatype='string' name='fireplace' ordinal='19' />
                  <column datatype='string' name='furnishing' ordinal='20' />
                  <column datatype='string' name='closest_station' ordinal='21' />
                  <column datatype='string' name='closest_station_mins' ordinal='22' />
                  <column datatype='string' name='postcode' ordinal='23' />
                  <column datatype='string' name='listing_type' ordinal='24' />
                  <column datatype='string' name='region_loc' ordinal='25' />
                  <column datatype='real' name='bed_bath_ratio' ordinal='26' />
                  <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
                  <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
      <datasources>
        <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
      </datasources>
      <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
        <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
        </column>
        <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
        </column>
        <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
        </column>
        <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
        <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
        <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
        <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;flat&quot;' value='Flat' />
            <alias key='&quot;shared&quot;' value='Shared Accom.' />
            <alias key='&quot;studio&quot;' value='Studio' />
          </aliases>
        </column>
        <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
        <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
        <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
        <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
        <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
        <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
        <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
        <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
        <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
        <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
        <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_1970606335741288450:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]'>
        <groupfilter function='member' level='[none:Calculation_719379691605893121:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_816770033929490432:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' included-values='all' />
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]'>
        <groupfilter function='member' level='[none:furnishing:nk]' member='&quot;Furnished&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]'>
        <groupfilter function='level-members' level='[none:garden:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]'>
        <groupfilter function='level-members' level='[none:listing_type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]'>
        <groupfilter function='level-members' level='[none:parking:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]'>
        <groupfilter function='level-members' level='[none:postcode:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' included-values='in-range-or-null'>
        <min>570.0</min>
        <max>1500.0</max>
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Visit Listing' name='[Action1_51F15CEFC7C34818B17E56C731E378F1]'>
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Data Detail' />
      <link caption='' expression='https://www.openrent.co.uk//&lt;[property_id]&gt;' />
    </action>
    <action caption='Filter 1 (generated)' name='[Action2_362B439DEC2140838165D7179AA66AF6]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Flat Map' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='London Rental Flat Overview' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action3_79184BA9BC234F8586E6F2A258202FBE]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Rent By Borough' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='London Rental Flat Overview' />
      </command>
    </action>
    <datasources>
      <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
    </datasources>
    <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
      <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='# Properties'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[property_id]' derivation='CountD' name='[ctd:property_id:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
            <format attr='font-weight' value='normal' />
            <format attr='color' value='#666666' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='9' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Properties still on the market.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{B98E830A-BC1B-4C42-A222-0CAFCBB8EB39}' />
    </worksheet>
    <worksheet name='# Scraped Sanity'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='Value' datatype='real' name='[Calculation_1970606335739912192]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[rent_pcm] - [predicted_monthly_rent]' />
            </column>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_id]' derivation='None' name='[none:property_id:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[scrape_date]' derivation='None' name='[none:scrape_date:ok]' pivot='key' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1970606335739912192]' derivation='Sum' name='[sum:Calculation_1970606335739912192:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:ok]' pivot='key' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Sum' name='[sum:predicted_monthly_rent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Sum' name='[sum:rent_pcm:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:ok]' value='p0.00%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:scrape_date:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335739912192:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:ok] / [federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{75CFF424-BE0E-47AA-8AC2-0D29A47A9C1E}' />
    </worksheet>
    <worksheet name='Average Baths'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[num_bathrooms]' derivation='Avg' name='[avg:num_bathrooms:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='70' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bathrooms:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bathrooms:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bathrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{50A44A0D-34AF-4025-B4E9-5B6230C59DB3}' />
    </worksheet>
    <worksheet name='Average Beds'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[num_bedrooms]' derivation='Avg' name='[avg:num_bedrooms:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='89' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bedrooms:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bedrooms:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bedrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{4C346898-3402-44AA-A95E-7629B8DC0DBF}' />
    </worksheet>
    <worksheet name='Average Rent'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]'>
            <groupfilter function='level-members' level='[none:min_tenancy_months:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
            <format attr='font-weight' value='normal' />
            <format attr='title' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' value='Value Classification'>
              <formatted-text>
                <run bold='true' fontcolor='#666666'>Value Classification</run>
              </formatted-text>
            </format>
            <format attr='title' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' value='Type'>
              <formatted-text>
                <run bold='true' fontcolor='#666666'>Type</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='9' />
            <format attr='font-weight' value='normal' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average rent PCM (Â£).</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{935787A2-80F5-44C0-9D19-15ED33B5ADCE}' />
    </worksheet>
    <worksheet name='Data Detail'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Days on Market' datatype='integer' name='[Calculation_888546153548345344]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column caption='Bills Included' datatype='string' name='[bills_included]' role='dimension' type='nominal' />
            <column caption='Closest Station Mins' datatype='string' default-role='measure' default-type='quantitative' name='[closest_station_mins]' role='dimension' type='nominal' />
            <column caption='Deposit' datatype='string' name='[deposit]' role='dimension' type='nominal' />
            <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
            <column caption='Family Friendly' datatype='string' name='[family_friendly]' role='dimension' type='nominal' />
            <column caption='Fireplace' datatype='string' name='[fireplace]' role='dimension' type='nominal' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:ok]' pivot='key' type='ordinal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[bills_included]' derivation='None' name='[none:bills_included:nk]' pivot='key' type='nominal' />
            <column-instance column='[closest_station_mins]' derivation='None' name='[none:closest_station_mins:nk]' pivot='key' type='nominal' />
            <column-instance column='[deposit]' derivation='None' name='[none:deposit:nk]' pivot='key' type='nominal' />
            <column-instance column='[description]' derivation='None' name='[none:description:nk]' pivot='key' type='nominal' />
            <column-instance column='[family_friendly]' derivation='None' name='[none:family_friendly:nk]' pivot='key' type='nominal' />
            <column-instance column='[fireplace]' derivation='None' name='[none:fireplace:nk]' pivot='key' type='nominal' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
            <column-instance column='[num_bathrooms]' derivation='None' name='[none:num_bathrooms:ok]' pivot='key' type='ordinal' />
            <column-instance column='[num_bedrooms]' derivation='None' name='[none:num_bedrooms:ok]' pivot='key' type='ordinal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[pet_friendly]' derivation='None' name='[none:pet_friendly:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_id]' derivation='None' name='[none:property_id:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_link]' derivation='None' name='[none:property_link:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
            <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Pet Friendly' datatype='string' name='[pet_friendly]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Property Link' datatype='string' name='[property_link]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_888546153548345344]' derivation='Sum' name='[sum:Calculation_888546153548345344:ok]' pivot='key' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Sum' name='[sum:predicted_monthly_rent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Sum' name='[sum:rent_pcm:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
            <single-value-per-nest-shelf-sort dimension-to-sort='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]' direction='ASC' measure-to-sort-by='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]' shelf='rows' />
          </_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='31' />
            <format attr='height' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]' value='36' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='48' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]' value='244' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok]' value='80' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' value='144' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok]' value='56' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]' value='44' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]' value='52' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]' value='68' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' value='72' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]' value='false' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run italic='true' underline='true'>Tenancy Information:</run>
                <run>Ã&#10;</run>
                <run bold='true'>Deposit (Â£):&#9;</run>
                <run><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]>
]]></run>
                <run bold='true'>Minimum Tenancy (Months):&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]>

]]></run>
                <run italic='true' underline='true'>Misc Information:</run>
                <run>Ã&#10;</run>
                <run bold='true'>Postcode:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]>
]]></run>
                <run bold='true'>Pet Friendly:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]>
]]></run>
                <run bold='true'>Bills Included:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]>
]]></run>
                <run bold='true'>Family Friendly:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]>
]]></run>
                <run bold='true'>Fireplace:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]>
]]></run>
                <run bold='true'>Garden:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]>
]]></run>
                <run bold='true'>Parking:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]>
]]></run>
                <run bold='true'>Description:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]>
]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-color' value='#000000' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk] / [federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]))))))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{E82E9F1A-0918-4BB4-A8CB-804A5C293DC7}' />
    </worksheet>
    <worksheet name='Days on Market'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Days On Market' datatype='integer' name='[Calculation_768919287822987264]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_768919287822987264]' derivation='Avg' name='[avg:Calculation_768919287822987264:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='70' />
            <format attr='text-align' value='left' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:Calculation_768919287822987264:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:Calculation_768919287822987264:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bathrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{005178B9-4141-47B1-B377-99607A6BDF7B}' />
    </worksheet>
    <worksheet name='Flat Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Rent &amp; # Of Properties</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Avg' name='[avg:predicted_monthly_rent:qk]' pivot='key' type='quantitative' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[property_id]' derivation='CountD' name='[ctd:property_id:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' num-steps='6' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#00ffb7</color>
                <color>#76ecca</color>
                <color>#d9d9d9</color>
                <color>#ec907c</color>
                <color>#ff3a0e</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
            <format attr='enabled' id='hillshade_highlight_bright' value='false' />
            <format attr='enabled' id='hillshade_highlight_med' value='false' />
            <format attr='enabled' id='hillshade_shadow_faint' value='false' />
            <format attr='enabled' id='hillshade_shadow_med' value='false' />
            <format attr='enabled' id='hillshade_shadow_dark' value='false' />
            <format attr='enabled' id='hillshade_shadow_extreme' value='false' />
            <format attr='enabled' id='admin-2-boundaries-bg' value='false' />
            <format attr='enabled' id='admin-2-boundaries' value='false' />
            <format attr='enabled' id='admin-2-boundaries-dispute' value='false' />
            <format attr='enabled' id='country-label-sm' value='false' />
            <format attr='enabled' id='country-label-md' value='false' />
            <format attr='enabled' id='country-label-lg' value='false' />
            <format attr='enabled' id='admin-3-4-boundaries-bg' value='false' />
            <format attr='enabled' id='admin-3-4-boundaries' value='false' />
            <format attr='enabled' id='state-label-sm' value='false' />
            <format attr='enabled' id='state-label-md' value='false' />
            <format attr='enabled' id='state-label-lg' value='false' />
            <format attr='enabled' id='marine-label-sm-ln' value='false' />
            <format attr='enabled' id='marine-label-sm-pt' value='false' />
            <format attr='enabled' id='marine-label-md-ln' value='false' />
            <format attr='enabled' id='marine-label-md-pt' value='false' />
            <format attr='enabled' id='marine-label-lg-ln' value='false' />
            <format attr='enabled' id='marine-label-lg-pt' value='false' />
            <format attr='enabled' id='waterway-label' value='false' />
            <format attr='enabled' id='water-label-sm' value='false' />
            <format attr='enabled' id='water-label' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.25' />
            <format attr='map-style' value='streets' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' />
              <size column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Postcode:&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]>]]></run>
                <run>
Value (negative value represents underpriced flat):	</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]>]]></run>
                <run>&#10;Average Monthly Rent:</run>
                <run bold='true'><![CDATA[	Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]>]]></run>
                <run>&#10;Average Fair Value:&#9;</run>
                <run bold='true'><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]>]]></run>
                <run>Ã&#10;&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6591712236404419' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Latitude (generated)]</rows>
        <cols>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{3E9F7505-5E69-4E78-B5E0-76A5372B7081}' />
    </worksheet>
    <worksheet name='Rent By Available Date'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
              <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
              <aliases>
                <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
                <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_802133335129923585]' derivation='None' name='[none:Calculation_802133335129923585:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[available_from]' derivation='Week-Trunc' name='[twk:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]'>
            <groupfilter function='member' level='[none:Calculation_802133335129923585:ok]' member='0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' scope='rows' value='Avg Rent PCM (Â£)' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c#,##0;-#,##0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Available From Date:&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[twk:available_from:qk]>]]></run>
                <run>Ã&#10;</run>
                <run fontcolor='#787878'>Average Rent PCM:&#9;</run>
                <run bold='true'><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]>]]></run>
                <run>Ã&#10;</run>
                <run fontcolor='#898989'>Properties Available:</run>
                <run>Ã&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]</rows>
        <cols>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[twk:available_from:qk]</cols>
      </table>
      <simple-id uuid='{7172DDF7-E204-4F14-A511-AB521FD6B15C}' />
    </worksheet>
    <worksheet name='Rent By Borough'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Rent By Borough</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
              <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
              <aliases>
                <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
                <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_802133335129923585]' derivation='None' name='[none:Calculation_802133335129923585:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]'>
            <groupfilter function='member' level='[none:Calculation_802133335129923585:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c#,##0;-#,##0' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#f28e2b' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
              <color column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' />
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{0E970F95-65AC-438A-B0F3-E577B3E314AC}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='London Rental Flat Overview'>
      <style />
      <size maxheight='1500' maxwidth='1000' minheight='1500' minwidth='1000' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
        <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
          <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
          <aliases>
            <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
            <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
          </aliases>
          <members>
            <member alias='By Borough' value='&quot;Rent By Scrape Date&quot;' />
            <member alias='By Available Date' value='&quot;Rent By Available Date&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
        <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
        </column>
        <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
        </column>
        <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
        </column>
        <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
        <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
        <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
        <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;flat&quot;' value='Flat' />
            <alias key='&quot;shared&quot;' value='Shared Accom.' />
            <alias key='&quot;studio&quot;' value='Studio' />
          </aliases>
        </column>
        <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
        <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
        <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
        <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
        <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
        <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
        <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
        <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
        <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
        <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
        <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
        <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
        <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98934' id='26' param='horz' type-v2='layout-flow' w='98400' x='800' y='533'>
            <zone h='98934' id='5' param='vert' type-v2='layout-flow' w='98400' x='800' y='533'>
              <zone fixed-size='50' h='3333' id='29' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='533'>
                <zone fixed-size='274' forceUpdate='true' h='3333' id='30' is-fixed='true' type-v2='text' w='28200' x='800' y='533'>
                  <formatted-text>
                    <run bold='true' fontsize='13'>London Rental Flat Overview</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='59' layout-strategy-id='distribute-evenly' param='horz' type-v2='layout-flow' w='70200' x='29000' y='533'>
                  <zone alt-text='Image of Apartment Building' h='3334' id='61' is-scaled='1' param='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate/images/apartment.png' type-v2='bitmap' w='14100' x='29000' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='27' mode='checkdropdown' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='89' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='94' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='28' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' show-null-ctrls='false' show-slider='false' type-v2='filter' values='relevant' w='14000' x='85200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
              <zone h='3333' id='58' layout-strategy-id='distribute-evenly' param='horz' type-v2='layout-flow' w='98400' x='800' y='3866'>
                <zone h='3333' id='51' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' show-null-ctrls='false' show-reldate-picker='false' show-slider='false' type-v2='filter' values='relevant' w='14100' x='800' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='52' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='14900' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='57' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='29000' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='53' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='54' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='56' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='55' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='85200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='2' h='666' id='24' is-fixed='true' type-v2='empty' w='98400' x='800' y='7199'>
                <zone-style>
                  <format attr='border-color' value='#666666' />
                  <format attr='border-style' value='solid' />
                  <format attr='border-width' value='2' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone fixed-size='12' h='1333' id='23' is-fixed='true' type-v2='empty' w='98400' x='800' y='7865'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='90269' id='6' type-v2='layout-basic' w='98400' x='800' y='9198'>
                <zone h='90269' id='8' param='vert' type-v2='layout-flow' w='98400' x='800' y='9198'>
                  <zone fixed-size='400' h='26667' id='49' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='9198'>
                    <zone h='26667' id='81' param='vert' type-v2='layout-flow' w='71400' x='800' y='9198'>
                      <zone h='1800' id='82' type-v2='text' w='71400' x='800' y='9198'>
                        <formatted-text>
                          <run bold='true' fontsize='12'>Average Rent &amp; # Of Listings</run>
                        </formatted-text>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='2466' id='80' name='Flat Map' pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-title='false' type-v2='color' w='71400' x='800' y='10998'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone fixed-size='692' h='22401' id='36' is-fixed='true' name='Flat Map' show-title='false' w='71400' x='800' y='13464'>
                        <layout-cache minheight='201' minwidth='201' type-h='scalable' type-w='scalable' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                    </zone>
                    <zone fixed-size='12' h='26667' id='50' is-fixed='true' type-v2='empty' w='2000' x='72200' y='9198'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone fixed-size='250' h='26667' id='48' is-fixed='true' param='vert' type-v2='layout-flow' w='25000' x='74200' y='9198'>
                      <zone h='4000' id='13' param='vert' type-v2='layout-flow' w='25000' x='74200' y='9198'>
                        <zone forceUpdate='true' h='1800' id='14' type-v2='text' w='25000' x='74200' y='9198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average Rent:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='15' name='Average Rent' show-title='false' w='25000' x='74200' y='10998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='120' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='12' param='vert' type-v2='layout-flow' w='25000' x='74200' y='13198'>
                        <zone h='1800' id='11' type-v2='text' w='25000' x='74200' y='13198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'># Properties:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='10' name='# Properties' show-title='false' w='25000' x='74200' y='14998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='60' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='91' param='vert' type-v2='layout-flow' w='25000' x='74200' y='17198'>
                        <zone forceUpdate='true' h='1800' id='92' type-v2='text' w='25000' x='74200' y='17198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average Days On Market:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='93' name='Days on Market' show-title='false' w='25000' x='74200' y='18998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='16' param='vert' type-v2='layout-flow' w='25000' x='74200' y='21198'>
                        <zone forceUpdate='true' h='1800' id='17' type-v2='text' w='25000' x='74200' y='21198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average # Beds:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='18' name='Average Beds' show-title='false' w='25000' x='74200' y='22998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='89' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='19' param='vert' type-v2='layout-flow' w='25000' x='74200' y='25198'>
                        <zone forceUpdate='true' h='1800' id='20' type-v2='text' w='25000' x='74200' y='25198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average # Baths:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='21' name='Average Baths' show-title='false' w='25000' x='74200' y='26998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                    </zone>
                  </zone>
                  <zone fixed-size='12' h='1333' id='31' is-fixed='true' type-v2='empty' w='98400' x='800' y='35865'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone fixed-size='450' h='30000' id='35' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='37198'>
                    <zone fixed-size='550' h='30000' id='32' is-fixed='true' param='vert' type-v2='layout-flow' w='98400' x='800' y='37198'>
                      <zone forceUpdate='true' h='1800' id='37' type-v2='text' w='98400' x='800' y='37198'>
                        <formatted-text>
                          <run bold='true' fontsize='12'>Average Rent (Â£) PCM &lt;</run>
                          <run bold='true' fontsize='12'>[Parameters].[Parameter 1]</run>
                          <run bold='true' fontsize='12'>&gt;</run>
                        </formatted-text>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='3333' id='38' mode='list' param='[Parameters].[Parameter 1]' show-title='false' type-v2='paramctrl' w='98400' x='800' y='38998'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone fixed-size='2' h='666' id='39' is-fixed='true' type-v2='empty' w='98400' x='800' y='42331'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='24134' id='33' name='Rent By Borough' show-title='false' w='98400' x='800' y='42997'>
                        <layout-cache cell-count-h='1' type-h='cell' type-w='cell' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='67' id='34' name='Rent By Available Date' show-title='false' w='98400' x='800' y='67131'>
                        <layout-cache has-max-size-h='true' maxheight='1' minheight='1' minwidth='170' type-h='scalable' type-w='scalable' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                    </zone>
                  </zone>
                  <zone fixed-size='12' h='1333' id='47' is-fixed='true' type-v2='empty' w='98400' x='800' y='67198'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone fixed-size='12' h='1333' id='41' is-fixed='true' type-v2='empty' w='98400' x='800' y='68531'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='29603' id='42' name='Data Detail' w='98400' x='800' y='69864'>
                    <layout-cache fixed-size-h='6455' type-h='fixed' type-w='fixed' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='2750' minheight='2750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='98' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98934' id='97' param='vert' type-v2='layout-flow' w='98400' x='800' y='533'>
                <zone fixed-size='274' forceUpdate='true' h='3333' id='30' type-v2='text' w='28200' x='800' y='533'>
                  <formatted-text>
                    <run bold='true' fontsize='13'>London Rental Flat Overview</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone alt-text='Image of Apartment Building' fixed-size='42' h='3334' id='61' is-fixed='true' is-scaled='1' param='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate/images/apartment.png' type-v2='bitmap' w='14100' x='29000' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='1800' id='82' type-v2='text' w='71400' x='800' y='9198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent &amp; # Of Listings</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='14' type-v2='text' w='25000' x='74200' y='9198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='89' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='94' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='51' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' show-null-ctrls='false' show-reldate-picker='false' show-slider='false' type-v2='filter' values='relevant' w='14100' x='800' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='52' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='14900' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='57' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='29000' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='53' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='54' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='56' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='55' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='85200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='15' is-fixed='true' name='Average Rent' show-title='false' w='25000' x='74200' y='10998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='120' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='1800' id='11' type-v2='text' w='25000' x='74200' y='13198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'># Properties:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='22401' id='36' is-fixed='true' name='Flat Map' show-title='false' w='71400' x='800' y='13464'>
                  <layout-cache minheight='201' minwidth='201' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2466' id='80' name='Flat Map' pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-title='false' type-v2='color' w='71400' x='800' y='10998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='27' mode='checkdropdown' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='28' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' show-null-ctrls='false' show-slider='false' type-v2='filter' values='relevant' w='14000' x='85200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='10' is-fixed='true' name='# Properties' show-title='false' w='25000' x='74200' y='14998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='60' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='92' type-v2='text' w='25000' x='74200' y='17198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Days On Market:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='93' is-fixed='true' name='Days on Market' show-title='false' w='25000' x='74200' y='18998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='17' type-v2='text' w='25000' x='74200' y='21198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average # Beds:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='18' is-fixed='true' name='Average Beds' show-title='false' w='25000' x='74200' y='22998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='89' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='20' type-v2='text' w='25000' x='74200' y='25198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average # Baths:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='21' is-fixed='true' name='Average Baths' show-title='false' w='25000' x='74200' y='26998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='37' type-v2='text' w='98400' x='800' y='37198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent (Â£) PCM &lt;</run>
                    <run bold='true' fontsize='12'>[Parameters].[Parameter 1]</run>
                    <run bold='true' fontsize='12'>&gt;</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='38' mode='list' param='[Parameters].[Parameter 1]' show-title='false' type-v2='paramctrl' w='98400' x='800' y='38998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='24134' id='33' is-fixed='true' name='Rent By Borough' show-title='false' w='98400' x='800' y='42997'>
                  <layout-cache cell-count-h='1' type-h='cell' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='67' id='34' is-fixed='true' name='Rent By Available Date' show-title='false' w='98400' x='800' y='67131'>
                  <layout-cache has-max-size-h='true' maxheight='1' minheight='1' minwidth='170' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='29603' id='42' is-fixed='true' name='Data Detail' w='98400' x='800' y='69864'>
                  <layout-cache fixed-size-h='6455' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B9D33C1C-25C4-4B1A-97F4-F7207E5F080A}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' maximized='true' name='London Rental Flat Overview'>
      <viewpoints>
        <viewpoint name='# Properties' />
        <viewpoint name='Average Baths' />
        <viewpoint name='Average Beds' />
        <viewpoint name='Average Rent' />
        <viewpoint name='Data Detail' />
        <viewpoint name='Days on Market' />
        <viewpoint name='Flat Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Rent By Available Date'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Rent By Borough'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{7A761B9E-5006-4E78-A9D4-F1FDA3324CBA}' />
    </window>
    <window class='worksheet' name='# Scraped Sanity' tab-color='#6e597f'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6FF067E0-E058-4F5B-B1D3-1D434D256116}' />
    </window>
    <window class='worksheet' hidden='true' name='# Properties' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DCE1320E-D9F5-4029-AFEA-7435A9875862}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Baths' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{647E7764-7A08-47D4-9784-B801E4DA5298}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Beds' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D6A4D944-709A-4EE0-8AF3-CD9366A41873}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Rent' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FDC41464-F2D0-4616-8812-9B3E00A8CDFA}' />
    </window>
    <window class='worksheet' hidden='true' name='Data Detail' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:available_from:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{73A3DC87-29BA-438F-8277-8EFFF35EC597}' />
    </window>
    <window class='worksheet' hidden='true' name='Days on Market' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FF53636D-43D3-4788-B034-CC58F9BEA8E0}' />
    </window>
    <window class='worksheet' hidden='true' name='Flat Map' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[med:num_bedrooms:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[tmn:available_from:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E264242F-CCE5-4901-8540-A5282A277032}' />
    </window>
    <window class='worksheet' hidden='true' name='Rent By Available Date' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:available_from:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{37947904-12FE-4351-8DCE-D1DF70ADA9FC}' />
    </window>
    <window class='worksheet' hidden='true' name='Rent By Borough' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1B714B8D-1279-44D1-8D22-7E415911D9B3}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='# Scraped Sanity' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOydeUBV1dqHn8M5wGGeFRFEBGdTb6bWNTOzsslmr2aat8HSUqtbaYWZmnYd
      0pwzp0zNBgfInHBEVAhFRUAFmWQ8zOPhzOes7w9if5LYLXMq9vMfe5+9eNfaa693De/6LYUQ
      QiAjIyMj0+ywu9kGyMjIyMjcHGQHICMjI9NMkR2AjIyMTDNFdgAyMjIyzRTZAcjIyMg0U2QH
      ICMjI9NMkR2AjIyMTDNFdgAyMjIyzRTZAcjIyMg0U2QHICMjI9NMkR2AjIyMTDNFdgAyMjIy
      zRTZAcjIyMg0U2QHICMjI9NMkR2AjIyMTDNFdgAyMjIyzRTZAcjIyMg0U2QHICMjI9NMUTV1
      saamhurq6htti4yMjIzMDUTR1JnAFosFi8VyM+yRkZGRkblBNOkAZGRkZGT+/vzuNQCr1Up1
      dTVVVVVYrVbpuslkorKyEpPJdMVnhRBotVoqKysxGo1/ymAhBHV1dVRUVDRKSwiB2Wymrq6O
      q/VpQgj0ej02m036u6amhtraWinNhv9RV1eHXq9v9L+sVisGg6FRerW1tY3Kx2AwUFFRQV1d
      3VXZeLVYrVa0Wu1vlo3RaGw08tPr9VRXVzd63xaLhaqqqj/9Hq8lDe/tt2yy2Wzo9Xrpb6vV
      SlVVFQaDQSqThvdVU1Mj1YFLMRgM0rs3m82XPfN37Us1fONNla/NZpPKpK6uTio3q9VKZWVl
      o2+k4Xv6dT00GAyXtStms5nKykqpnBvSbHhnl6LVai8rf71e32RbVVVV1SjN60lDu3elutHQ
      ll1atpe2bw3fotlsblT2Wq32muWhyTWApti1axdHjx5Fp9MRHBzMf/7zH7RaLVOnTsXNzY2q
      qipmzpyJh4fHZc+eOHGCRYsWERAQQOvWrXnrrbeu2uDc3FwWLlyIWq2msrKSWbNm4ePjQ0JC
      AqtXr8bLy4v//ve/V5X2xYsXee+991ixYgW+vr5s2bKFuLg49Ho9TzzxBA899BCHDh1i3bp1
      uLu706FDB9566y0UCgVCCNavX09ubi4ff/wxQgi2bt1KTEwMHh4e9OrViyeffJLly5dTWVlJ
      VlYWkydPpnv37lddFr+X4uJiZs+eTVFREWvXrsXJyemy3xgMBiZOnMjzzz/PgAEDyM7O5rPP
      PkOtVhMWFsbYsWOx2Wx8+umn6HQ6DAYDH330ET4+Ptfd/v/F2rVr2bdvH6NGjeLRRx+97L4Q
      gh07drB//34WL16M1WplyZIlFBQUoNPpmDJlCq1atWLPnj3s2bMHq9XKgAEDGDp0aKN0Zs+e
      TX5+PiqViqFDh3Lfffexd+9edu7cidVq5b777uPpp59GoVDcqKxfd2pqapg5cyYqlQqtVsu0
      adPw9vaW7ldWVjJx4kTc3NxwcHBgypQp+Pj48Omnn2IwGCgtLWXSpEmEhoayc+dOoqKisFqt
      jB49mr59+6LRaJg5cyZOTk4EBQUxfvx4jEYj06dPx87ODovFwowZM3B0dGTx4sUUFhai1+v5
      4IMPCAgIICEhgTVr1mBvb8/gwYN59NFHycvLY+7cuVKaEyZMQKfTMW3aNOzs7LC3t+fDDz/E
      2dn5upZdfHw8GzZsQKlU8uCDD/LYY481ur9//362b9+Ol5cXYWFhvPDCC5w5c4alS5fi7OyM
      n58fb731FkuWLMFqtTJy5EhatGjBjBkzmDJlCvb29n/eSPE7MZlMwmazicrKSjFs2DBRXl4u
      Nm/eLFatWiWEEGLlypViw4YNTT47ffp0sX37dmGz2YTVahVCCFFbWyu2b98ujh07Jmw2mygt
      LRVJSUkiOjpaREVFCZPJ1GRaZrNZSmPy5Mni4MGDQgghdDqdSEpKEm+//baw2Wy/N1sSOp1O
      jB8/Xjz77LOiqKhIGI1GMXz4cKHVakVRUZEYNWqU0Ol04scffxTff//9Zc+fOHFCvPTSS+Ld
      d98VQghRVlYm/vWvfwm9Xn+ZPTabTaxbt06sXbv2D9t5NZhMJlFXVyeeeeYZodPpLrtvs9nE
      /PnzxciRI8WePXuEEEJ89NFHIiYmRphMJjFmzBiRnZ0t4uLixAcffCCsVqv49ttvxZdffnlD
      7P9faLVasWTJErF9+/Ym76enp4vRo0eL1157TQghxPnz58XYsWOFzWYTu3fvFnPmzBFms1n8
      +9//FiUlJaK6uloMGzZM1NTUNErnvffeEwUFBdLfJpNJDB06VOh0OqHVasWwYcNEVVXV9cvo
      TSAyMlIsX75cCCHEV199JdasWdPofklJiXjrrbcaXUtOThbvvPOOsNlsIjo6WkyZMkVUV1eL
      UaNGicrKSpGfny9GjhwpbDabmDNnjti1a5ewWq1i4sSJIiUlRfz4449iwYIFwmaziYULF4rI
      yEhx9uxZMWHCBGGxWMSePXvE7NmzhcViEaNGjRIFBQWitrZWjBgxQtTU1IhPPvlE7N+/X1gs
      FvHaa6+JjIwMsXnzZrFs2bJG//N6YjabxSuvvCKysrJEZWWlGDFihKirq5Pu19TUiJEjR4rS
      0tJG7cPChQtFRESEMBqNYvTo0SIxMVHMnz9fHDp0SGzatEnMmzdPJCUlXTM7f/cUkL29PQqF
      grNnz+Lh4YGHhwcmk0kairi7u5Oent7ks4MGDWLZsmVERERgs9kwm81MnToVo9FIREQEMTEx
      XLhwgUmTJpGens6ePXtYvXp1k2mpVCrs7OyoqKggJyeH0NBQAJycnFAqlX/U/wH1PcTVq1dz
      //33ExwcDNQPN00mE1arFbVajVarpby8HICdO3eybt06tFotAOXl5axdu7bRyCY1NRW1Ws3c
      uXP54IMPyMzMBKCgoIB169Zx4sQJHnnkkauy949ib2+Pg4PDFe/HxMRQW1vLgw8+CNSXR1ZW
      Fu3atcPe3p62bduSnp7O+fPn6dSpE3Z2dnTp0oVz587dEPv/Fy4uLle8p9PpWLhwIRMnTpTK
      oCEfCoWCDh06kJGRgdlslt63vb09NpsNjUbTKC2r1crSpUvZt28fVqsVIQQmkwmLxYK9vT06
      nY6KiorrmtcbjdlsbvSNZ2RkXPabnJwc5s+fz4ULFwAatQuurq7k5OSg0WhwcHDA09MTX19f
      6urqMBgMnD17lq5du2JnZ0dYWBgXLlzg7NmzdOnSBYVCQZcuXTh79iwXLlwgNDQUpVIpXTOZ
      TJSWltKqVStcXV1xcnKipKSEjIwMwsLCUCqVhIWFkZqaytmzZ+ncuTMKhYKuXbte97rbMFXl
      7++Pu7s7bm5uFBQUSPfz8vIwGAysWbOGSZMmkZSUBMCjjz7K8uXLefvtt/nXv/5FcHAwhYWF
      7N+/n+zsbAIDA7ntttuumZ2/ewoIIDExkW+++YYpU6agVCp5+OGHCQ8PZ/r06RQUFBAcHExK
      SgpbtmyRnnn66af55z//yaJFi/jss884deoUY8aM4dy5c7i7u1NZWUlycjK33347ffv25eWX
      X+bs2bMsXryYyspKli5dKs3j3XHHHTz22GNUVVXxySef8MorrxAUFPSnCyE+Pp7jx4/To0cP
      ysvLSUpK4v777+epp54iPDwcb29vTCYTKpWKhx9+mH79+vHdd98xb948pk2bxvz58+nYsSMX
      L16kvLycvLw89Ho9JpOJt956i5MnT7JkyRI+//xzXFxcCA0NJTExkdOnT/PQQw/9afv/DGVl
      ZSxcuJDXXnuNEydOUFlZyd13343NZpOmMuzs7LBarVgsFqkRbRie3+qsWrUKPz8/SkpKqKys
      JCMjA6vVKnUWGvJmb2/Pv/71L2bMmEGLFi2oq6u7bIg9c+ZMioqKmDt3LgqFgkGDBvHSSy8x
      adIkWrVqhU6nQ6X6Q5/ULYVGo+HLL7+U/r733nsZNGgQ06dPZ+rUqZSWltKyZctGz/j4+LBu
      3TqSk5P56KOPWL58Od27d8fNzY3w8HBMJhNKpRIhBHZ2/9/fVCgUUp1quK5QKLBYLE2+n0t/
      13Dt0jp66fNXqruXpnm9625Dm6VQKCRbLl2PMBqNGI1GXnzxRTQaDZ999hlff/01R48e5aGH
      HkKj0RAVFSWVf0pKCtu2bSM5OZnk5GT+85//XJPp199dW7OysliyZAkzZ86kVatWAHh5ebFw
      4UKMRiOrVq2iXbt20rx4Aw3zbB07dmTu3LmMHDkSg8GAp6cnY8aMwdnZGUdHRxITE6WCMhgM
      uLq64uHhwYQJE6S0HBwcMJlMTJ06laeffpoBAwZck/lWV1dXHnjgAbKzs6mqqpI89YgRI3ji
      iScoKioiPz8fb29v7O3t8fHx4bHHHiM8PByLxULv3r2pra0lMzNTWuwODAzE09MTV1dXgoOD
      pUUcT09P7rnnHmleevDgwTdlzrjhQwF46qmnKCkpQaPRYDQasVqt+Pv7U1pair+/P4WFhQwZ
      MgSVSsWJEycQQnDx4kVCQkJuuN2/ByEERqMRR0dHOnXqRHFxMZmZmdTW1lJaWkpISAjHjx8H
      ID8/n9atW6NUKnn88ccZNGgQ1dXVXLhwgVatWmE2m1EoFKhUKpycnAgJCeHOO+8kLS2N+++/
      nyFDhnDfffdRW1vLhQsX8PLyusm5v3patGjR6NtVq9XSKNZoNPL111/TokULqXwdHByws7PD
      3d2du+66izVr1lBcXIyPjw/Tpk1Dp9MRExNDSkoKvr6+GI1G9Ho9Op0OhUKBi4sL7dq1Izc3
      l9atW5OXl0ffvn0xmUzk5OQ0qmfBwcEkJCQghCAnJ4eQkBAcHBxwcXGhtrZWGqX7+fkREBBA
      cXExgYGB5OfnM2jQIMrLy8nNzQW4IXXX09MTpVJJdXU1rq6u1NbW4u/vL9UnPz8/fHx88PLy
      QqlUYrVaMZvNREVFsXz5ctzc3Bg1ahT5+fn4+fmxY8cO7rvvPvLy8vD09CQxMZFBgwb9aTt/
      twPYtGkT1dXVfPHFFzg7O/PGG2+g1WrZunUrKpWK3NxcXnvtNRwcHC6bbliyZAl2dnaUl5fT
      vXt3QkJCuPvuu1m4cCEhISF06NABZ2dnTpw4wbJly0hJSWHEiBHY2dnh6enZKK0jR46QnJyM
      m5sbBw8eZNiwYXTt2pWUlBQ2b95MdnY2GzZsYMSIEb+7N9atWze6deuGzWYjPj6ehx9+GIVC
      wXfffYfZbObUqVOMGjUKBwcH4uLiSE9P58yZMwwcOBCVSsVTTz0FQHZ2Nnl5eXTv3h2bzYaT
      kxPLli2jsLCQhx9+GIvFwpo1a3B3d+fgwYMMGTLk9xb/n6KsrIxvvvmGyspKVqxYwcsvv0x0
      dDRJSUlMmTKFF154AaiPnAgJCcHd3Z3hw4ezZs0awsLCcHFxoXPnzoSGhrJt2zZWrVpFQkIC
      77///g2x/3/x448/cvLkSdLT06XGaOTIkSxdupTBgwcD9QvhZ8+e5a677sJkMrFp0yZWrFjB
      6dOnmTBhAgqFgsjISKqrq0lOTua5555DrVazePFivL29GTlyJJs2bcJisXDw4EHefvttACIj
      I9FqtSQmJvLcc8/95nTUrY5SqbzseysqKmLr1q0olUoyMzOlujJq1Cg+++wznJ2d+fHHH9Hp
      dDg6OhIcHIzFYmHZsmV4enoSFxdHeHg4Pj4+9O3blwULFlBbW8uIESNQKBQMGzaMZcuWcerU
      KYQQ3HbbbYSEhPDhhx+iUCiIjY1l7ty5uLm58cMPP7B8+XJSUlIYN24cKpWK559/nk8//RQX
      Fxf69++Pl5cXw4YNY82aNcTHx2NnZ0e3bt3w9/dn6tSp6HQ6kpKSmDlz5nUtS0dHR4YMGcKi
      RYtwdnamX79+eHp6smjRInx9fRkxYgShoaEsWLAAo9HI/fffj0ql4vbbb2fBggX4+/vj5uaG
      r68va9eu5emnn6ZVq1YcOnQIhULBa6+9dk3s/N37AEpKSqQ5bzs7OwIDA7FarSQnJ6NSqaRG
      /ErPZmZm4uTkRKdOnVCr1VitVi5evIjRaCQwMJCUlBSioqJ47rnncHZ2JigoqMmesVarpaSk
      RPq7RYsWuLq6UlNTQ1lZGVA/5926detGQ87fgxCCoqIi/Pz8UKlUXLx4kcLCQtq2bUurVq1Q
      KBSUlJSQnp6On5+fNCfZQEO4XMMwWafTcf78edzd3QkNDUWhUJCZmUlRURGtWrUiJCTkD9t4
      NRiNxkbzj0FBQaSnp7Nz507ee+896XplZSX29va4uroihCA3N5eKigo6deokRQ7V1NRw4cIF
      goKCLpsOuFloNBopxNPd3R1vb2/eeecdpk+fjru7O1A/4mmYLwaoq6vj/PnzBAQESO82Pz+f
      3NxcAgMDpfpXWlqKSqXCy8uL1NRUKisradu2Lf7+/tIzOTk5tGnThsDAwL9VBBDU152UlBTs
      7Ozo0KEDLi4uUi88ICAAIQRJSUkolUo6duyIi4sLNpuNlJQUDAYDHTp0kJyK2WwmLS0NBwcH
      wsLCpLqfn59PSUmJ9DxARUUFmZmZhIaGSlFHdXV1pKam4u/vT+vWrYH6bzYtLQ2LxUKnTp1Q
      qVQIIcjPz6e0tJROnTpJ7VJZWRkXL14kNDT0hozUrFYrGRkZWCwWOnTogL29faP6ZDQaSU1N
      xd7eno4dO6JUKjGZTKSmpmIwGOjUqRMODg5kZmbSpUsXoH690Waz4efnd03q2i2zESw5OZmE
      hARefPHFm21KsyA7Oxu1Wi01iH8nrFYrCQkJ9OnT52/XIMvIXEtuGQcgIyMjI3NjkdVAZWRk
      ZJopf92YtT9BQ0y+jIyMTHOmWU4BNaXzIiMjI9PcaJYOQEZGRkZGXgOQsNlsFBQUkJ6eTm1t
      baN7lyoQarVaMjIyyMrKarSbsLq6moyMjEaKkxaLhYyMDLKzs6VdgOIX9cji4uIbkKv/x2g0
      kp+f3+Top7a2lrS0NPLy8hqpFpaVlZGVldVIedBgMJCRkXFLHRgkhKCsrKxJm6xWK7m5uaSl
      paHT6aTrJpOJjIwMKioqGqlVFhYWkpOT02xHiTabjezsbIqKiv626qY3iob6lJub22R9agiF
      v7SshRAUFBQ0qoM6nY6qqirpuaKiomumJqycNm3atGuS0l8Y8YuS5+7duykuLqaqqoqOHTsC
      9XsYxo4dS7t27QgMDCQqKoqTJ08SGRlJYWEhvXr1orCwkGnTpqHRaNi9ezf9+/dHqVSycOFC
      EhISiI6Opqqqittuu43o6GjmzZtHeno699577w3Jn0ajYcaMGfzwww88/vjjjSQOrFYrX3zx
      BVlZWURERGA0GunSpQvJycnMnz+fixcvEhcXx913343ZbCY8PJy8vDy2bt1Kz549pTj7m8mq
      VatYunQpnp6edOjQodG9U6dOsXnzZtLT09m8ebO0e3zWrFlkZGSwbds2OnfujLe3N/v27WPD
      hg2cOXOGwsJCevTocZNydHMQQrBmzRoOHz7M/v37pV3sMlfH3r172bhxI2fOnEGj0TSqT0II
      vvzyS44ePcqBAwdwc3MjKCiIffv2sX79es6cOUNxcTFt27Zl7ty5nDx5El9fX+zs7FiwYAED
      Bw68sWqgf2cKCwvFqFGjhFarbaRCajabRXh4uHjllVfEkSNHGj1z/PhxSfFwyZIlYsuWLcJm
      s4kZM2aIQ4cOCZvNJoYPHy4uXrwoYmJixLx584QQQhiNRhEXFyemTp16w/JnsViEXq9vUg3U
      ZrMJi8UihBAiNjZWvPXWW8Jms4lJkyaJ+Ph4YbFYxOuvvy7S0tJEdHS0mDZtmrDZbGLbtm1i
      8eLFNywPv4XBYLiiGqjFYpFUaEeNGiUuXLggzpw5I958801hs9nEwYMHxYwZM4TJZBIvvfSS
      yM3NFbW1teL555+/TA30705FRYUYOnSoMJvNIjs7W7z66qtXVOWV+W1MJpN48cUXRV5enqip
      qbmsPmk0GvHvf/9b6PV6kZGRIV555RVhMpnE8OHDRVlZmdDpdGL48OEiISFBfPbZZ+LgwYNi
      48aN4pNPPhEZGRnXzE55Coh6ZT6dTse8efN4++23pW3pmzdvpm3bttx+++3Sb/V6PUuXLmXZ
      smWMHj0ahULBhQsXaN++PQqFgnbt2kmKiU8//TQTJkxgzZo1PPfcc0C9ntGN3pykVCqvKIuh
      UChQKpXYbDb27t1Lnz59pJ2UgYGBKJVKAgMDyc7OJiMjg3bt2qFQKAgLC7ui+uuNxtHR8Yr3
      lEolCoWC5ORk7OzsaNWqFenp6VI+2rZtS05ODuXl5ZhMJnx9fXFxccHNzY3CwsIbmIubT35+
      Pi1btkSlUhEUFERpaWmjKU2Z30/DwTO+vr64urri6uraqD4VFhbi5eWFWq3G19eX2tpaqqur
      qa2txcfHBycnJ5ydnbG3t6eiooL9+/eTkZFB586dpR3Y1wLZAVA/H6xWq3n//fcZO3YsS5cu
      5eLFi2zatAkXFxdSU1M5fvw4Wq0WBwcHHnzwQe68806++eabRgp/gPRirFYrUVFRTJgwAZVK
      RURExC07p2q1Wlm+fDkeHh6XHYLSwK+d1q2al6ZITU1lxYoVTJ06FVdXV6BxfprK218pf9eD
      5p7/a0lDWTbV8ROXzP03dc3NzY1p06YxZMgQzGYzJ06cYPr06RQVFV0T22QHALRu3Rq1Wo2D
      gwMtWrTAYrHg5ubG+PHj8fb2RgiBo6MjdnZ2KJVKOnTowNChQ0lNTcVsNtOhQwcyMzMlHf2w
      sDDy8/OB+rMQpk6dys8///ybx2beaMxms3Qc4rfffktNTQ1vvvmmdN5CUFAQhYWFWK1W8vLy
      CAkJoX379mRnZyOEIDMzk/bt29/sbDSJ+OVYPZvNRnFxMbNmzeKDDz6gXbt2ANL7gnplyDZt
      2uDj4yP1tnQ6HTU1NQQEBNzMbNxwAgMDKS4uxmazkZeXh5+fX5Onx8n8bzw9PZusT0ajEZPJ
      ROvWraWjIMvKynBzc8PDw0OSyG9QTfXx8aGmpobt27czaNAgOnToQJ8+fTh79uw1sVNeBKZe
      QCwtLY1du3axd+9ennvuObp27UpYWBhhYWGcP3+eO+64g9DQUNauXcuhQ4f47rvvuPfee+nT
      pw/BwcGsXLmSxMREampqGD16NB4eHuzatYszZ86wZ88e7rrrLnr37s2RI0fYsGED6enplJaW
      3hC9mqKiIubMmUNqaipZWVnccccd7Ny5k02bNnH33XczdepUampq2LdvH1lZWdx5550EBASw
      dOlSTpw4gY+PD0888QSBgYFs376dhIQETpw4wfjx43Fzc7uutv8e1q1bx/79+8nMzESlUtG2
      bVseffRRHnjgAaKiojh27Bhnz55l586d9OjRg5CQEH7++WdiYmI4fPgwEyZMwMfHB1dXV778
      8ktiYmK49957ueOOO2521m4oDZLKmzZtYv/+/YwePZq2bdvebLP+kiiVSlxcXKT6NHDgQHr1
      6sXcuXPJyMigf//+FBcXExERwf79+3nppZdo06YN3t7eLF68mOjoaB544AG6d+/OwoULGTVq
      FCEhIURGRpKbm8sTTzxxTb49eR/AL1itVoqKilCr1Xh7ezdqlE0mE3Z2dqhUKurq6igsLMTd
      3R0/Pz9J0VCn01FeXo6/vz/29vbSIfUFBQW4uLhIK/gNJ09BvaqqWq2+7g7g1weiOzk5kZaW
      xt69e5k4cWKjg7uVSiVqtVoKV23QMW9QPTWbzWg0mluqd2gwGKSpOJVKhb29PZMnT+bjjz/G
      wcGhURirWq1GqVRisVjQaDR4e3vj7OwsnetcUVGB1WqV3ldzo2HU5OTkhIeHhyym9ydoqj4Z
      jUYUCgUODg5NlvWvn2lQsW0YjTa0HddqLVF2AM0UjUaDs7MzHh4eN9uUa47NZiMjI0NamJeR
      kWka2QHIyMjINFOa3xhXRkZGRgZopmqgt0r8uoyMjMzNRJ4CkpGRkWmmyFNAMjIyMs0UeR/A
      L5jNZk6dOkVBQQEtW7bEzs6O4uJi8vPzKSsrw2azSQdWa7Va6WD4hiiTmpoaTp8+TUVFBV5e
      XpK8QkpKCllZWTg7O+Ps7CwpVxYVFUmHXd8IdDodFy5cwMfH54rhjQ2bgBwdHamtrSU7O5uy
      sjK0Wq10sHdtbS2nT5+WDo+/FbDZbOTk5GA0Gq9ok9FopKCgAE9PT2w2G6mpqZw/fx4HBwcp
      nloIwYULF0hNTcXDwwO1Wt1kWnl5eTg6OqJSqSgrKyM3N5eysjLMZvMtsS/izyCEoLi4mLKy
      MumdQ720wcWLF/H19b3smYKCAgoLCykrK8POzg4nJ6fL6o8cUlqPwWDg1KlTWK1W3N3dLysT
      k8nE8ePHKSsro0WLFtjZ2WGxWEhKSqKyshJfX18UCgUFBQUoFAocHR2x2WycOXOmUVj670V2
      ANRX+jlz5pCfn8/Zs2dJSUmhT58+fPHFF8TExJCdnY1KpSI0NJTMzEzmzp1LZGQkzz77LHZ2
      dhQVFfHBBx/g6upKTk4OQUFBuLq6Mnv2bLKysrBardTV1RESEsKBAwdYvHgxWVlZDBw48Ibk
      r7CwkFmzZrF161aefPLJJlUES0tLGT16NEFBQYSGhnLs2DGWLl1KcXExxcXF9OrVC4PBwNtv
      v41arWb9+vV06dLlhjqxK7FixQpWrVqFr6+vpOJ6KUIIli5dyrfffstTTz2FwWBg69atGAwG
      5syZw3333Yerqyt79+7l+++/x2Kx8NVXXzFkyJDLPtAzZ84wbtw4+vfvj4+PD9988w07duwg
      NzcXi8VCp06dblS2rwvbt29n2bJlVFRUcNdddwH1iqrz58/n6NGjDBky5LJnZs2aRXJyMunp
      6Xh4eBAYGEhcXByLFy+muLiYkpIS/vGPfzR7B2Cz2Zg8eTIWi4Vt27bRokULWrduLd23Wq2E
      h4djMBg4duyYpCC6ZMkS0tLSOH78ODU1NZSXl7Nz50527NhB//792bdvHxqNhm7duv3hMm6W
      i8C/pkH87MUXX0Sv1/Pzzz9L10ePHk337t2l34aEhDBr1iyef/556VpkZCT33oiIhx8AACAA
      SURBVHsvjz/+OE5OTiiVSkmDfvny5VKvCGDgwIG4urqye/fuG5Y/f39//vvf/zJixIgm75vN
      ZubOncttt93WSIfk3nvv5cUXX5R+FxMTQ0hICP/+97/x9/cnIiKCd99994bk4bd49dVXL9Nk
      upSYmBjy8vKk3rmTkxPjx49HCMGxY8eora2lZcuW5OXl0alTJx5//HESEhIuS6eqqorVq1fT
      oUOHRuU0dOhQ7rnnnuuTuRvMY489hlqtbiQ10LNnT9577z1mzpzZ5DMKhYLXX3+dwMBA6ZoQ
      ggEDBvDyyy9fd5v/Kpw7dw6LxcKYMWM4ffo0mzZt4o477pAa7QYJjrFjx5KSkkJJSQklJSWc
      Pn2aL7/8Eq1WyxtvvMGDDz7Ifffdx44dO0hMTCQpKYl33333qhysvAZA/Y7cxx9/nMmTJ7No
      0SJGjhyJQqHA19eXL774gk8//ZTKykrpt78u6MzMTGJjY5kzZw5vv/02FRUVZGVlUVtby9y5
      c3nrrbeIiYkB/l+d8kbn70pDQyEE3333HV27duW2226Trru6unL06FEmTZpEWloa8P+6OQqF
      gqCgIC5evHgjzP+fNOxSbgqNRsPmzZt5/fXXG5XBgQMHGD9+PIGBgYSEhADw4IMPEhERwauv
      vsrw4cMb/b5BMO/pp59upBHk5eXFN998w8cff0xJScl1yN2NpamybKrOX4qvry+ffvopn3/+
      uXRQiYuLC7GxsUyaNInU1NTrZu+tihACq9WKxWLBYrFI05SBgYEoFApatmwpTRs2oFKpGDJk
      CGPHjpVGq+Xl5Tg7O6NWq3FxccFqtdKrVy927dqFzWYjIiKChx56SDqw6o8iOwDq57W3bdvG
      vHnz6NSpE8uWLUMIwYsvvsiCBQtwd3fnm2++ueLzQggGDRrEjBkzCAoK4vDhwwgh8PPz46OP
      PuL1119n06ZNt6TCYn5+PuvXr6empoa4uDj27dtHVVWVNAX22GOPMXv2bADs7e2lU9AsFssV
      JaZvJRpGYD/++CO5ublER0cD0LdvX959911yc3M5c+YMABs2bOC1117jmWeeYdWqVY1OGPv5
      55+Jj4/n3LlznD9/nu3bt2M2m3n22WdZtGgR7dq1Y+XKlTcjized//znP8ydO5fq6mp27twJ
      QO/evVmxYgWPPPIICxYsaHR6XnNAq9UyY8YM3n//fd5//33Wr1+PSqXCarVKzuHXHTOtVsve
      vXuZP38+LVu2ZP369dJaYoNCrc1mo1OnTrz//vt4enri4eHB0aNHmTNnzlWJTd76X/ANoKqq
      Cr1eT48ePWjbti2jR4+WGmu1Wk1QUBBJSUnA5TK5Qgjat28vHTfo4OCAo6MjYWFhGI1GhBDY
      29tLC4pNyb5e7xFBUzbX1tZiMBjw8fFh3rx5AFRWVtKqVSucnJwku4ODg6XRT9euXYmIiJAW
      t7t163Zd7f69NFWmubm5BAQE8MILL1BXV0dFRQWnTp0iNDQUm82GWq2mbdu2BAcHk5WVxT/+
      8Q/Onz/PyJEjCQgIICYmBo1Gg9lsRqlU0qlTJ6ZPnw5AcnIyXbt2RalUIoRArVbTpk0byZH8
      lfl1WTbo0/z6WllZGUqlEi8vL6C+x9+6dWvKy8ul36lUKtq0aYNer//LdBiuFW5ublJ9aSA3
      N5cffvgBq9VKeno6ISEhqFQqNBoNbm5uFBQU4OjoSNeuXRk3bhyzZ8/mhRdewGg0Ul1dTUVF
      BZ6enqjVanbv3k1AQAB5eXk88sgjrF27Fq1W+4fX5ORFYOrnhBvUInft2sWTTz5Jt27dWLNm
      DT/++CMJCQm8/PLL+Pn5kZ2dzcyZM9FoNJw+fZp77rmHsLAwNmzYQGxsLJWVlYwePRpfX19y
      c3PZunUrsbGx/Pvf/yYgIICDBw/y9ddfk5OTQ25uLv369bvuDkCj0fDxxx9TWFhIYmIiffv2
      5cCBA2zZsoVHHnkEf39//P39yc7Opl27drRv357o6GhWr17Nnj17+Ne//kWnTp3w9/cnNjaW
      PXv2kJOTw9ixY3F2dr6utv8evvzySw4fPsyFCxcQQhAWFsbw4cN54IEHaNu2Lf7+/ri4uJCY
      mMjQoUMpLS0lPDycuLg4cnNzeeWVV3BxccFsNrN+/XoOHz6Mr68vTz75JCtXriQ3N5d//vOf
      UjmdPHmSgQMH4uPjw6ZNm9i6dStHjhzhpZde+stLSP/0009s3ryZ7OxsSkpK6N27N4mJiSxe
      vJiCggKSk5MZNGgQK1euJCsri9tvv5358+ezZ88e0tPTefnll/Hw8ODw4cOsWbOGqKgonnzy
      Sbp27drsF4Hd3d3Jz89ny5YtJCYmMn78eDw9PZkyZQqurq50796dI0eOEB0dzf79+3n66afp
      2bMnCoWCNWvWEBMTw9ixY7HZbOzYsYOxY8eiVqv54Ycf8PHxYcCAAX84CkjeCPYLQgiqqqpw
      cHCQwj0NBgO1tbV4eXn9z96L1WqluroaT0/PRi+huroatVr9m6dW3QzOnj1LTEwM48aNa/K+
      xWKhsrISNze3RuGQQgiqq6txd3e/ZdUybTYbH3zwAdOmTWtSsbThvAC9Xn9ZWKxWq8VsNuPp
      6fm7Giyj0UhNTY2k/94c0el06HQ6KfwZrlx/ZOpDxp2dnZtsUxrUQJ2dnRvV3bq6OlQqFY6O
      jmi1WlQq1TUpV9kBNFMqKytxdna+5RzTtcBms1FWVtZon4aMjMzlyA5ARkZGpplya47hZWRk
      ZGSuO81nWf4SZDVQGRkZGXkKSEZGRqbZIk8BycjIyDRT5H0Av6DX6zl//jzV1dX4+PgA9cp8
      WVlZXLx4UYrv1mg0HDx4kKysLAICAnBwcKCiooLDhw+TkpKCh4eHpDljMBiIiYkhKSkJFxcX
      PDw8MJlMZGZmkpubS6tWrYD6qJWEhATi4uJwcnL63SGIvxebzYZGoyExMZHWrVs3CnsUQpCd
      nc2hQ4fQaDS0bt0apVJJeXk5p06dIjc3l/LycsnW4uJiDh48CICPj88tEWWj1WpJTk6Wwjcv
      RafTERMTQ2JiIq6urri7u2O1Wjl27BjHjx/Hzs5OUliE+vLIzMzEYrFI4cAN10+cOEF2dja5
      ubmSauxvyVD8FTEajVy4cIHi4mJatGgB1KufJicnk5ubi16vv0wR9NSpU8TGxqLVavH3979l
      w4NvNkII9Ho9KSkp6PV6aRNdA1arlePHjxMXFycpCUC9htCRI0eoqqqS2qGUlBRsNhuurq5Y
      LBaOHj1KUFDQHy57+U39wvbt21m8eDFxcXHStfj4eFasWMHmzZula8eOHUOtVpOZmcknn3yC
      zWaTZJQrKyt55513pG3bH3/8MdnZ2Tg7O1NQUCA9v3z5ciIjI6U0o6Oj+e6773BwcODjjz+m
      pqbmmuatqKiIlStXMn/+/EbaI1DvHI4cOYKnpyeHDx/myy+/RAhBYmIiGzduJCUlhczMTKC+
      oZ08eTJ2dnYsWrSIc+fOXVM7r5YffviBhQsXSru1L+XChQuUlJRgb2/Pu+++S3l5ORaLhYKC
      Atzd3Zk0aRKFhYXS7/Py8njjjTc4fvz4ZWmdPn2a+Ph4Dh8+zMyZM69af+VWZv/+/Sxbtoy9
      e/dK16KiotixYwcpKSnk5eVd9kx2djaenp4sX76c2NjYG2nuX44tW7awePFiTp48edm96upq
      Tp8+ja+vL7NmzSIpKQmTyURsbCxeXl58//33REREcODAAWJiYpgzZw51dXVs3boVrVZ7VZ2R
      ZrkI3BTDhg3DZrM10tPo378/rq6ufP/999K1Z599FoDOnTvz4YcfYrVa6dy5M507dyYvL4/o
      6GipV11eXs6wYcMQQkijgoEDB+Ls7MyuXbukNKurq3Fzc6Nv377s3r37mm8oCggIYMqUKQwf
      Pvyye0qlktGjRwP1shfbtm2T7vXp04eXXnpJ+js6OprbbruNxx57DCcnJyIjI+nates1tfVq
      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
      uPVdvXqVb7/9loSEBJo1a4aLiwulpaWcOHGC3NxcSenUYDDw/fffc+bMGcLCwursBD516hS7
      du0iKSmJpk2bSmVyr3Px4kV27NiB1WolNDS0Vp0oKyvju+++49ixYzg5OUltJysriy1btlBS
      UkJ4eDhKpZLy8nK+++47kpKSaNmyJWq1GrvdzsGDB4mMjMTX1xdfX1+EEJw7d46dO3eiVCoJ
      Dg5GoVCQkZHB1q1bKS8vp1mzZiiVSoxGI9u2bSM2Nla691arlcjISA4ePCjtwgc4c+YMu3fv
      Rq1WExQUdMvrtl6vZ8eOHZw9e7be+lRUVMSWLVvIyMigRYsWtdyVT548id1ux8vLi3PnzpGU
      lERoaChKpZJ9+/bh7+/fIPVTHgHcID4+nmPHjnHp0iUpLT09nTNnznDkyBHgus/zunXrMJvN
      dOrUiY8//hiDwUBMTAw//PADvXv3ZunSpRQUFEj+vY8//jg//vgjx48fB65vnX/00Ue5cOEC
      +/btA2Dz5s0UFBTQsmVLSS20IYmJieHo0aMMHDiQL7/8kuLiYkwmE7GxsezYsYPq6mrgemOe
      P38+vXr1IjIykhMnTjSoHbcCh6pihw4dsFqtfP311wAkJSURHR3N6dOnpXPXr19PdXU1TZo0
      Yfbs2XV2+2o0GoYMGUJRURGbNm26rfm4W8nKymL16tX07duXbdu2cfHixVrH7XY7HTt2pGfP
      nixcuJCKigoMBgPTp0+nR48exMXFsW/fPmw2GwsWLMDf3x+73c6qVauA6wqsJ0+epHv37ixY
      sIDy8nLS0tJYt24dAwYMYN26daSnp1NZWcncuXPp1q0bp06d4uDBgwghWL16NVarlaCgIBYs
      WIDVamX//v3ExsbSrVs3Zs2ahcFgIDExkc2bN9OvXz/Wrl17W7SeVq9ejdlsJiAgoI76rNVq
      Zc6cOTRr1ozS0lIiIiKkY4mJiUyfPp2kpCTy8vLYvXs3OTk5HD9+nLi4ONLS0vDx8WkQG+UO
      4AZDhgyhS5cutdK6du0q7XyE65syLl26xMCBA+nVqxeurq6kpaVx4MAB/va3v9GpUyc6depE
      dHQ0rq6uPPnkk7Rs2ZKQkBBJ6Klbt24EBgbi4+ODp6cncF2KeuTIkTz88MNYrdYGX6R2dnam
      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
      Rg++vr74+voSGxtLamoqfn5+f0t57wXhVt4GKysrunbtikwmE3tkSqUSgKtXr1JSUkK3bt2A
      euVLNzc3HBwcsLe3x9HREa1Wi0ajEXtmy5cv57HHHmPUqFH/usVeAG9vb+bNmyf+27gga1S8
      jYyMJDU1lSZNmoj3t7q6mrlz5/LJJ58QHBz8u9du0qQJGo0GhUKBQqHAwsICOzs7WrRoQVZW
      Fj4+PuTk5NCzZ090Oh3Z2dkIgkBWVhYtWrTAz8+P8+fPIwiC2BOWSqU4ODiIDhlyuRx3d3d8
      fHwoKirC19eXnJwcBgwYQGVlJVlZWTzxxBPi+fcTZ2dnLCwsqKqqEvW+vL29G9jTsmXL8PPz
      E2cHBEFg//79ZGRk8MUXX4iLvAqFgn379tG/f39ycnJwdnbm2rVrjZKxzuQFdIvDhw9z7Ngx
      srKyxGHi5cuX+eWXX0hNTaW6upouXbpw/PhxIiMj2bt3L/379yckJISmTZuyfv160tPTKSws
      5O2338bR0ZGDBw+SnZ1NZGQk7dq1Izg4mPnz56PT6YiNjUUmk9G+fXtmz56NXC7n4sWLxMfH
      Exoa2qh1Ky0t5YcffuDGjRuUlJTQsWNHjh8/zs6dOxk8eDBt2rShTZs25Obm0r59e9q0aUNZ
      WRk///wzH374odgoZWZmsm7dOq5cucLNmzcZNWrUQyEDvGPHDqKiosjNzcXKyopmzZrxyiuv
      0K9fP7E+TZs25dKlS4wdOxaoTyPZqVMnceht/NiFhYVx48YNHBwcGDx4MCtWrCA9PR13d3eW
      LFmCTqcjOjoatVpNUFAQN2/eZMuWLSQnJ1NdXU2HDh3+Fg+T+4Hxw2T8MzMzIzk5mU2bNnHh
      wgWysrJ48803sbGx4eWXX6ZXr16cOnWKqKgoioqKiIiIICgoCCcnJ/bu3Ut4eDjZ2dlYWlrS
      rl07KioqOHz4MJGRkQwbNozAwECaNm3K6tWrSUlJEReHmzdvzpYtW8jJyeHy5ctMmDCBZs2a
      ERsbS3x8PCdPnmTs2LF4eHhgb2/Phg0bOHPmDF26dKFnz554enqydu1akpOT0el0vPHGG/j6
      +rJ582YyMjJISUnhvffeu8PLqzExNzfH3NycsLAwzp07R+fOnenZsyfLli0jMzOTJk2asGTJ
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='London Rental Flat Overview' width='384'>
      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
      zDo6Oq2XU7XdzU4EO54DBw4gyzJdu3YlIyODZ599lokTJ1JXV8f48ePJzMxk8+bNjB49mr//
      /e/U1tYyatQo/vCHP/DKK69QWVnJvn37eOutt3j11VdxOp1ER0fzzjvvcPjwYV544QVMJhMm
      k4mrr76a22+/nX/+859s27aN6Oho3nzzzWaN3ZAhQ0hLS+Oee+7B4/FQUVHBiy++SHl5OZde
      ein/93//x5QpU9i5cydlZWV4PB6mTJnCRx99xMqVK3n00Ud57733mqQZFxdHTk4OZrOZxMTE
      JmG1tbWaTOXl5VRWVvLtt98ybNgwAA4dOkRGRgZvv/02gwYN4pZbbmHkyJHMmzePFStW4Pf7
      uf/++/niiy9OquuVK1diNBpJSEjg6aefpqamhuTkZJ5//nneffddRFFEEARMJhNr1qzhxhtv
      5PHHH8dms7FlyxaSkpL44IMP2Lx5M//4xz+IjY3F4/HwwAMPkJaWxrPPPksgEKBfv348//zz
      p3r0Ojo6FzCn03afcgSwYMECbrjhBm644QaWLFmC1+tl4MCBLF26lKqqKubPn8+gQYN45513
      aNeuHX/605+YOnUqHo8Hu91OTU0NU6ZMoWPHjpoR2LlzJ7m5uXz00UckJibyxRdfIMsydXV1
      rFmzhm+//ZbXX3+dmpoavvvuu2Yyffrppzz22GPce++9xMfHM336dGRZ5rXXXiM9PZ3i4mKc
      TieFhYW8/vrruFwutm3bxo033ojBYGjW+H/zzTfk5OSwb98+Hn/8cZYvX87MmTO18JCQEJ54
      4gmGDx9Oz549+de//qU1/tBgAABSUlIAMJlMJCUlUVxczAMPPEBoaCizZs1CFE+u7srKSurr
      68nNzWXHjh088sgjvPbaa8TExHDZZZcxdOhQbrvtNlwuF5WVldo9Pp+PV155ha1bt1JRUcHb
      b7/NkCFDmDJlClVVVdTX17N161YOHz7Mc889xzPPPHOqx66jo3OBczpt90lHAF6vl2XLlmE2
      mxEEgdraWlavXs2wYcOIiopixowZFBQU0K9fP9555x1kWeaHH37gxhtvxOfzAdCnTx86duzI
      7t27efrppxkyZAiCIKCqKhUVFfTo0QNRFLFYLEBDgxYIBEhPT6dfv37ExMQ0k+v6669n9erV
      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
      +7V60+hMrzGP3bt3n5ZbDh2dc4mqqmRmZpKYmMgrr7zCyy+/jCAISJLE3//+9xMbgGuuueaU
      FbywsBBVVfH5fHz//fdkZWXhdDrJzMzkjTfeABo2elVVVfH6669r/oH27t1LVVUVqqqydetW
      qquriYyMZP369dTX1wNgMBhwu918+umn2O12AOxOmcWZVdS6AixcXcnyrGryDnuYMq+U2joX
      b775prax7Pvvv2f79u1UVVVhNps1eb777jsKCgqayLNnzx6+/fZbZFk+YVl9Pp8mz+LFi0lK
      SsLv97N79262bNnCV199xbJly1i0aBEvvfQSBw8e5Omnn2br1q0UFRUBNOltDh06lJUrV1JS
      UkKbNm2ora0FGkYvjXgr/dTlu/FVy9TluqneVIviU6nIrGki2/r167njjjsICQkhNTWVLVu2
      sGjRInJzc/nqq6+YOnUqR44cYebMmezfv59//etfAJpH0ZZwOp2aPOvWrSM8PJzKykoMBgPp
      6elMnz6dqVOn8sMPP/DUU08BDWc1LF++nLlz52qb+nr37s22bdu059qo42PLWV1dTXp6OrWB
      AN84HKx2Oinyefm0qoJSn4/5djtHDh/S4q9bt45bb72VyMhIhg4dSlZWFtOmTSM3N5fMzEwm
      TJjwi8jjdDqZO3cuixcvJjc3l7fffpuioiKmT59OeXn5CXWno3O+sH37do4cOYLH4yErK0u7
      Looi7du3P7EBCA8P54rLrzhp4qIocuTIEfbv38+1115LmzZtGD58OLGxsVqP2ul0smbNGi6/
      /HKsVisAV155JStWrGDfvn3Isqy5Om48N6BHjx4cPnyYtWvX4na78Xg8TfINBBoa7rxDbgpL
      PHSMt1BQeIhOnTpx2WWXYbVaGTFiBMOGDaOwsJAffvihWQ//iiuuIDU1VZNn9erVTU7sOh67
      3c66detwu90YDAbq6uoAWLt2LQUFBcTHx2OxWMjJycHlcnHRRRcRHx+PzWYjLi6OSy+9tImb
      C6vVSmhoKNOmTeO6666jrKyMdevWNZsKAkBpKK+30o+3wocpytgkODg4WGvMX3rpJXJycrj8
      8su5+uqrOXDgADk5OVx77bUMHDiQ7du3ExISwqWXXtqip9VGjpUnJCREmw50OByEhISwatUq
      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
    </thumbnail>
  </thumbnails>
</workbook>
