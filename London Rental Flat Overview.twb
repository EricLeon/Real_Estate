<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0605.1023                               -->
<workbook original-version='18.1' source-build='2021.2.0 (20212.21.0605.1023)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <DashboardMttwImageObject />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.SingleValuePerNestSorting.true...SingleValuePerNestSorting />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style>
    <style-rule element='worksheet'>
      <format attr='color' value='#333333' />
    </style-rule>
    <style-rule element='title'>
      <format attr='font-size' value='12' />
      <format attr='font-weight' value='bold' />
    </style-rule>
    <style-rule element='tooltip'>
      <format attr='color' value='#333333' />
    </style-rule>
    <style-rule element='all'>
      <format attr='font-family' value='calibri' />
      <format attr='color' value='#333333' />
    </style-rule>
  </style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
        <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
        <aliases>
          <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
          <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
        </aliases>
        <members>
          <member alias='By Borough' value='&quot;Rent By Scrape Date&quot;' />
          <member alias='By Available Date' value='&quot;Rent By Available Date&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='all_rental_data' inline='true' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='all_rental_data' name='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5'>
            <connection class='textscan' directory='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate' filename='all_rental_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='property_id' ordinal='0' />
            <column datatype='string' name='property_link' ordinal='1' />
            <column datatype='string' name='listing_title' ordinal='2' />
            <column datatype='string' name='description' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='real' name='num_bedrooms' ordinal='5' />
            <column datatype='real' name='num_bathrooms' ordinal='6' />
            <column datatype='integer' name='max_tenants' ordinal='7' />
            <column datatype='string' name='deposit' ordinal='8' />
            <column datatype='real' name='rent_pcm' ordinal='9' />
            <column datatype='string' name='bills_included' ordinal='10' />
            <column datatype='string' name='student_friendly' ordinal='11' />
            <column datatype='string' name='family_friendly' ordinal='12' />
            <column datatype='string' name='pet_friendly' ordinal='13' />
            <column datatype='string' name='smoker_friendly' ordinal='14' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
            <column datatype='string' name='min_tenancy_months' ordinal='16' />
            <column datatype='string' name='garden' ordinal='17' />
            <column datatype='string' name='parking' ordinal='18' />
            <column datatype='string' name='fireplace' ordinal='19' />
            <column datatype='string' name='furnishing' ordinal='20' />
            <column datatype='string' name='closest_station' ordinal='21' />
            <column datatype='string' name='closest_station_mins' ordinal='22' />
            <column datatype='string' name='postcode' ordinal='23' />
            <column datatype='string' name='listing_type' ordinal='24' />
            <column datatype='string' name='region_loc' ordinal='25' />
            <column datatype='real' name='bed_bath_ratio' ordinal='26' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
            <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='property_id' ordinal='0' />
            <column datatype='string' name='property_link' ordinal='1' />
            <column datatype='string' name='listing_title' ordinal='2' />
            <column datatype='string' name='description' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='real' name='num_bedrooms' ordinal='5' />
            <column datatype='real' name='num_bathrooms' ordinal='6' />
            <column datatype='integer' name='max_tenants' ordinal='7' />
            <column datatype='string' name='deposit' ordinal='8' />
            <column datatype='real' name='rent_pcm' ordinal='9' />
            <column datatype='string' name='bills_included' ordinal='10' />
            <column datatype='string' name='student_friendly' ordinal='11' />
            <column datatype='string' name='family_friendly' ordinal='12' />
            <column datatype='string' name='pet_friendly' ordinal='13' />
            <column datatype='string' name='smoker_friendly' ordinal='14' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
            <column datatype='string' name='min_tenancy_months' ordinal='16' />
            <column datatype='string' name='garden' ordinal='17' />
            <column datatype='string' name='parking' ordinal='18' />
            <column datatype='string' name='fireplace' ordinal='19' />
            <column datatype='string' name='furnishing' ordinal='20' />
            <column datatype='string' name='closest_station' ordinal='21' />
            <column datatype='string' name='closest_station_mins' ordinal='22' />
            <column datatype='string' name='postcode' ordinal='23' />
            <column datatype='string' name='listing_type' ordinal='24' />
            <column datatype='string' name='region_loc' ordinal='25' />
            <column datatype='real' name='bed_bath_ratio' ordinal='26' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
            <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;Â£&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>property_id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[property_id]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>property_id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>property_link</remote-name>
            <remote-type>129</remote-type>
            <local-name>[property_link]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>property_link</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listing_title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[listing_title]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>listing_title</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>129</remote-type>
            <local-name>[description]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_bedrooms</remote-name>
            <remote-type>5</remote-type>
            <local-name>[num_bedrooms]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>num_bedrooms</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_bathrooms</remote-name>
            <remote-type>5</remote-type>
            <local-name>[num_bathrooms]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>num_bathrooms</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>max_tenants</remote-name>
            <remote-type>20</remote-type>
            <local-name>[max_tenants]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>max_tenants</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>deposit</remote-name>
            <remote-type>129</remote-type>
            <local-name>[deposit]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>deposit</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rent_pcm</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rent_pcm]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>rent_pcm</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bills_included</remote-name>
            <remote-type>129</remote-type>
            <local-name>[bills_included]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>bills_included</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>student_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[student_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>student_friendly</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>family_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[family_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>family_friendly</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pet_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[pet_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>pet_friendly</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>smoker_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[smoker_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>smoker_friendly</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>available_from</remote-name>
            <remote-type>7</remote-type>
            <local-name>[available_from]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>available_from</remote-alias>
            <ordinal>15</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>min_tenancy_months</remote-name>
            <remote-type>129</remote-type>
            <local-name>[min_tenancy_months]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>min_tenancy_months</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>garden</remote-name>
            <remote-type>129</remote-type>
            <local-name>[garden]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>garden</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>parking</remote-name>
            <remote-type>129</remote-type>
            <local-name>[parking]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>parking</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fireplace</remote-name>
            <remote-type>129</remote-type>
            <local-name>[fireplace]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>fireplace</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>furnishing</remote-name>
            <remote-type>129</remote-type>
            <local-name>[furnishing]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>furnishing</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closest_station</remote-name>
            <remote-type>129</remote-type>
            <local-name>[closest_station]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>closest_station</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closest_station_mins</remote-name>
            <remote-type>129</remote-type>
            <local-name>[closest_station_mins]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>closest_station_mins</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>postcode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[postcode]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>postcode</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listing_type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[listing_type]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>listing_type</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>region_loc</remote-name>
            <remote-type>129</remote-type>
            <local-name>[region_loc]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>region_loc</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bed_bath_ratio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[bed_bath_ratio]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>bed_bath_ratio</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>scrape_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[scrape_date]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>scrape_date</remote-alias>
            <ordinal>27</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_monthly_rent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_monthly_rent]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>predicted_monthly_rent</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Value' datatype='real' name='[Calculation_1970606335739912192]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[rent_pcm] - [predicted_monthly_rent]' />
      </column>
      <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
      </column>
      <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
      </column>
      <column caption='LAST' datatype='integer' name='[Calculation_2147442990582628352]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='LAST()'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
      </column>
      <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([property_id])' />
      </column>
      <column caption='Days On Market' datatype='integer' name='[Calculation_768919287822987264]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
      </column>
      <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
      </column>
      <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
      </column>
      <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
      </column>
      <column caption='Days on Market' datatype='integer' name='[Calculation_888546153548345344]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='all_rental_data.csv' datatype='table' name='[__tableau_internal_object_id__].[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]' role='measure' type='quantitative' />
      <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
      <column caption='Bills Included' datatype='string' name='[bills_included]' role='dimension' type='nominal' />
      <column caption='Closest Station' datatype='string' name='[closest_station]' role='dimension' type='nominal' />
      <column caption='Closest Station Mins' datatype='string' default-role='measure' default-type='quantitative' name='[closest_station_mins]' role='dimension' type='nominal' />
      <column caption='Deposit' datatype='string' name='[deposit]' role='dimension' type='nominal' />
      <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
      <column caption='Family Friendly' datatype='string' name='[family_friendly]' role='dimension' type='nominal' />
      <column caption='Fireplace' datatype='string' name='[fireplace]' role='dimension' type='nominal' />
      <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
      <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
      <column caption='Listing Title' datatype='string' name='[listing_title]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;flat&quot;' value='Flat' />
          <alias key='&quot;shared&quot;' value='Shared Accom.' />
          <alias key='&quot;studio&quot;' value='Studio' />
        </aliases>
      </column>
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Max Tenants' datatype='integer' name='[max_tenants]' role='measure' type='quantitative' />
      <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
      <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
      <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
      <column caption='Pet Friendly' datatype='string' name='[pet_friendly]' role='dimension' type='nominal' />
      <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
      <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
      <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
      <column caption='Property Link' datatype='string' name='[property_link]' role='dimension' type='nominal' />
      <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
      <column caption='Smoker Friendly' datatype='string' name='[smoker_friendly]' role='dimension' type='nominal' />
      <column caption='Student Friendly' datatype='string' name='[student_friendly]' role='dimension' type='nominal' />
      <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rent_pcm]' derivation='Median' name='[med:rent_pcm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1970606335739912192]' derivation='Sum' name='[sum:Calculation_1970606335739912192:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Borough)' hidden='true' name='[Action (Borough)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_816770033929490432]' />
        </groupfilter>
      </group>
      <group caption='Action (Postcode)' hidden='true' name='[Action (Postcode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Action (Value Classification,Postcode)' hidden='true' name='[Action (Value Classification,Postcode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Postcode)' hidden='true' name='[Tooltip (Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Still On Market,Postcode)' hidden='true' name='[Tooltip (Still On Market,Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_719379691605893121]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Value Classification,Postcode)' hidden='true' name='[Tooltip (Value Classification,Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Calculation_719379691605893121:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>true</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[med:rent_pcm:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335739912192:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1970606335741288450:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;Good Value&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Over Valued&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fairly Valued&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-date-format>*dd-mmm-yy</default-date-format>
      <datasource-dependencies datasource='Parameters'>
        <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
          <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
          <aliases>
            <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
            <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
          </aliases>
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='all_rental_data.csv' id='all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B'>
            <properties context=''>
              <relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
                  <column datatype='string' name='property_id' ordinal='0' />
                  <column datatype='string' name='property_link' ordinal='1' />
                  <column datatype='string' name='listing_title' ordinal='2' />
                  <column datatype='string' name='description' ordinal='3' />
                  <column datatype='string' name='location' ordinal='4' />
                  <column datatype='real' name='num_bedrooms' ordinal='5' />
                  <column datatype='real' name='num_bathrooms' ordinal='6' />
                  <column datatype='integer' name='max_tenants' ordinal='7' />
                  <column datatype='string' name='deposit' ordinal='8' />
                  <column datatype='real' name='rent_pcm' ordinal='9' />
                  <column datatype='string' name='bills_included' ordinal='10' />
                  <column datatype='string' name='student_friendly' ordinal='11' />
                  <column datatype='string' name='family_friendly' ordinal='12' />
                  <column datatype='string' name='pet_friendly' ordinal='13' />
                  <column datatype='string' name='smoker_friendly' ordinal='14' />
                  <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
                  <column datatype='string' name='min_tenancy_months' ordinal='16' />
                  <column datatype='string' name='garden' ordinal='17' />
                  <column datatype='string' name='parking' ordinal='18' />
                  <column datatype='string' name='fireplace' ordinal='19' />
                  <column datatype='string' name='furnishing' ordinal='20' />
                  <column datatype='string' name='closest_station' ordinal='21' />
                  <column datatype='string' name='closest_station_mins' ordinal='22' />
                  <column datatype='string' name='postcode' ordinal='23' />
                  <column datatype='string' name='listing_type' ordinal='24' />
                  <column datatype='string' name='region_loc' ordinal='25' />
                  <column datatype='real' name='bed_bath_ratio' ordinal='26' />
                  <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
                  <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
      <datasources>
        <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
      </datasources>
      <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
        <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
        </column>
        <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
        </column>
        <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
        </column>
        <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
        <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
        <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
        <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;flat&quot;' value='Flat' />
            <alias key='&quot;shared&quot;' value='Shared Accom.' />
            <alias key='&quot;studio&quot;' value='Studio' />
          </aliases>
        </column>
        <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
        <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
        <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
        <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
        <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
        <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
        <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
        <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
        <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
        <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
        <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_1970606335741288450:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]'>
        <groupfilter function='member' level='[none:Calculation_719379691605893121:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_816770033929490432:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' included-values='all' />
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]'>
        <groupfilter function='member' level='[none:furnishing:nk]' member='&quot;Furnished&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]'>
        <groupfilter function='level-members' level='[none:garden:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]'>
        <groupfilter function='level-members' level='[none:listing_type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]'>
        <groupfilter function='level-members' level='[none:parking:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]'>
        <groupfilter function='level-members' level='[none:postcode:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' included-values='in-range-or-null'>
        <min>570.0</min>
        <max>1500.0</max>
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Visit Listing' name='[Action1_51F15CEFC7C34818B17E56C731E378F1]'>
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Data Detail' />
      <link caption='' expression='https://www.openrent.co.uk//&lt;[property_id]&gt;' />
    </action>
    <action caption='Filter 1 (generated)' name='[Action2_362B439DEC2140838165D7179AA66AF6]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Flat Map' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='London Rental Flat Overview' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action3_79184BA9BC234F8586E6F2A258202FBE]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Rent By Borough' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='London Rental Flat Overview' />
      </command>
    </action>
    <datasources>
      <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
    </datasources>
    <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
      <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='# Properties'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[property_id]' derivation='CountD' name='[ctd:property_id:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
            <format attr='font-weight' value='normal' />
            <format attr='color' value='#666666' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='9' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Properties still on the market.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{B98E830A-BC1B-4C42-A222-0CAFCBB8EB39}' />
    </worksheet>
    <worksheet name='# Scraped Sanity'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='Value' datatype='real' name='[Calculation_1970606335739912192]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[rent_pcm] - [predicted_monthly_rent]' />
            </column>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_id]' derivation='None' name='[none:property_id:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[scrape_date]' derivation='None' name='[none:scrape_date:ok]' pivot='key' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1970606335739912192]' derivation='Sum' name='[sum:Calculation_1970606335739912192:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:ok]' pivot='key' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Sum' name='[sum:predicted_monthly_rent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Sum' name='[sum:rent_pcm:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:ok]' value='p0.00%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:scrape_date:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335739912192:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:ok] / [federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{75CFF424-BE0E-47AA-8AC2-0D29A47A9C1E}' />
    </worksheet>
    <worksheet name='Average Baths'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[num_bathrooms]' derivation='Avg' name='[avg:num_bathrooms:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='70' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bathrooms:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bathrooms:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bathrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{50A44A0D-34AF-4025-B4E9-5B6230C59DB3}' />
    </worksheet>
    <worksheet name='Average Beds'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[num_bedrooms]' derivation='Avg' name='[avg:num_bedrooms:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='89' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bedrooms:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bedrooms:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bedrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{4C346898-3402-44AA-A95E-7629B8DC0DBF}' />
    </worksheet>
    <worksheet name='Average Rent'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]'>
            <groupfilter function='level-members' level='[none:min_tenancy_months:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
            <format attr='font-weight' value='normal' />
            <format attr='title' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' value='Value Classification'>
              <formatted-text>
                <run bold='true' fontcolor='#666666'>Value Classification</run>
              </formatted-text>
            </format>
            <format attr='title' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' value='Type'>
              <formatted-text>
                <run bold='true' fontcolor='#666666'>Type</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='9' />
            <format attr='font-weight' value='normal' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average rent PCM (Â£).</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{935787A2-80F5-44C0-9D19-15ED33B5ADCE}' />
    </worksheet>
    <worksheet name='Data Detail'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='LAST' datatype='integer' name='[Calculation_2147442990582628352]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='LAST()'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Days on Market' datatype='integer' name='[Calculation_888546153548345344]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column caption='Bills Included' datatype='string' name='[bills_included]' role='dimension' type='nominal' />
            <column caption='Closest Station Mins' datatype='string' default-role='measure' default-type='quantitative' name='[closest_station_mins]' role='dimension' type='nominal' />
            <column caption='Deposit' datatype='string' name='[deposit]' role='dimension' type='nominal' />
            <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
            <column caption='Family Friendly' datatype='string' name='[family_friendly]' role='dimension' type='nominal' />
            <column caption='Fireplace' datatype='string' name='[fireplace]' role='dimension' type='nominal' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:ok]' pivot='key' type='ordinal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[bills_included]' derivation='None' name='[none:bills_included:nk]' pivot='key' type='nominal' />
            <column-instance column='[closest_station_mins]' derivation='None' name='[none:closest_station_mins:nk]' pivot='key' type='nominal' />
            <column-instance column='[deposit]' derivation='None' name='[none:deposit:nk]' pivot='key' type='nominal' />
            <column-instance column='[description]' derivation='None' name='[none:description:nk]' pivot='key' type='nominal' />
            <column-instance column='[family_friendly]' derivation='None' name='[none:family_friendly:nk]' pivot='key' type='nominal' />
            <column-instance column='[fireplace]' derivation='None' name='[none:fireplace:nk]' pivot='key' type='nominal' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
            <column-instance column='[num_bathrooms]' derivation='None' name='[none:num_bathrooms:ok]' pivot='key' type='ordinal' />
            <column-instance column='[num_bedrooms]' derivation='None' name='[none:num_bedrooms:ok]' pivot='key' type='ordinal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[pet_friendly]' derivation='None' name='[none:pet_friendly:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_id]' derivation='None' name='[none:property_id:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_link]' derivation='None' name='[none:property_link:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
            <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Pet Friendly' datatype='string' name='[pet_friendly]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Property Link' datatype='string' name='[property_link]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_888546153548345344]' derivation='Sum' name='[sum:Calculation_888546153548345344:ok]' pivot='key' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Sum' name='[sum:predicted_monthly_rent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Sum' name='[sum:rent_pcm:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_2147442990582628352]' derivation='User' name='[usr:Calculation_2147442990582628352:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_2147442990582628352:ok:1]'>
            <groupfilter function='member' level='[usr:Calculation_2147442990582628352:ok:1]' member='0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
            <single-value-per-nest-shelf-sort dimension-to-sort='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]' direction='ASC' measure-to-sort-by='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]' shelf='rows' />
          </_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_2147442990582628352:ok:1]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='31' />
            <format attr='height' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]' value='36' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='48' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]' value='244' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok]' value='80' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' value='144' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok]' value='56' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]' value='44' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]' value='52' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]' value='68' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' value='72' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]' value='false' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run italic='true' underline='true'>Tenancy Information:</run>
                <run>Ã&#10;</run>
                <run bold='true'>Deposit (Â£):&#9;</run>
                <run><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]>
]]></run>
                <run bold='true'>Minimum Tenancy (Months):&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]>

]]></run>
                <run italic='true' underline='true'>Misc Information:</run>
                <run>Ã&#10;</run>
                <run bold='true'>Postcode:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]>
]]></run>
                <run bold='true'>Pet Friendly:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]>
]]></run>
                <run bold='true'>Bills Included:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]>
]]></run>
                <run bold='true'>Family Friendly:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]>
]]></run>
                <run bold='true'>Fireplace:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]>
]]></run>
                <run bold='true'>Garden:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]>
]]></run>
                <run bold='true'>Parking:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]>
]]></run>
                <run bold='true'>Description:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]>
]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-color' value='#000000' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk] / [federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]))))))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{E82E9F1A-0918-4BB4-A8CB-804A5C293DC7}' />
    </worksheet>
    <worksheet name='Days on Market'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Days On Market' datatype='integer' name='[Calculation_768919287822987264]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_768919287822987264]' derivation='Avg' name='[avg:Calculation_768919287822987264:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='70' />
            <format attr='text-align' value='left' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:Calculation_768919287822987264:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:Calculation_768919287822987264:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bathrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{005178B9-4141-47B1-B377-99607A6BDF7B}' />
    </worksheet>
    <worksheet name='Flat Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Rent &amp; # Of Properties</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Avg' name='[avg:predicted_monthly_rent:qk]' pivot='key' type='quantitative' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[property_id]' derivation='CountD' name='[ctd:property_id:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' num-steps='6' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#00ffb7</color>
                <color>#76ecca</color>
                <color>#d9d9d9</color>
                <color>#ec907c</color>
                <color>#ff3a0e</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
            <format attr='enabled' id='hillshade_highlight_bright' value='false' />
            <format attr='enabled' id='hillshade_highlight_med' value='false' />
            <format attr='enabled' id='hillshade_shadow_faint' value='false' />
            <format attr='enabled' id='hillshade_shadow_med' value='false' />
            <format attr='enabled' id='hillshade_shadow_dark' value='false' />
            <format attr='enabled' id='hillshade_shadow_extreme' value='false' />
            <format attr='enabled' id='admin-2-boundaries-bg' value='false' />
            <format attr='enabled' id='admin-2-boundaries' value='false' />
            <format attr='enabled' id='admin-2-boundaries-dispute' value='false' />
            <format attr='enabled' id='country-label-sm' value='false' />
            <format attr='enabled' id='country-label-md' value='false' />
            <format attr='enabled' id='country-label-lg' value='false' />
            <format attr='enabled' id='admin-3-4-boundaries-bg' value='false' />
            <format attr='enabled' id='admin-3-4-boundaries' value='false' />
            <format attr='enabled' id='state-label-sm' value='false' />
            <format attr='enabled' id='state-label-md' value='false' />
            <format attr='enabled' id='state-label-lg' value='false' />
            <format attr='enabled' id='marine-label-sm-ln' value='false' />
            <format attr='enabled' id='marine-label-sm-pt' value='false' />
            <format attr='enabled' id='marine-label-md-ln' value='false' />
            <format attr='enabled' id='marine-label-md-pt' value='false' />
            <format attr='enabled' id='marine-label-lg-ln' value='false' />
            <format attr='enabled' id='marine-label-lg-pt' value='false' />
            <format attr='enabled' id='waterway-label' value='false' />
            <format attr='enabled' id='water-label-sm' value='false' />
            <format attr='enabled' id='water-label' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.25' />
            <format attr='map-style' value='streets' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' />
              <size column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Postcode:&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]>]]></run>
                <run>
Value (negative value represents underpriced flat):	</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]>]]></run>
                <run>&#10;Average Monthly Rent:</run>
                <run bold='true'><![CDATA[	Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]>]]></run>
                <run>&#10;Average Fair Value:&#9;</run>
                <run bold='true'><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]>]]></run>
                <run>Ã&#10;&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6591712236404419' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Latitude (generated)]</rows>
        <cols>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{3E9F7505-5E69-4E78-B5E0-76A5372B7081}' />
    </worksheet>
    <worksheet name='Rent By Available Date'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
              <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
              <aliases>
                <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
                <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_802133335129923585]' derivation='None' name='[none:Calculation_802133335129923585:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[available_from]' derivation='Week-Trunc' name='[twk:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]'>
            <groupfilter function='member' level='[none:Calculation_802133335129923585:ok]' member='0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' scope='rows' value='Avg Rent PCM (Â£)' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c#,##0;-#,##0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Available From Date:&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[twk:available_from:qk]>]]></run>
                <run>Ã&#10;</run>
                <run fontcolor='#787878'>Average Rent PCM:&#9;</run>
                <run bold='true'><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]>]]></run>
                <run>Ã&#10;</run>
                <run fontcolor='#898989'>Properties Available:</run>
                <run>Ã&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]</rows>
        <cols>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[twk:available_from:qk]</cols>
      </table>
      <simple-id uuid='{7172DDF7-E204-4F14-A511-AB521FD6B15C}' />
    </worksheet>
    <worksheet name='Rent By Borough'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Rent By Borough</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
              <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
              <aliases>
                <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
                <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_802133335129923585]' derivation='None' name='[none:Calculation_802133335129923585:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]'>
            <groupfilter function='member' level='[none:Calculation_802133335129923585:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c#,##0;-#,##0' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#f28e2b' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
              <color column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' />
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{0E970F95-65AC-438A-B0F3-E577B3E314AC}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='London Rental Flat Overview'>
      <style />
      <size maxheight='1500' maxwidth='1000' minheight='1500' minwidth='1000' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
        <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
          <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
          <aliases>
            <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
            <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
          </aliases>
          <members>
            <member alias='By Borough' value='&quot;Rent By Scrape Date&quot;' />
            <member alias='By Available Date' value='&quot;Rent By Available Date&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
        <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
        </column>
        <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
        </column>
        <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
        </column>
        <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
        <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
        <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
        <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;flat&quot;' value='Flat' />
            <alias key='&quot;shared&quot;' value='Shared Accom.' />
            <alias key='&quot;studio&quot;' value='Studio' />
          </aliases>
        </column>
        <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
        <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
        <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
        <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
        <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
        <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
        <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
        <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
        <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
        <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
        <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
        <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
        <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98934' id='26' param='horz' type-v2='layout-flow' w='98400' x='800' y='533'>
            <zone h='98934' id='5' param='vert' type-v2='layout-flow' w='98400' x='800' y='533'>
              <zone fixed-size='50' h='3333' id='29' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='533'>
                <zone fixed-size='274' forceUpdate='true' h='3333' id='30' is-fixed='true' type-v2='text' w='28200' x='800' y='533'>
                  <formatted-text>
                    <run bold='true' fontsize='13'>London Rental Flat Overview</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='59' layout-strategy-id='distribute-evenly' param='horz' type-v2='layout-flow' w='70200' x='29000' y='533'>
                  <zone alt-text='Image of Apartment Building' h='3334' id='61' is-scaled='1' param='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate/images/apartment.png' type-v2='bitmap' w='14100' x='29000' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='27' mode='checkdropdown' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='89' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='94' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='28' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' show-null-ctrls='false' show-slider='false' type-v2='filter' values='relevant' w='14000' x='85200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
              <zone h='3333' id='58' layout-strategy-id='distribute-evenly' param='horz' type-v2='layout-flow' w='98400' x='800' y='3866'>
                <zone h='3333' id='51' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' show-null-ctrls='false' show-reldate-picker='false' show-slider='false' type-v2='filter' values='relevant' w='14100' x='800' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='52' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='14900' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='57' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='29000' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='53' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='54' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='56' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='55' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='85200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='2' h='666' id='24' is-fixed='true' type-v2='empty' w='98400' x='800' y='7199'>
                <zone-style>
                  <format attr='border-color' value='#666666' />
                  <format attr='border-style' value='solid' />
                  <format attr='border-width' value='2' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone fixed-size='12' h='1333' id='23' is-fixed='true' type-v2='empty' w='98400' x='800' y='7865'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='90269' id='6' type-v2='layout-basic' w='98400' x='800' y='9198'>
                <zone h='90269' id='8' param='vert' type-v2='layout-flow' w='98400' x='800' y='9198'>
                  <zone fixed-size='400' h='26667' id='49' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='9198'>
                    <zone h='26667' id='81' param='vert' type-v2='layout-flow' w='71400' x='800' y='9198'>
                      <zone h='1800' id='82' type-v2='text' w='71400' x='800' y='9198'>
                        <formatted-text>
                          <run bold='true' fontsize='12'>Average Rent &amp; # Of Listings</run>
                        </formatted-text>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='2466' id='80' name='Flat Map' pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-title='false' type-v2='color' w='71400' x='800' y='10998'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone fixed-size='692' h='22401' id='36' is-fixed='true' name='Flat Map' show-title='false' w='71400' x='800' y='13464'>
                        <layout-cache minheight='201' minwidth='201' type-h='scalable' type-w='scalable' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                    </zone>
                    <zone fixed-size='12' h='26667' id='50' is-fixed='true' type-v2='empty' w='2000' x='72200' y='9198'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone fixed-size='250' h='26667' id='48' is-fixed='true' param='vert' type-v2='layout-flow' w='25000' x='74200' y='9198'>
                      <zone h='4000' id='13' param='vert' type-v2='layout-flow' w='25000' x='74200' y='9198'>
                        <zone forceUpdate='true' h='1800' id='14' type-v2='text' w='25000' x='74200' y='9198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average Rent:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='15' name='Average Rent' show-title='false' w='25000' x='74200' y='10998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='100' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='12' param='vert' type-v2='layout-flow' w='25000' x='74200' y='13198'>
                        <zone h='1800' id='11' type-v2='text' w='25000' x='74200' y='13198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'># Properties:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='10' name='# Properties' show-title='false' w='25000' x='74200' y='14998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='60' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='91' param='vert' type-v2='layout-flow' w='25000' x='74200' y='17198'>
                        <zone forceUpdate='true' h='1800' id='92' type-v2='text' w='25000' x='74200' y='17198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average Days On Market:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='93' name='Days on Market' show-title='false' w='25000' x='74200' y='18998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='16' param='vert' type-v2='layout-flow' w='25000' x='74200' y='21198'>
                        <zone forceUpdate='true' h='1800' id='17' type-v2='text' w='25000' x='74200' y='21198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average # Beds:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='18' name='Average Beds' show-title='false' w='25000' x='74200' y='22998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='89' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='19' param='vert' type-v2='layout-flow' w='25000' x='74200' y='25198'>
                        <zone forceUpdate='true' h='1800' id='20' type-v2='text' w='25000' x='74200' y='25198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average # Baths:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='21' name='Average Baths' show-title='false' w='25000' x='74200' y='26998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                    </zone>
                  </zone>
                  <zone fixed-size='12' h='1333' id='31' is-fixed='true' type-v2='empty' w='98400' x='800' y='35865'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone fixed-size='450' h='30000' id='35' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='37198'>
                    <zone fixed-size='550' h='30000' id='32' is-fixed='true' param='vert' type-v2='layout-flow' w='98400' x='800' y='37198'>
                      <zone forceUpdate='true' h='1800' id='37' type-v2='text' w='98400' x='800' y='37198'>
                        <formatted-text>
                          <run bold='true' fontsize='12'>Average Rent (Â£) PCM &lt;</run>
                          <run bold='true' fontsize='12'>[Parameters].[Parameter 1]</run>
                          <run bold='true' fontsize='12'>&gt;</run>
                        </formatted-text>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='3333' id='38' mode='list' param='[Parameters].[Parameter 1]' show-title='false' type-v2='paramctrl' w='98400' x='800' y='38998'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone fixed-size='2' h='666' id='39' is-fixed='true' type-v2='empty' w='98400' x='800' y='42331'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='24134' id='33' name='Rent By Borough' show-title='false' w='98400' x='800' y='42997'>
                        <layout-cache cell-count-h='1' type-h='cell' type-w='cell' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='67' id='34' name='Rent By Available Date' show-title='false' w='98400' x='800' y='67131'>
                        <layout-cache has-max-size-h='true' maxheight='1' minheight='1' minwidth='170' type-h='scalable' type-w='scalable' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                    </zone>
                  </zone>
                  <zone fixed-size='12' h='1333' id='47' is-fixed='true' type-v2='empty' w='98400' x='800' y='67198'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone fixed-size='12' h='1333' id='41' is-fixed='true' type-v2='empty' w='98400' x='800' y='68531'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='29603' id='42' name='Data Detail' w='98400' x='800' y='69864'>
                    <layout-cache fixed-size-h='3899' type-h='fixed' type-w='fixed' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='2750' minheight='2750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='102' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98934' id='101' param='vert' type-v2='layout-flow' w='98400' x='800' y='533'>
                <zone fixed-size='274' forceUpdate='true' h='3333' id='30' type-v2='text' w='28200' x='800' y='533'>
                  <formatted-text>
                    <run bold='true' fontsize='13'>London Rental Flat Overview</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone alt-text='Image of Apartment Building' fixed-size='42' h='3334' id='61' is-fixed='true' is-scaled='1' param='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate/images/apartment.png' type-v2='bitmap' w='14100' x='29000' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='1800' id='82' type-v2='text' w='71400' x='800' y='9198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent &amp; # Of Listings</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='14' type-v2='text' w='25000' x='74200' y='9198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='89' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='94' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='51' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' show-null-ctrls='false' show-reldate-picker='false' show-slider='false' type-v2='filter' values='relevant' w='14100' x='800' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='52' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='14900' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='57' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='29000' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='53' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='54' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='56' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='55' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='85200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='15' is-fixed='true' name='Average Rent' show-title='false' w='25000' x='74200' y='10998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='100' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='1800' id='11' type-v2='text' w='25000' x='74200' y='13198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'># Properties:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='22401' id='36' is-fixed='true' name='Flat Map' show-title='false' w='71400' x='800' y='13464'>
                  <layout-cache minheight='201' minwidth='201' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2466' id='80' name='Flat Map' pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-title='false' type-v2='color' w='71400' x='800' y='10998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='27' mode='checkdropdown' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='28' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' show-null-ctrls='false' show-slider='false' type-v2='filter' values='relevant' w='14000' x='85200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='10' is-fixed='true' name='# Properties' show-title='false' w='25000' x='74200' y='14998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='60' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='92' type-v2='text' w='25000' x='74200' y='17198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Days On Market:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='93' is-fixed='true' name='Days on Market' show-title='false' w='25000' x='74200' y='18998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='17' type-v2='text' w='25000' x='74200' y='21198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average # Beds:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='18' is-fixed='true' name='Average Beds' show-title='false' w='25000' x='74200' y='22998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='89' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='20' type-v2='text' w='25000' x='74200' y='25198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average # Baths:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='21' is-fixed='true' name='Average Baths' show-title='false' w='25000' x='74200' y='26998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='37' type-v2='text' w='98400' x='800' y='37198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent (Â£) PCM &lt;</run>
                    <run bold='true' fontsize='12'>[Parameters].[Parameter 1]</run>
                    <run bold='true' fontsize='12'>&gt;</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='38' mode='list' param='[Parameters].[Parameter 1]' show-title='false' type-v2='paramctrl' w='98400' x='800' y='38998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='24134' id='33' is-fixed='true' name='Rent By Borough' show-title='false' w='98400' x='800' y='42997'>
                  <layout-cache cell-count-h='1' type-h='cell' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='67' id='34' is-fixed='true' name='Rent By Available Date' show-title='false' w='98400' x='800' y='67131'>
                  <layout-cache has-max-size-h='true' maxheight='1' minheight='1' minwidth='170' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='29603' id='42' is-fixed='true' name='Data Detail' w='98400' x='800' y='69864'>
                  <layout-cache fixed-size-h='3899' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B9D33C1C-25C4-4B1A-97F4-F7207E5F080A}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' maximized='true' name='London Rental Flat Overview'>
      <viewpoints>
        <viewpoint name='# Properties' />
        <viewpoint name='Average Baths' />
        <viewpoint name='Average Beds' />
        <viewpoint name='Average Rent' />
        <viewpoint name='Data Detail' />
        <viewpoint name='Days on Market' />
        <viewpoint name='Flat Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Rent By Available Date'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Rent By Borough'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{7A761B9E-5006-4E78-A9D4-F1FDA3324CBA}' />
    </window>
    <window class='worksheet' name='# Scraped Sanity' tab-color='#6e597f'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6FF067E0-E058-4F5B-B1D3-1D434D256116}' />
    </window>
    <window class='worksheet' hidden='true' name='# Properties' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DCE1320E-D9F5-4029-AFEA-7435A9875862}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Baths' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{647E7764-7A08-47D4-9784-B801E4DA5298}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Beds' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D6A4D944-709A-4EE0-8AF3-CD9366A41873}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Rent' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FDC41464-F2D0-4616-8812-9B3E00A8CDFA}' />
    </window>
    <window class='worksheet' hidden='true' name='Data Detail' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_2147442990582628352:ok:1]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:available_from:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{73A3DC87-29BA-438F-8277-8EFFF35EC597}' />
    </window>
    <window class='worksheet' hidden='true' name='Days on Market' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FF53636D-43D3-4788-B034-CC58F9BEA8E0}' />
    </window>
    <window class='worksheet' hidden='true' name='Flat Map' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[med:num_bedrooms:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[tmn:available_from:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E264242F-CCE5-4901-8540-A5282A277032}' />
    </window>
    <window class='worksheet' hidden='true' name='Rent By Available Date' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:available_from:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{37947904-12FE-4351-8DCE-D1DF70ADA9FC}' />
    </window>
    <window class='worksheet' hidden='true' name='Rent By Borough' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1B714B8D-1279-44D1-8D22-7E415911D9B3}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='# Scraped Sanity' width='384'>
      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
      kBDJ6MnJyezbtw+j0SiJvWm1Wnbu3IkQgtatWwPg5eV1w0XokydPcuTIkZvyudy+fXtiYmL4
      8MMPadasmSSYptFo2L17N1VVVchkMi5dukRkZCQqlYp7772X+Pj4Bi9LQyOXy+nYsSNz585l
      7969PP3008hkMkpLS9m/fz/p6el07doVqNVaj4+P59lnn/3V/A4fPsypU6ckL9Xy8nKcnZ1R
      qVR4eXnVezH+G/Hx8bmht/OPP/7IyZMnb3jOvn378PLyon379lKak5MTPj4+/3pv3z+CTCbD
      39//V1V2lUolXbt2Zfr06ezatUuKS+Lt7V3vCyosLIxTp05RXl7Opk2b+O9//4uPj8+fKpO9
      A/gN6rRidDod/fv3l9Li4uLYs2cPEyZMQC6XExYWRlRUFFVVVbzzzjuSyqHZbMZoNFJVVUVR
      UdGvXqdnz56MHDmSmJgYVq1a1eD1yMzMlKQQ0tLSqKysJDAwkHnz5iGEYOLEiVgsFoxGo9Q4
      lUqlNJq7nTGZTBQUFBAWFkZWVhapqalA7ai0uroak8lEZmYmFRUVLFmyhN69e0vqqEajsV5e
      zz//PAMGDODAgQN89dVXyGQynnvuOVasWMGSJUtITk6+I19ozz77LAMHDuTQoUNs2rSp3rH0
      9HR2795N165dKS8vJzc3909Fpvq3YTAYWLduHStWrGDFihVER0f/n+dYLBa0Wi3h4eFkZmZK
      wah+Sbdu3ejVqxft2rXDbDYTHR3Nhg0b7BHBGpro6GjOnTvH9OnTpR44ISGBVatWMX/+fClG
      gKOjIxERETRq1IiDBw9SWlqKj48PERERREREUFVVxZEjR6SviF/i7u5OmzZtcHR0lKZkGgoh
      BDt27ODFF1+kY8eOTJ06ldOnT9O7d2/Cw8MlUa+ioiJCQkI4e/YsQgjy8vIICQlp0LLcDFJS
      UjAYDEyYMIFu3bqxaNEievfuTXBwMC+88AJqtZpDhw4RERFBZGQkcXFxJCYmolKpKCkpkb6G
      HBwc8PLywsvLi/79+/PFF18wdOhQHn74YVq1aoXFYiExMfE6ffc7gTq7WCwW1q1bx/Dhw7Fa
      rchkMgwGA3fffTfff/89qampuLq68sgjj9xRUdNuhEqlonv37tJg8Fqhwl9SZ0uNRkNFRQVv
      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
      u3Dh4ubwf3qB8YmtUnepAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='London Rental Flat Overview' width='384'>
      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
      nQh2ItnZ2fj9fnr06EFaWhrPPPMMU6ZMoa6ujkmTJpGens727dsZN24cf//736mtrWXs2LH8
      4Q9/4OWXX6ayspKDBw/y5ptv8sorr+B0OomKiuLtt9/m6NGjPP/88xiNRoxGI1dddRW33XYb
      //znP9m1axdRUVG88cYbzRq74cOHk5qayt13343H46GiooIXXniB8vJyLrnkEv7v//6P6dOn
      s3fvXkpLS/F4PEyfPp0PP/yQtWvX8sgjj/Duu+82STM2NpacnBxMJhMJCQlN7tXW1qoylZeX
      U1lZyTfffMPIkSMBOHLkCGlpabz11lsMHTqUm2++mTFjxrBw4ULWrFmDJEncd999fP7556fU
      9dq1azEYDMTHx/PUU09RU1NDUlISzz33HO+88w6iKCIIAkajkQ0bNnDDDTfw2GOPYbVa2bFj
      B4mJibz//vts376df/zjH8TExODxeLj//vtJTU3lmWeeIRAIMHDgQJ577rnTPXoNDY0LmNa0
      3acdASxZsoTrr7+e66+/nhUrVuD1ehkyZAgrV66kqqqKRYsWMXToUN5++206dOjAn/70J2bM
      mIHH48Fut1NTU8P06dPp3LmzagT27t1Lbm4uH374IQkJCXz++ef4/X7q6urYsGED33zzDa+9
      9ho1NTV8++23zWT65JNPePTRR7nnnnuIi4tj1qxZ+P1+Xn31VRYvXkxxcTFOp5PCwkJee+01
      XC4Xu3bt4oYbbkCv1zdr/L/++mtycnI4ePAgjz32GKtXr2bOnDnqfZvNxuOPP86oUaO46KKL
      +Ne//qU2/tBgAACSk5MBMBqNJCYmUlxczP33309ISAhz585FFE+t7srKStxuN7m5uezZs4eH
      H36YV199lejoaC699FJGjBjBrbfeisvlorKyUo3j8/l4+eWX2blzJxUVFbz11lsMHz6c6dOn
      U1VVhdvtZufOnRw9epRnn32Wp59++nSPXUND4wKnNW33KUcAXq+XVatWYTKZEASB2tpa1q9f
      z8iRI4mMjGT27NkUFBQwcOBA3n77bfx+P99//z033HADPp8PgH79+tG5c2f27dvHU089xfDh
      wxEEAUVRqKiooHfv3oiiiNlsBhoatEAgwOLFixk4cCDR0dHN5LruuutYv349FRUVapzq6mqW
      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
      5JPRC9d//dd/8fd///c88sgjnDt3jueee46VK1fy/e9/H7/fT2NjI08//TTPPvss3/ve93jv
      vffQdZ2XXnqJp556ihdeeAGP5+JJph944AF++MMfEg6HCQaDDA4O8td//dc8+eST/PznPwfg
      1Vdf5Uc/+hHf/va3efzxx+nu7ua1115jz549/O3f/u2E/W3ZsoWSkhKKi4sxDIOmpiaKi4t5
      +OGHycvLY86cOeTk5FBeXn5RWsrKynjxxReRJIm+vj7++Mc/8p3vfIcf//jHPPPMM/zHf/wH
      ABaLBb/fz6lTpzh06NBlL9QvvPAC6enpOJ1O3njjjejcxUePHuW//uu/Llr//vvvZ/ny5Tgc
      DgA++ugjnnrqKZ588klef/31i85FV1cXv/jFL3jyySd5+umnOXjwIACPP/44Z86c4dixY3z7
      298GYNu2bTz66KP88Ic/5Jvf/CZnzpwBIkHz+eef56GHHuLs2bOTHosgCF9cnxkA1q9fz5NP
      PsmTTz7J1q1bCYVCLF++nG3btjE8PMxHH33E3Xffze9+9zuys7P5yU9+wuuvv04wGGR0dJSx
      sTFeffVVCgsL+fWvf83Pf/5zqquraWpq4rXXXiMvL4/33nsPTdPwer3s27ePXbt28fLLLzM2
      Nsbu3bsvStPbb7/N3/3d3/H888+TlZXFm2++iaZp/OIXv2DdunV0dnbidrtpb2/n5Zdfxufz
      UVlZyVNPPYXFYuH//b//N2F/NTU1lJSUANDR0cGuXbs4c+bMhM8uKSmhpqbmorRUVFTw3HPP
      UVRUxKJFixgYGGDWrFkXracoCvfffz87duxg+/btfPWrX500z5944glUVeXxxx9n+fLlHD16
      lKamJt59910efvjhi9b/zW9+w+uvv84PfvADxsbGePnll/nHf/xHXn75Zf7whz/Q3Nw84VzU
      1dWxefNm3nzzTb71rW/x0ksvYZomfX19hMNhQqEQ/f39mKbJK6+8wnPPPccvf/lLOjs7CYcj
      c0C7XC7++Z//mZSUFI4cOTLpsQiC8MV12QAQCoUoLy/n7bff5o033sDj8bB3716WLVtGamoq
      b731Fm1tbSxdupShoSE6Ozs5evQoTz31VPRCsWjRIgoLC2lububZZ59l06ZNSJKEaZoMDg6S
      m5uLLMvRu9ehoSF0XWfdunUsXbr0kmXaTzzxBDk5OQwODka3GRkZYdOmTdE7V4A5c+ZQVFRE
      XFwcxvjE2pe681YUJbq8oKCAFStW8OCDD/K1r30tuo5hGCiKctG2JSUl/PKXv+S9994jJSWF
      5ORkmpubL5mfjzzyCLt376axsZFFixZNmu/bt2+nqKiIn/3sZ9Fj+N3vfsfQ0BDLli27aP0f
      //jH/OIXv+BnP/sZVVVV6LpOfn5+tH5kYGAA+ORcDA8Pk5CQQHJyMvn5+YyNjUXPF4CuRybP
      DofDuFwucnNzcTqdEz4zJyeHuXPnkpycHM07QRBuL5cNAHv27GHZsmVs3bqVLVu28I1vfIP1
      69ejKAqPPfYY77//Pt/4xjeQZZnly5fjcrlYtGgRJSUlF11oq6ursVqtzJw5E9M0aW1tpays
      jO3bt/Piiy9SW1uLJEnccccdmKZJSkoKS5YswW63X5Su5ORkfvrTn7J161Z27doV/ezS0lLm
      zp2LJEmXPJ7Y2Fh0XY8WZZ23cOFCamtrAaivr2fnzp1omsYf//jHaFl3bW0tCxcuvGif6enp
      FBcXR4PDd7/7Xd577z1ef/11du/eza9//WtCoRAAy5YtwzAMVqxYMWkaAdasWUNHR0f0wvr4
      449z8OBBvvvd715yuxMnTrBv3z5M0yQ7O5vMzExWrVrF+++/T1xcXLRy+rylS5cyOjrKunXr
      2LRpEwsXLsRutxMbG8uaNWuidRN2u51Zs2bx2muv8eMf/xjgsukWBOH2orx0vjD/Ejo7O7n/
      /vtJTU0FIC8vj2AwyIIFC8jPzyc+Pp5vfvObxMbGsnjxYhISEqitrcU0TRYsWIDVaqWkpISc
      nBwKCgrw+XzExcXxla98BYDvfOc7JCQkMGPGDJqamli4cCH33Xcfy5cvp6GhgYGBAWbOnMm0
      adMmpKu0tJTS0lKysrJwuVw8/fTT5OXlUVNTQzAYZP78+cTExJCXl0dRURGSJFFWVsbs2bNJ
      Skqis7Nzwp10QUEB7777LjNnzsTpdBITE0N8fDySJJGfn09rayv79+/nH/7hHy56CiguLiYv
      Ly/6+nze1NXV0dXVRW5uLvPnz8dqtbJ06VJWrlwZbd2TlpbG3LlzJ+wvNjYWTdMoKyvjb/7m
      b4iJiUHXdY4cOcK///u/X/IpxG63k5yczAsvvMC8efNYsWIFLS0tqKrKP/3TPzF9+nSA6LlI
      SUnhjjvuoKqqipycHH7yk5/gcDiYMWMGbrebp59+mvz8fBYtWsSyZcuQZZmlS5eye/dunn32
      WdLS0sjIyIgGllmzZpGVlfWZXzZBEL5YJPNmNBuZxM6dO/ntb3+LLMsoisIf/vCHiy72N8vA
      wACNjY3cc889Fy3bv38/c+fOjQbCm8k0TV544QXuu+8+vve97930z//lL3/JyZMnGRkZoays
      jFdeeQVZFt1HBOHL4JYGAACv10sgECA1NVVcWC7BNE2CwSB2u/2W5I9pmoyMjKAoCklJSTf9
      8wVBuHFueQAQBEEQbg1xyy0IgjBFiQAgCIIwRYkAIAiCMEV95mBwFRUVnDlzBkmScDgcPPXU
      UyQmJt6MtAmCIAg30GUrgVetWkVBQUG0zbzX6+XNN9/kmWeeISMjA4C6ujpqa2spLi5m/vz5
      F+0jEAiwdetWEhMTue+++7DZbJ870VVVVciyTFlZ2efelyAIwlQ1aRFQU1MTiYmJZGRk8L/+
      1//innvu4e233+YHP/gBa9euja53+PBhEhMT+dWvfkVTUxOhUIhgMEhvby8QCRpVVVV0dHSw
      bds2VFXlyJEj9PT0AJEROs+cOYNpmpw4cYLW1laAS/5fU1NDW1sbg4ODtLe3c/ToUTEMgSAI
      wjWaNAAcPHiQFStW8Lvf/Y6WlhZCoRBvvPEGzc3NKIoyYaiH/fv3k5+fT1NTE7t27WLz5s30
      9fVFl7e3t1NZWcldd93FK6+8gqZp/OY3v2F4eJh/+Zd/we128/rrr9Pf38/7779PQ0NDdBTL
      119/nc7OTl5//XW6u7t55513ANi7dy8VFRVUVFTcqLwRBEH4Ups0AJimiSRJ0YHBztN1PTqY
      23lPP/00oVCIkpIS9u7dy+nTpyeMmzN37ly+9a1vsWXLFoaHh7n33nuZN28enZ2dzJ49m3vv
      vZfGxkYeffRRli9fTlNTU3RbTdNobW1l6dKl3H333dH3H3/8cRYvXkwgELguGSEIgjDVTBoA
      li1bxoEDB/jhD39IRkYGkiTxzDPPMHv2bFRVndAr9cMPP2RsbIzk5GTS09OZN2/ehEHDqqqq
      KC8vJyMjg8WLF/Pb3/6W6urqCcMmP/zww7zyyivs2LGDpUuXoqoqL7/8Mm63m4ULF3Lo0CF+
      //vfX3IsHEEQBOHqXbYS+K233mLJkiWUlpYSDoeRJIk//elPPPbYYxdNj3jez3/+c370ox9d
      tqVQKBTCZrNdNLJkOBzGYrEgyzK6rmOaJhaLBU3T2Lp1KwMDA2RkZPDEE09c4+EKgiAI5102
      AJimya5du2hubkaSJBRFYeXKlZcdsG1gYOC6D+hmmiYdHR0A120OYEEQhKnuM8cCOn/xdbvd
      FBUVERMTc7PSJgiCINxAl+0J3N3dzW9+8xtqamrweDysXr2atWvX3vCJx883Eb3ce5daRxAE
      QbhykwaAUCjE2rVr+dGPfsQ3vvEN7r77bv7qr/6KWbNmsXXr1uh6q1at4qWXXuJf//VfJ22T
      PzY2xjPPPDNh2sFLOXDgAL29vRfN2Qtc9N6l1jnv+9//Pr/61a/4t3/7t2h/hPM8Hs+kUzYK
      giBMJZMOBbF7925Wrlx5UaubefPmceDAgejrQCDAypUreffdd9m4cSNlZWWoqsrw8HB0cpXN
      mzdTUlLCvn37iI+Px+l0kpGRwalTpxgdHaWxsZHvfe97+P1+NE0DwO/388YbbzAwMMC///u/
      o2kav/71r/F6vfz0pz8FIhfz//mf/wEi8+Keb5mUkpLCT37yk2h/gkcffZRDhw4xbdo0YmJi
      KC8v56c//Sk7duxgeHiY559/PtqzWRAEYaqY9Amgq6tr0gpXi8UyoX/Ali1bcDgczJkzhw0b
      NrBhwwbmzZsHROoQDh48yNe//nU2bNjAnDlz2LRpE5s2bWLevHksWLAAh8NBTU0N/f39+P1+
      AJxOJ/PmzWNoaIihoSEAfvCDH5CamkpDQwMAO3bsYGhoiPr6elpaWi5KZ25uLi6Xi6KiIvLy
      8jh+/Dhz5szhrrvuwjAMDh06RDAYZO/evdeWe4IgCLexSQNAZmYm3d3dl1ymadqEJ4PHHnsM
      q9UKROoNdF2PNgM9ffo0M2fOBCKBw+fzoWkanZ2dJCcn89Zbb1FWVnZRh7OKigra2trIycmJ
      LguHw4yOjpKcnAxE7vQXLFjAb3/72wnByjAMvF4vH3zwAffeey+vvPIKixYtQpIkZFnG5/MR
      Hx9PdnY2L774IitXrrzqjBMEQbjdTTopfG5uLqtWreKOO+6Y0F6/qakJn88XnRAc4MSJE8yZ
      M4dly5bR1tbGihUryMzMBKCjo4Ovfe1rzJw5k+LiYnw+H2VlZcyaNYvc3Fz6+vpwOp2oqkpp
      aSkZGRnExMSwcOFCTp06xcyZM1FVlaysLI4fP86sWbNYsGABAA888ACNjY0cOnSIkpISnE4n
      EJnMvqamhtLSUh566CESExOpqKhgxowZzJ07l8bGRgoKCsjMzGTz5s2kpKSQlpZ2o/JYEATh
      C+myzUBbWlrYtGkTixcvJikpibNnz2IYBn/xF39xUSeu8959912++93vTrpcEARB+GL4zH4A
      hmFw7tw5XC4Xs2fPJiUl5WalTRAEQbiBxKTwgiAIU5SYElIQBGGKEgFAEARhihIBQBAEYYoS
      AUAQBGGKEgFAEARhihIBQBAEYYoSAUAQBGGKEgFAEARhihIBQBAEYYoSAUAQBGGKEgFAEARh
      ihIBQBAEYYoSAUAQBGGKmnRO4PM84SCaeenJ3oWLWWUFwzTQxSCr152my/R5Arc6GbedabEO
      fKp6q5PxhSbLEmlOGwFdu9VJuSKKJOENGowEwp9rP58ZABpcA4yFxY/uSqU74vBrYXza5zsx
      wsXcHjt/Ot18q5Nx23l2XiFnhgZvdTK+0GKsFlbOyqLFPXqrk3JFYixWKjuC7Gi69LS9V0oU
      AQmCIExRIgAIgiBMUTc9AIgJyARBEL4YrjoAdDW1cHjrTtpq6/F7vBzb8fGk6xqGwf71W6Kv
      R/oHWffHP9HV2AJEgkFjZfU1JPv2ous6lfsr2P3ndZw7fpraYycZ6Oq55LqXW/ZZPGMuKrbs
      4OyRE+ja56vMMk3zCx+sjaAf3+kK/HWVmJ/zeM+72uMOdbXiqzxMsL1p0u08x/ZG/9a9Lvy1
      p9BcI2ijly+Xv1HnIORy4enpwtB1BmrOADDa0nhVnz3S3ICro+26p+2LpKWqGm288ryzrgE1
      dOX1ese27ohue6lloUCAY1vLr0s6z9PHhgidOUK4uQbTuLKGO59ZCfxpDaerSc+Zzta3VvG/
      //FvGejqIeDz01pTR1pWJunZ0xno6mG4t58Z8+bQ09pBKBDAPTJGdcUxElNTSEpPpbetA9Mw
      CQVD6LpOy9lzWG1W8mfPpK+jCzUUIm16Ju11DUzLySZ1esZVZ8gXxd61m4hPTuTuxx7BPTJG
      U9VZDN3ANTxCUVkpXpebnpZ2ispKGR0YIjYhgbGhYbqb2yiePxdd1+ioa6SgdDYArbV1pGRM
      IyM3e8LnjA0MMTY4xFBPHza7jcTUFELBIBm52fS0diArMnkzixnq6UNTVXRNx2K1ooXDZBbk
      Mtjdi3tklJziGfS0tlN/sooV315J0B9gsKuHwnmzCQeCBLw+xoaGKSorRbFc9VfoujH8XtTh
      fmRHDAEkrGmZaK5h7HnFaKODWNOz0N2jyHYn4d4OlPgkwMSSmoE60IN1Whba6CCSrKAO9WHP
      KSTU2YI62EvcknvRRocBsGZkow33YwQD2LLykGQlmoZgUw2OolK8x/ehJCShu0aQHU6sGTno
      rhF09yjqQDemaaL2daF7RtFGh7Bl5mIaOupQP5gGpqFjnZYd3UZ2xmIE/QSbaom7awWmqkbS
      mDsDU1MxAn509yj2vGIkRZkkhy5NtlroOLiXnOVfoX79n0mfM4/+M6dxJKfg6e4iqbCIwZoz
      hH1e8u65H//QIHo4TGJ+Id6+Xgw1TGB4CFtcPHo4zEhzA7HTMohJTSfoGsPT3UlSwQysMbHX
      83TfdEPdPZimSUHZXCo/3s9Xs6fTWn2W9NwcYuLjCPoDOGJjCHi9qMEQielphAJBZFlmoLOT
      /vYOZFkmoyCfzrp6QCJvziwGOzsxNJ2Bjs7rml59oBskCb27Fclmx5KZh9bTijItB8kRg97f
      BZjIMfFIzhi07rZrKwKqOXKS9JzpWKyRH7/f48ERG8PWN99noLOb8nf/TGxCPKZpomsam/7n
      HRSLBVmWsdnt9HV0sf3t1cgWhbOHj6OFI5Fy37ot+D1etr+1isGuHir3V9DX3oUkS9ctk26F
      jvomFj9wL87Y2OhFu/5UFdWHjtJR18iWN94l4PVycNO26DZb//Q+ikXBNE02v/Eemqaxe/U6
      Al4fdoeDLX96/5Kf1dXcynBfPznFM9i16iN6Wto5tfcQXU0tNFXVUHPkBBVbdlB/qort766m
      ubqGnas/wjU0wob/fotQIMiG/34L0zDQ1HDkfLyzGovVwsbX3qG5upx8W14AACAASURBVJZd
      qz+isbKapqqam5J/l6MO9aH2d2HLLsAI+tFdowRqTuI7VYHhc+M5sptQeyOhjiaQZXxVR9FG
      BhlZ/ybayCCBmlMYAR+mGsZ78iAYBug64b5OAg1n8J85iu4awfXxJnT3KHDxd1Ed6gPTQFIs
      SLKC++AOjKAf9/6tAJjhEGpvB4H6KoyAHzDRRgdRh/rwHN5FqKMZz8FyjIAP197NgIT74HYw
      TUxNxVTDuPduQrbbce1aR7irFc+hcsJdrQRb6q46z6wxsagBP2OtTSTmFdJfXUl8di5hrxck
      iZZd2zA0DUwT30A/XUcO0l91Cm9vN03bNuLt7wUpkg91Gz5Etlhp2raJ4NgodR+twuKMoXbN
      B5/jrH4xlC6/i9rDR+lraSWzMJ+Ax4vN6WDP+6sZ6uml/tgJRvsHOHf4GGoozI633mP/n9di
      sVlRgyG66hvZ/+E6Qn4/uqZzetfHuAaHbmia9cEeDJ8HJTmdwOFyMAyCh3egdTWjttSiD3QT
      bqwmUFEOpnFtAWD51x9CDYUY7hsAoKelneaqGjRVZai3j6KyUvJnl2B32Bns6iEcCpOUnkp8
      ShLpOVkoisKcOxYxLScLANfwCLXHTqKFw2iqiiPWyZIH72PBfXczOjhE7bFT1y+HbgGb3YbP
      7QE+qQNZ+tX7yZpRgM/jYbh3gLHBYaYX5EW3uffJb3Bk+24Gu3oY7uljsKuXnJLInXlT1Vm0
      cPiSj+klC+YxZ+kiao6cwO50smTFVxjp62fOHYuYtXg+/Z3dKBaFJSu+Qtr0TBbdfw8JyUkY
      hkFuSRFld9+JpqrEJSWSlJaGGgoxLSeLovlzCXi9mKbJwvvvIW9WCeFQ6OZl4iTs2QU4S5cQ
      qD1JsKkG3TOGqak4Zy/EXbELJSEZe+EsAALnTmPPnYHn0A5i5t+Fp2IH9oKZBFvOoY0OYmoq
      ckwcSlIKhteN7nGhJKWALKPExuOcvRAk6aI8V+ISSH7iOYyAj2DLOUw1hO4eQ0lKxZZbhGRz
      oA72Yc8rwp5bxIVBRLJaiV24DDk2Ht3jwpKSji2nEMlijaQlPglTU1FS0rHnzMAYL1Zwzl6A
      LTsf8xqbG8ekpjPa3EjGgsW07NxCaslshutr8Q30YYTD2OLiiUmbRnBslJDHjS0+Adlqw2K3
      k33HcmSLBRMT1ecjpXgmcZlZePt6sMbFk1QwA9M0botixMuJTUrENE1O7dzD7DuX0tPUQmdd
      Q/SGFUBXI0WPGYX5uIeGiUtOxuZwYHPYWfzQChJSUnAPjdBw4hShQGDSYqHrRU5KA0MDqx1j
      ZBB9uB9LZi7G6CCWnBkoGbkA0WVXHQBkRebItl0E/QGccbEoisJgdy8+jwdN1UhOT6Ohspry
      9z7ENTJKdnEhpXctYdfqdciyjCxLSJKEJEc+WlEU3MOjuIdHUaxWuppakJXIk0VXYwux8fF4
      Xe7rmEU3370rv866P/6JHe+vYf/6LciyjCRLyIqMMy6OGfPmEAoG0cJqdFlHfSMxcXGEQyHm
      3LkEv8eLGg4z3NeP1+XGxKSvvZM1v3vtkw+SJBorz9JQWU1ieiqyJVI0MG/5nXy8ZiOHNu+g
      9M7FyONFBsr4/+dft52rZ+ubHzBj7hxiE+Jprq7FYrMy2j/ItrdWUVA6C1lRkCUZSZaj5/DW
      kQh1txFsOouSmII63A+GgTrUjz23kHBXKzFzFqEO9iFZrBhBP7acGWhjQ8QuWIY2MoBtei7q
      YB+mpqGNDCI7Ywk21WJJzxq/A4/cCTOeR2pvB77Kw58kQZaxZmQj2+wYXhe6141ktWEEfGhD
      /bj3bsLUVGw5BfgqD+M59jGSJIMkRf4fz0NJVrCkpGP4vbj2bsLUdeSYOEJdLSBJGF43rgPb
      sWVmR7aRLvh3DVJKZmGNjSOpYAayxYI9MQlvbw9aMEBgbBR7QiK9p48Tn5WNrCgYmopp6NHi
      JkmWkSSZlOKZNG5dj2+gj+QZxUiyRHP5ZmLTM/D2dtO+b9fnO8W3kCRJzLnrDoI+P/EpyQx1
      9xDweAkHg2CaNJ2q4tjWcmRZpnLPXu567FECHk+k6OeC35bf48E9NIzFaqWnuSWyTAJFuc7F
      p5KMkpiCbf5yQsd2Y5u5ANPvxdRULPmzCJ87SfjMYSRZwjpzPmbAh2R+Rog+OdjxmR3Bzhf1
      SJKMrES+kJHy5Ss7wPPbKxYLhm6gjF+4TNNEU1UsViuSdHsUA03WEcwwjEjQjI255LGoYRWL
      1RJddj5PLFYrAFpYRRnPT13TIhdfE47v+phljz70menSNR1J+uRi/2mu4REObSrnke9++5PP
      VNXIl1RiQlpulc/qCGbqOsgSGCamruH6eCNJj3wbSZIwNRUUyyXzPlphZpqRi6uuwfkfp64j
      XVDPoY0No40O4Rh/qrhoX5oGSuTcIEX2eb7OIJI++bLfZd/ZE5hqCCMYJGH5V8f3p0R2pWtI
      lqs/B1faEcw0InftmCayoqBrGvL4sRuahjLJ+Tc0NVL8Nf50dH7dkNvFaHMjmYuWXnWab7Yr
      6QgWOTYdxn9H569ZV3Jt0lT1ouvb50rvFXYEM3UNZAUz6ENrq0cb6MFWUoYlqyDyfboeAUD4
      xO3aE9jQdQI+P7EJ8bc6KZO6mp7ApqZhamFkR8wNTtX1pXtcGGoIS3L6dbvpET2BP9uXvSew
      aRgY7pFI0WJcYvT9a3p+7O/oYucHa/G63LhHRqnYsgO/x/vJh5kmx3Z+zMGN2+hr78Q0Taor
      jnFw43Y0VUVTVQ5u2k51xbEJZYQDXd3s+XADg+O17x0NTXy8ZiPukdvjpFxOZ0Mzu1evI+j3
      M9I/SMXWnYQCwejyUCDAvnVbOLBhK+FgCNM0Ob3vELv/vB6f28NAVw8HNmzlaPmeCU28upvb
      2LNmA6MDQ5imSXN1LXs/2hStc7hSsqJ8oS/+kzHUMJ5jewl1NmPqOoH6M4S6WpEslujFX3OP
      4T15EEONBOVwbyfuI7tRRwai+wm21GEE/dHXphrGe+IA3tOHMA0dPeCLfE5Xyw0t11biE7Gm
      TLvhT7z9Z07TcXAv3r7eG7L/zsMHUP2+G7Lvm2W0r5+jW7Zz7sgxjAt+c31t7bhHRqKvj2/b
      SShw62+S9ZFBQpUVhOsrI3f+F5BkGSUpDWNsGK3vk9ZH1xQA9q/fyj2Pfw1nbCyGYdDT2k7Q
      f0EGmCYddY3MuWMxSelp9LZ10NPazvTCPCq27OTwtl1k5OVE34dIEcmuVeu485EV7PxgLWo4
      zKFN21m84l52vLfmWpL5hXJw03bufuwRbHYHAB31jajhT54SJFlm0QP3YHc6OXvkBN4xF83V
      tUwvyKPuRCW9re0kpCQzc1FZtAWGGg5zYMNWlj54Hzs/WIPP7aFyXwVz71rCng/X35LjvNlC
      rfUocQlYM3MjZfa6Trin/VNrmYR7OyJPBYaB99RBYhcsx1OxC9MwCPd14dq3BT3wyQUr2NaA
      ZLNFKoNdI3gqduKcWYb/7EnM0K3/sX9evaeOkVIyi/pNazENg6G6Grz9vZimiauzneHGOjy9
      3bi7Oxlrb8Xd1cFYeyT4+Qb66a+uRAsGUf1+PD1dDFRXoodDqIEA/dWVuDraMDQN30A/fVWn
      0MNhQh53ZLtQEFdHG6Zp4h8eRAsGPzvBt8BgVzemYdJ4spL+tnZ6W1ppra7B0HVMw8Tv8VB/
      7AQ9zc0Yus5wTy9Np6vobWnFNE066xroami8aRXh+lAPWCzoIwOoredQ2xtQO5sjxclDvWjd
      reiuYcyAD324HzMcvPoAMDY0TFdTCx0NTSgWhaS0VGITEyauJElYHXYObtqOrml0NbWQP6uY
      /NkldDW10NPSTt7MIvJmFtPd3ApEyshkWSYuMQFZVhjs6iUpPZ2ElGQCvtv7TmKwu5fetnZ6
      2yJt8VMy0omJi5uwjs1uJzY+js7GZnKKC3HGxTHc28/u1esoWTiP+OQkGqvO0nL2XHQbn8tD
      THwcCSnJaKpGX3sn6TlZpGVNZ2xw+GYf5i0RbKol3NMeKYO2WLCkXdxfxJKQjOw8XxQ03rQy
      FEB3jWD4vfirjxEzb2mk3H6cLTMH74kDqEP9KIkpGD4vSkIylpR0tJEb25TvZjANg/b9e0ib
      M5eeE0fwDw/RtH0ThqZRs/odJFmhs2I/Y61NNG3fiLu7k+byLah+H03lm7DFxVG34UN8A300
      bF6Hf2iQ3lMnaNi0FltsLGGPC4CGLeuwxcZimib1G9cgSRKtu7bTffwwwdFhWvfsuOp+DDdT
      e+05gj4vSdOmUf7GOxiaRm9zK67BIXa+9T7OhHh8LjdBn5+PP/gQq93GgTXr6axroPFUJVV7
      DzA2cPOK34yxIYyxIeSEFFAshGuOY/o8BI/vRXeNIMky+lAv4XMnwWK7+gCQmJpCZn4us5cs
      vGiZaZqYhoEkSTz5199j5qL5VO47hDM2lqA/EK0EdcQ4CQWCBP1+nLGxmIaBLMsY403HdE0j
      LjGBcDCIaZpfgNYmn0/a9AwyC/KYMW/ORcvO55lhGJS/+yFLHryPaTlZtJytZcG9y3jgW49z
      ZPtuZsybw9N/9wK1x06hhsOYhoHFZkXTtEjllGEQmxA/3tTs1lfY3iy2rDycsxZc8jtyqWaI
      kqyQcO/XCHe3IcfEEe7vAsMg1FJHsKkmuo2v+gTJj/8FluQ0Qu1N4xW7BmY4iORw3KzDu2Fk
      RWHWE99isLoK30A/wdFhkgqKMA2DhOxcUopKkCSJ6UuW4UhIImvpMqyxsQTHxojLmE5SQRFa
      MPIklD63jKSiksgTgN9HUmExMemRQFz44CO07dtNYGQI/9Ag/qFBEgtmkLXkTlp2bccWFx9p
      UvoFbS46+86lTC+aQeuZalKzplO0aAEQqTPTwmFyZ80kado0/B4PiWmpZBUXYbXbGentwzs6
      Sur0TBSr5Yp75n5ekjMW5wNPIlltaC21mGoIDB3Jbsc2cz4oFtTmGpTMPCRJuvoA0NnYzEBX
      N+tffZOR/kG6mlrobGiiYks5pmmy+levYhgGe9du4syhI+TNLmHmovnUnzpD+bt/5o5HVrDk
      wfvYteojGk6foWRhGZvfeI9wKExmbg473vuQrBkFJKQmoygK5e/+mVmL59+IvLppGk5XM9o/
      yIb/fguvy01LTR3dLW0cHm9Ou/7VN+lpaaPh9Bkq91fQdq6BxLRUWmrraK2tZ3phHu11Dez5
      cAOxCQlYrVY2vPY2VruNmLhYtr29mqKyOUzLzcbn9rD9ndWU3X3nrT7sG87UNfw1J/HXnSbQ
      UI0RDuE/e5xwZwvq8ACeQzvQ3aOEetpRB3rxVVZgGnqkt+9wP87ZC3EWlZL0tW/jKC7FWTKP
      UPM5gs21WFPS8VcfR/d5UBKScRbPw32wHCMYxJKUdqsP/fOTJJp2bMGRnMz0xXcQ8niiF/Tz
      LX9kiyXScsx6/rWVuIxMAiPDNG3bQHJhMZIsI8tK5GJisRCbMZ1zH63C3RUpZx5rbcbqjMHU
      DdLnzkf1e9HDIRLzCnF3tpO15C483Z207999a/LhMmRZof74Cfpa2khMT4+2wpMVBYvVSnxq
      MtvfeJvh7h6S0tNQw2F2v7sKXVUpWjQfQzcIB4No4TCb//g/NyPBKMnpyM5YzKAfw+tGsljR
      Bro+adUmyzju/CpaRyPaYM/1bQVkmiYVW3Zw92OPEAoEsFit0TtRQ9fRdR2rzQZEyq/P9w6+
      cHs1FMI2focVeR3G5rBfdV7cKlfbCkhTVU7s3s+yR796yWWGrmNzONB1nXAwiCNmYjPST+eR
      aZqo4TA2++2TZ1fqaucD8NecxFFUiuxwTnjf1NRIi8/PeEoywiEkRUEa//EYahjJcvs0ST7v
      SloBnW8COlkz4Qnrjte1yJcYBuTTyz79+nyTUUNTOffRKuZ95/8QdI3ham8lY/6iazi66+Na
      WgGZpomh6yiWyB3+2YMVBLw+1FCIe765MrpckmWq9uxj0UMrrl96r6AV0PkmoJjGhOFLLiSa
      gV5nt2sz0NuBmBDm2nwRm4Eauo4eDmF1fjGa6X7eZqCmaeJ3uQmHQiSlp93wYmsxIYwgCNds
      qL6W5h1bcHd1XHa983expmHQsnv7VX+OaRi07Np20fuyomB1xjDa0kT7/t0MN179mEaXYug6
      LbuvzyibpmnSdLqK/WvWcaJ852WHcZAkidikRJIzpt2yOkvTNFFbzxE8todQ9dFIx8PPcOuG
      chQE4ZZp27uTBX/5QqS3fSjEUF0NcRmZxGZMx9PVQXxOHp6uDpBl2vfuouhrj+Pr62Wg5gzx
      07MI+3wk5OQx1tZMUkER3t5uZIsVd1cHKSWzkGQZ//hTh2+wH10N4+vrJSE3f0I6RprqSSqY
      QcuubSQXFuPu6STsdpM2u5SQx0PY40KxOSIV84N9pM0sRVfD0WIlQ1ORrTZGmhqwx8UTn5OL
      b6CPofpanMkpxE7LvOY8aq2uoel0FSv+9zP4PR5Mw6S7oYlwOER2cREtVdUkZUwjIz+P7oYm
      fC432TOL0FWN+NQUBto7iU9Npr3mHIVlcwn6/IT8ftzDwxQvWkjQ56ftbC2ZhfkkpKXS39qO
      qqoUzL24sciV0FrPofV14lj6AEbAC7pGuK0O2RmLkpmHPtiDGfAiJ09DH+rDkpkjngAEYSpK
      LZ7NuXWrMXWdho1rsCck0rqnnJBrjPaDkTk+2g98jGK1YZomit2Op6cL0zBoLt9Cf9VJfIP9
      nHnndbx9PfSeOo6uhlFsNtr27sTX30fbnh1YY2IwDYPGrRsmDKlxod5Tx4idlomnr4e+UyeQ
      JInmndsYaaqn58RRdDVM28c7sMcl0LB5Le6uDkZbGvH0dDPS1ED9hjXYExNp3bsTLRgkMDSI
      FvDTvGPr58qjjtpzlN13D/YYJ/HJyWhqmPI/vY3d4WDf6rXYnU5ObN9Ff3sHB9auJy4lCdM0
      ObxxC4OdXbRWn2XX2x+gWCwcWLOeplNVVH68n5YzNfS3d1D+5jskpqeyd/UaXIND7HjrPezO
      a29hpnW3Ypu9CMlmR0lMjQRJZyyh0wcxg36CB7dghoIEdn0IaohQ1WERAARhKip88BHy7r6f
      hs3rCPu8JBXMIC4zi+DYKJjjQwfoGtbYWGyxcdhi40jIyWPa3PmYQOrMUpq2biD3nvtp2r6J
      lJLZDJytwj88iDHewTF1dikxqemEvV4Cw4PEpKZfsmlu3n0PogX8jDTWkZhfSHLxLILjczFM
      m7cQ0zCIy5xOYn4hqj/SW9s0wVDVSLPxcIik/ELsCZEhDmLSp5Exf1F0MMRr5YyPxzUQ6fOx
      8533Cfr8ZBUXkVVchGd0jPy5c8goyCPg8bLwwQc49NFGrDY7mqpxcuceZt91B2MDA4wNDJI3
      JzKXx7x772ZaXi7hQBBD18kqLiI+OZmA10vOzGKmzyi85vRKzhgM98h4/pgYowOobfWYhh4Z
      +jklA0v+TJT0bCy5Rdc+HLQgCLe32o9W0X/mNMkzSkgvLaNxy3r8Q4PEZ+cgyTING9eCJGGx
      O/APD+Lp7UYZb1lmsdtJKpxBYGSYvK+sIOQaI3lGMYGRIVS/j5DbBZjRlj+x6dMoWPEIjds2
      MFxfS++pY9F0yFYrnYf2YxomGWWLGG6opWnbBjIXLIk0Q1UU4qdnRzqqbdtI6sw5OFPS6K86
      Se/p4yg2G6mzSqlb92f8A/2RIQ/G06nYPl9/jfn33Uv98RPsXb2Wsf4BZFnGOr7vmUsXsfu9
      1fS3tZOWk8VARydWuw3DMJh15xLUYJDkjGnMvWc5npFRQgE/Fps12oTUYreRVTSDj1d9iK7r
      JKalYf2crR1tpUsJ150mcHgHwcM7MDwuTL8HSVbQhweQrDZAAosVkJAsNtEK6HoTrYBuHNEK
      6NpcqhWQoWmYho5is0dfS0qkPf/5TkvnKzMNXZ8whPtkzm93ueaknt5uDFUlMa/g0vsY7xj5
      6e0j7+vRoeINXYv+PVhXQ8jlYqy1ibnf+ctraqY7WSsg0zQJB4NYbLbo8Onn6ZqGPJ5nhq4D
      UnQ05MnWu5pll03vJK2ATNMENQzjzZVNw4iMkGtyyfMnKoEFYQqK3J1bPvU64tMXiivpG3Dh
      dpe7lMVPz77M0khrmksNDRF5/4L0XvB3cmERYa+XrCV3XPc+GpIkYXc6L7nswulQL5dHl5s2
      9XpPqSpJEtg+eZKI5uUk2SKKgARhiho4W0XrnkiTSVdXO+0HPp6w3DQMOg8foLNif6ROQNNo
      27eb1j3l6KrKYO1Zmso3M9r6yVOZaZoM1lbTuqcc1e/HNE16Tx2nbd9u9Bs0G5bF7iAmNQ35
      GuZK+CyekRH2f/gRAx2dhPx+Tu7cw0BH14R1eppbOLB2AyO9feiqxrGt5RxYuwHfmItwMETF
      hs0c3rgF3wUTW3lGRjn40QbaaiJjew1193Bg7Xr6WtuuOa3h2pOETh2I/Ks5fkXDa4gAIAhT
      VO/p4+Te+wAAVkcMYy2NE5YP1pxBViwodgf91ZWMtbdGihQkCW9fD/HZORQ88PCEWb9CrjGG
      6muZVraQlt3bcHe2ExgZIiE7l67DB27m4V0XZ/YdpHjRQlKmZwIS4UCAsYFPhhHXwmGOb93B
      4odWcGDtBpAlSpffRe6sYk7v2YsaCuJ3uym9exmO2E86vR1Yu56y++7l7IFD+D0eDn60kcUP
      P8jRzZEBNK+FZcYcJGcsWKxYZ8zFDIcIN55BG+xBHx3ECAXQh3oxggH0kQH0sSERAARhKhpt
      bR4fBC7SasR5iTtod3cniXn5JOYV4OnuJC5zOn2njzNcV0tcZhb2hETG2luIz8qJbuPt6yV+
      ejbOlDRCrrHIPnILSMzLx93dye1EDYdpra6hs64ei9WKPcZJQmrqhHUCPh/2GCexiQmYRqTD
      XExCPC1VZ8krnY1isRL0Bzi5Y3f0jtw0TfzuyOBxiWlpDHX1ICsysQkJ2GOcBC6YW+VqyI4Y
      JJsDyWZHdsYQPFyOHJtA+MwRtO4WtJZIJzGt7Rzhs8fQ+zpFABCEqSgxN4+E7FziMqZftOx8
      Raw1NhY1EED1+7DGxNJz/Aizv/kdUmeXMlB9mtGWJsaaG5nx0Nc/tY0fU9eRFAu28deq3481
      5osx7MOVslitZBYWMGf5XZdcbhgGFqsN/YIReWVF4dD6TeTPnUPe7Fk4YmN4/G/+P6x2G30t
      bdGJZRRFwdB1QoEAMQnxkd7WpokWVrHYbdcl/WbAh5KZh5ycjhyXhNp6DiVtOmpbPVJMLMiy
      CACCMBV1HTlE2Oelbv2HAAycrSQwNkLPiSP4+ntp2bWNzAVL6DlxhO6jFWQuWkp8dg69J4/i
      G+gnbno2HQf2EPK6af14B6ZhcO6jVcRn5xAcG6Vx63qy71hG6qxSRhrraNm1nZy77rnFR311
      fC437bXnqFi/ic66etwjIzSeOk3d0RP4XC62vvoGsiKTkJbGnvdXU1g2F5/LTf2xEzSeqqTh
      5Gl8Ljf7P1zHSG8fqVnTObljN/1t7cxedid73luNJEmkZk0nZ2YJe97/MynTM3B8nkCpKOPN
      PMFaOJvg4XIM1zCW7EKwWLAUzgZZwZI3MzKwoWgGen2JZqA3jmgGem2udjC4sNfDaEsTGfMX
      jTdv/KSVi66q0aGfJxMZAVSLFimZhhFp2nmdW7xcT9cyGNypXR+z8MH7kSQJTVWjIx1fyDRN
      1GAIi902YeRjiNQfKNbx5pqmiaaqWKxXNtrslU8Kr4MsT7rPL+4ZEQThlrDFxUeHZv5080bl
      CiYakiQJ6YL6BEmWb/tJnS5l8QXDO1/q4g+RvLBNMryD5YJtJEmadB+fx2fNtvblOyuCIAhT
      lGmaGH5vdFJ4U1MvmiDeNHSMgA/TNMUTgCAIwpeFWncK3TWCbfYikGSCFduxl92FJacIiASI
      YEU5kt2J5HCKJwBBEIQvA1PX0LpasObPRElKQ0lMwZo/c+I6PjeYJvalD6B1t4kAIAiC8KVg
      mpEiH3XyBiimrsH5sYckUQcgCILw5WAYYBhINgdGMICpaRjBQKS83zBQWyOTw5h+L/rIAJJd
      FAEJgiB8KZiGjrVwNsZIP2bIjxnyIzuckdFBNRW1vR5kBfuir6B1teC486uiElgQBOHLQHbE
      YCtdOuG9C1/bF96LZLGipGagpGZEtrmpKRQEQRBuCSUp9aL3RAAQBEGYokQAEARBmKJEHYAg
      TAGLM9NudRK+0OxXOOvZl40IADdAhjOR8PggWsL1U+fx3+ok3LYG/CLvLsdhUchP/nyTst+O
      RAC4AZpdo3jCoVudjC+dnIR0Hp6RdauTcduZkRxPa8eVj3I5FYV18QQgCF9oiU6J4oyp+UP9
      PFLiRFWfcGkiAAi3Dd00COrXNl/qVKaNz0IlCJ8mbg0EYQoK+/0Y48FUC4fQLzN+zIVG2lou
      em+ssyM6cYxwexEB4CZor61jz3uraThxCl3T0C/4sXjHXDRVnrlom31/XosavrIfpWmanNl3
      ENM0qT5Qgd/toa+1jbGBK5sFate7H1zZgQhfGife/RMdx44CUPnhKrpOncQ0TXRVBdOMDCxm
      mpEL+/lJA02Tpn17xv80oxf9tiOH0MIhzPEnjQuXnd/XhQHi/Py3wq0nioBugmNbtvP1F57H
      arezb/VaZEXh7m8+gc1uJ+Dx0FXXQN7sWZw7cgxnfBwlixbgGRmjpbIaSZYoXrSA9ppzeEbH
      yMjPJTE9nZqKI2QW5JFdUowkSXQ1NFI4fy5Ht2zD5rDT29zKHV9/mIbjpwgG/My5607CoSD1
      x06SljWd3DmzGGjvpLellZGevludRdfk/KTazrg4AAIeL4642AnT34X8AWxOB5IkYRgGfS1t
      ZBXPuGhf4WAIxaKgWCxoqgomWGyfzGrV3dhMVvGMSafWC4dCKBYLmCa6pmNz2AkFAtidzis6
      FjUUQlYin3+ln/l52GJi6as5Q/aiJXj7+0ibUUR31SmGm5uIARyDpAAACatJREFUn5aBIzGJ
      zpPHSMzOxWKzkXvHXTTv+xiI5PuZdR9iqColDz6MaZrUbtlIYGyURd/5Lo27dyApFqwOO+kl
      s6nfuQ1ZUSi89370cJjBxnosDgelX3/iuh+XcHXEE8BNsPiRr7Lx9//NQGcnsUmJTJ9RgOVT
      U+sd3riFhNRkBju7aK2uQQ2F0HWNswcqCPr87PvzRySkpXJ083Zaqs7gHR0ladq06PbZJUXU
      HztBdnERnXUNBH0+eptbGe7tJSY+nqNbtvPxe6vJnVVCTcURBjo6qdiwify5c9C127NcfbR/
      gNf++UVCfj/ukRHe+NlLqKEQhmFEj6npdGVkjlrTRAuHOblzNwC6pmFcUDbeUXuOqr0HADhR
      vovR/n50XY/euZ4o34VpmBPvbi/QdLKSxhOnaThxio/fX03A4+Xo5m3RuV4n3lUb0dfn//W1
      tuEdHYumzTRNTpTvjNwp34C7ZcViwZ6QSOOenWQvXAyAIyERR0IiY12d6GqY7IVLmPnQ1xho
      qKPj6GEyS+cB4O7rwdXdxf/f3pnFxnWVcfx37+x39s2OxzPe7diO4zR2jLM2SSFN3Cy0aZu2
      iKJQBQkJVUgFCR544AleEEhQBC0tbUARRG0SmpC1TQhZmmbxEseO18T77tgznhnPPpeHoRNC
      W1UpborBv5eruffce853def+v/Odc+4nKBRMD/QhCAJlddtYVFbBaGsL0dlZlmz7KlO9vSTi
      MewFRRRt3MTM8BC9ly6iUKmYGRqcc5sWuH8WBOABUFhZwfbvfItzbx1CpVaj0UsfSRAd9Plw
      uN04XC7809OotRqKqx5CZzCQTCZxuF24S4oQRJGSmmo0OolLR46mz88pW8yVY6coW/klBju6
      sGRm4J+expHtwulxE/R6Cc+GsLmyMDvseMcnUGk0WJwO1NqPz1n6344sy+iMem5dv0HnlXqM
      VgvxaIyLBw9z4Oe/IuibYbCzm1gkwtFXXufiwcPEYzHuDI9w4cA7HPn1q2kRyK0op6e5hWQi
      wXj/AFq9xIUDf+HAL15Oi0ksEuHE63s59uobeCcm72lLdnEh/W3tjPX24ZucpLflJu6SYq6d
      eJejv32dvrYOzr19iOO/e4OTv/8Dk8MjHPrlbxgfGOTs/reZGBxi1u/n/Xf+ypl9++lqaAJg
      rLeP8wfe+VxCJp7qGkZbm7F4cpBl6Dh5DLMrm1hoFlmWUahUiKKILa+AkdYbWHPzANCZrWiM
      Rgof3oizqARZlvEO9OMbHsTidhOdDTIzMpzKDYyAUqNJ92JMWVlYc/Io3bJtzu1Z4P5ZCAE9
      AM7uP0AsEqFwWSUZuR6azpzDVViASq0mGo6gVKupXL+Wi4cOk0wkWL/rSabHJkAQ0FvMiKKI
      wWJBEAQMVjNDnd3M+mcwmM3pOswOB06Pm0UFeWTm5VBQWYFkMnHurYPcamqmcsM6fBOTnNm3
      HzmZZMWWR+m50cqpvftQqObvY1BctZyua41oDXrsriwEUcRgNSMjE/B6iczOMtrTh92VRc2W
      TRx/bS8aSUJr0OPv6CQZTyCqRVRqNZaMVGgtMzcHlUaLZDQS9PnSAjByu4fpsXHMDjvj/QNY
      nHdX15ocdvxTU5jsdiSTie7G62x+4Xmi4TAavcSd4WGioTCrH99O0Oej7dIVkokEHVfrSSQS
      JGJxEvEEPc0tfO1HP0AQBFrPv897f/wTz/7we3MeBspbtRZLTi7rXnyJZCyGZLVhdmUTDQbw
      1NRiWuRCoUolKTe7slFLEoIgUPjwRtR6PeV125nu68VZXEJOzUqis0Gyl1djzvZQsWMnU723
      WfbUM4gKJVqzGZUkoZIkJKuNkZbrhHxeLG7PnNq0wP0zf//584iHd+0kmUigUCoRAFdhAYIo
      0t/WTvvla9Ruq8PidOAqKkx5TYLAhmeeTJ379BMAbHj2KQA2PrcLAE9pCcK/9CJEhYKnv/9d
      AOr27E7vr9uzG1mWEUURV2EBi2tWIIipOjZ/8/n0sfmKzmjANzmJ0+Nm9HYPI7duM9Y3gN5k
      IhQIpMoY9Iz3D9BZ30giHqfx9N8w2e0IgkA0EknH+pesXcWff/ozXvjJj+m4eo14LIZaqyUU
      CAJgdjrQm03Ubt2C1qCnq6EJz+JitPrUuIPeYkGjl7BnZ9FV34ScTNJ05u/kVy4lFAgiA0qV
      ikUF+Rx++RW2fnsPx197k0d3f53JwSEA1Dodgx1dKeFXKihfVcuVYydZ/fj2ORWBD715lVYH
      Wh0aI+gdzo8tK4ginuoaAOz5qdyypiwXpqzUojzJdu9XJo0ZmRgzMtO/NUZjaqtPjdW4l9/7
      yeIFvjgE+VP6lvUT/XijoQfVnnmPU2tgfDa8sBL4c6DU6qB9+m7oJRIKEZj2YrLbEBUKxvr6
      cbiz6brWgNnpuEf4elpuIggCaq0Ws9NOz41WTHY7JrsNa2ZqLEWWZXpbbpJXUU4kFKLzWgPW
      jAw0ko5YJIKrqJCxvn7G+wbIX7qE+ndPU73pyxhtVgCmRkZRKJUo1SoCXh8ZOR66G5rQ6vWE
      g0GMNiuObBdKtZq+1jY8pSUMdHThLinCOzGJzqBHlmVuNTazKD83XWdvy03ci4tRqdWf8b45
      OdTe/5H9sXCYSMCPweFElmUi/hm0JvM9ZSIBP8ipl3g8GiUeSr0LlFptKsH4jA/JZkOhVKXv
      YWRmBgBBIaIxGIkEAyRjMXQW62dq/4NAp1TwSH4mt2fmx4ppSamiqT/Mqe6h/+g6CwIwx3yS
      AHQ3Xmeoq5varXX4Jia5+cFlVu/YikaSAAgFglw9cQo5kaTmsUdRKJVcOHgYhVLBis1fAQQa
      3j2D2emgcv3atDd4+/oN+ts7KatdQUZuDm2XLjMxOMyyDeuwZHy8Rzdf+XcB+KKZuXMHo832
      uczSmUs+SQCuvPkamWXl5NauZrCpgZ7zZ1n34kvp4/6xUbrPnoZ/hn4S0SgjLdeZGRkma+lD
      iEoF8XCYqb4eqp/7BgDJeJz2U8dIxuP4x0ap3LmLzvdOotRoyCgtJ7O0/IHZfT/8vwrA/O37
      zzNazl9kzRM70Eg6TA47IX+AeOzu7Bu1VsPK7Y9hy1rErcZm4tEoCoXIqh1bkUwmLh89zpI1
      K/GOjafDBdFwmJYLl1i14zE+OHIc/9Q0Ax1dVG16hEuHj35SU/6nkGWZWb//C6n7wzDSfCR4
      Z5Kw30dmWWpmT/ay5WhMpnvKDDc3krtyDflr1jHU1IA1J5fSzVtR6STcVSvwVNWQvayKROSu
      syMqlZTVbUdrMrN40xZ8gwPYC4soWLeBocb6B2rjAp/OPwBh44KvVQBL0QAAAABJRU5ErkJg
      gg==
    </thumbnail>
  </thumbnails>
</workbook>
