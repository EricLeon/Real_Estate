<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20212.21.0605.1023                               -->
<workbook original-version='18.1' source-build='2021.2.0 (20212.21.0605.1023)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <DashboardMttwImageObject />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.SingleValuePerNestSorting.true...SingleValuePerNestSorting />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style>
    <style-rule element='worksheet'>
      <format attr='color' value='#333333' />
    </style-rule>
    <style-rule element='title'>
      <format attr='font-size' value='12' />
      <format attr='font-weight' value='bold' />
    </style-rule>
    <style-rule element='tooltip'>
      <format attr='color' value='#333333' />
    </style-rule>
    <style-rule element='all'>
      <format attr='font-family' value='calibri' />
      <format attr='color' value='#333333' />
    </style-rule>
  </style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
        <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
        <aliases>
          <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
          <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
        </aliases>
        <members>
          <member alias='By Borough' value='&quot;Rent By Scrape Date&quot;' />
          <member alias='By Available Date' value='&quot;Rent By Available Date&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='all_rental_data' inline='true' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='all_rental_data' name='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5'>
            <connection class='textscan' directory='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate' filename='all_rental_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='property_id' ordinal='0' />
            <column datatype='string' name='property_link' ordinal='1' />
            <column datatype='string' name='listing_title' ordinal='2' />
            <column datatype='string' name='description' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='real' name='num_bedrooms' ordinal='5' />
            <column datatype='real' name='num_bathrooms' ordinal='6' />
            <column datatype='integer' name='max_tenants' ordinal='7' />
            <column datatype='string' name='deposit' ordinal='8' />
            <column datatype='real' name='rent_pcm' ordinal='9' />
            <column datatype='string' name='bills_included' ordinal='10' />
            <column datatype='string' name='student_friendly' ordinal='11' />
            <column datatype='string' name='family_friendly' ordinal='12' />
            <column datatype='string' name='pet_friendly' ordinal='13' />
            <column datatype='string' name='smoker_friendly' ordinal='14' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
            <column datatype='string' name='min_tenancy_months' ordinal='16' />
            <column datatype='string' name='garden' ordinal='17' />
            <column datatype='string' name='parking' ordinal='18' />
            <column datatype='string' name='fireplace' ordinal='19' />
            <column datatype='string' name='furnishing' ordinal='20' />
            <column datatype='string' name='closest_station' ordinal='21' />
            <column datatype='string' name='closest_station_mins' ordinal='22' />
            <column datatype='string' name='postcode' ordinal='23' />
            <column datatype='string' name='listing_type' ordinal='24' />
            <column datatype='string' name='region_loc' ordinal='25' />
            <column datatype='real' name='bed_bath_ratio' ordinal='26' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
            <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
            <column datatype='string' name='property_id' ordinal='0' />
            <column datatype='string' name='property_link' ordinal='1' />
            <column datatype='string' name='listing_title' ordinal='2' />
            <column datatype='string' name='description' ordinal='3' />
            <column datatype='string' name='location' ordinal='4' />
            <column datatype='real' name='num_bedrooms' ordinal='5' />
            <column datatype='real' name='num_bathrooms' ordinal='6' />
            <column datatype='integer' name='max_tenants' ordinal='7' />
            <column datatype='string' name='deposit' ordinal='8' />
            <column datatype='real' name='rent_pcm' ordinal='9' />
            <column datatype='string' name='bills_included' ordinal='10' />
            <column datatype='string' name='student_friendly' ordinal='11' />
            <column datatype='string' name='family_friendly' ordinal='12' />
            <column datatype='string' name='pet_friendly' ordinal='13' />
            <column datatype='string' name='smoker_friendly' ordinal='14' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
            <column datatype='string' name='min_tenancy_months' ordinal='16' />
            <column datatype='string' name='garden' ordinal='17' />
            <column datatype='string' name='parking' ordinal='18' />
            <column datatype='string' name='fireplace' ordinal='19' />
            <column datatype='string' name='furnishing' ordinal='20' />
            <column datatype='string' name='closest_station' ordinal='21' />
            <column datatype='string' name='closest_station_mins' ordinal='22' />
            <column datatype='string' name='postcode' ordinal='23' />
            <column datatype='string' name='listing_type' ordinal='24' />
            <column datatype='string' name='region_loc' ordinal='25' />
            <column datatype='real' name='bed_bath_ratio' ordinal='26' />
            <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
            <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;Â£&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>property_id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[property_id]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>property_id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>property_link</remote-name>
            <remote-type>129</remote-type>
            <local-name>[property_link]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>property_link</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listing_title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[listing_title]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>listing_title</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>description</remote-name>
            <remote-type>129</remote-type>
            <local-name>[description]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>description</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_bedrooms</remote-name>
            <remote-type>5</remote-type>
            <local-name>[num_bedrooms]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>num_bedrooms</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>num_bathrooms</remote-name>
            <remote-type>5</remote-type>
            <local-name>[num_bathrooms]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>num_bathrooms</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>max_tenants</remote-name>
            <remote-type>20</remote-type>
            <local-name>[max_tenants]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>max_tenants</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>deposit</remote-name>
            <remote-type>129</remote-type>
            <local-name>[deposit]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>deposit</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rent_pcm</remote-name>
            <remote-type>5</remote-type>
            <local-name>[rent_pcm]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>rent_pcm</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bills_included</remote-name>
            <remote-type>129</remote-type>
            <local-name>[bills_included]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>bills_included</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>student_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[student_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>student_friendly</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>family_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[family_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>family_friendly</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pet_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[pet_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>pet_friendly</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>smoker_friendly</remote-name>
            <remote-type>129</remote-type>
            <local-name>[smoker_friendly]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>smoker_friendly</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>available_from</remote-name>
            <remote-type>7</remote-type>
            <local-name>[available_from]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>available_from</remote-alias>
            <ordinal>15</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>min_tenancy_months</remote-name>
            <remote-type>129</remote-type>
            <local-name>[min_tenancy_months]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>min_tenancy_months</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>garden</remote-name>
            <remote-type>129</remote-type>
            <local-name>[garden]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>garden</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>parking</remote-name>
            <remote-type>129</remote-type>
            <local-name>[parking]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>parking</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fireplace</remote-name>
            <remote-type>129</remote-type>
            <local-name>[fireplace]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>fireplace</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>furnishing</remote-name>
            <remote-type>129</remote-type>
            <local-name>[furnishing]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>furnishing</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closest_station</remote-name>
            <remote-type>129</remote-type>
            <local-name>[closest_station]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>closest_station</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>closest_station_mins</remote-name>
            <remote-type>129</remote-type>
            <local-name>[closest_station_mins]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>closest_station_mins</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>postcode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[postcode]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>postcode</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>listing_type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[listing_type]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>listing_type</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>region_loc</remote-name>
            <remote-type>129</remote-type>
            <local-name>[region_loc]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>region_loc</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bed_bath_ratio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[bed_bath_ratio]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>bed_bath_ratio</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>scrape_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[scrape_date]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>scrape_date</remote-alias>
            <ordinal>27</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_monthly_rent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_monthly_rent]</local-name>
            <parent-name>[all_rental_data.csv]</parent-name>
            <remote-alias>predicted_monthly_rent</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Value' datatype='real' name='[Calculation_1970606335739912192]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[rent_pcm] - [predicted_monthly_rent]' />
      </column>
      <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
      </column>
      <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
      </column>
      <column caption='LAST' datatype='integer' name='[Calculation_2147442990582628352]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='LAST()'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
      </column>
      <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([property_id])' />
      </column>
      <column caption='Days On Market' datatype='integer' name='[Calculation_768919287822987264]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
      </column>
      <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
      </column>
      <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
      </column>
      <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
      </column>
      <column caption='Days on Market' datatype='integer' name='[Calculation_888546153548345344]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='all_rental_data.csv' datatype='table' name='[__tableau_internal_object_id__].[all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B]' role='measure' type='quantitative' />
      <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
      <column caption='Bills Included' datatype='string' name='[bills_included]' role='dimension' type='nominal' />
      <column caption='Closest Station' datatype='string' name='[closest_station]' role='dimension' type='nominal' />
      <column caption='Closest Station Mins' datatype='string' default-role='measure' default-type='quantitative' name='[closest_station_mins]' role='dimension' type='nominal' />
      <column caption='Deposit' datatype='string' name='[deposit]' role='dimension' type='nominal' />
      <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
      <column caption='Family Friendly' datatype='string' name='[family_friendly]' role='dimension' type='nominal' />
      <column caption='Fireplace' datatype='string' name='[fireplace]' role='dimension' type='nominal' />
      <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
      <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
      <column caption='Listing Title' datatype='string' name='[listing_title]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;flat&quot;' value='Flat' />
          <alias key='&quot;shared&quot;' value='Shared Accom.' />
          <alias key='&quot;studio&quot;' value='Studio' />
        </aliases>
      </column>
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Max Tenants' datatype='integer' name='[max_tenants]' role='measure' type='quantitative' />
      <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
      <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
      <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
      <column caption='Pet Friendly' datatype='string' name='[pet_friendly]' role='dimension' type='nominal' />
      <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
      <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
      <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
      <column caption='Property Link' datatype='string' name='[property_link]' role='dimension' type='nominal' />
      <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
      <column caption='Smoker Friendly' datatype='string' name='[smoker_friendly]' role='dimension' type='nominal' />
      <column caption='Student Friendly' datatype='string' name='[student_friendly]' role='dimension' type='nominal' />
      <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rent_pcm]' derivation='Median' name='[med:rent_pcm:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1970606335739912192]' derivation='Sum' name='[sum:Calculation_1970606335739912192:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Borough)' hidden='true' name='[Action (Borough)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_816770033929490432]' />
        </groupfilter>
      </group>
      <group caption='Action (Postcode)' hidden='true' name='[Action (Postcode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Action (Value Classification,Postcode)' hidden='true' name='[Action (Value Classification,Postcode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Postcode)' hidden='true' name='[Tooltip (Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Still On Market,Postcode)' hidden='true' name='[Tooltip (Still On Market,Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_719379691605893121]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (Value Classification,Postcode)' hidden='true' name='[Tooltip (Value Classification,Postcode)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
          <groupfilter function='level-members' level='[postcode]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Calculation_719379691605893121:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>true</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[med:rent_pcm:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335739912192:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1970606335741288450:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#59a14f'>
              <bucket>&quot;Good Value&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Over Valued&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fairly Valued&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-date-format>*dd-mmm-yy</default-date-format>
      <datasource-dependencies datasource='Parameters'>
        <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
          <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
          <aliases>
            <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
            <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
          </aliases>
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='all_rental_data.csv' id='all_rental_data.csv_D2FFBF284E5B4934A52E162E1A5A254B'>
            <properties context=''>
              <relation connection='textscan.0iqqcd00uvkfdr13obhyg1v0kyv5' name='all_rental_data.csv' table='[all_rental_data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_GB' separator=','>
                  <column datatype='string' name='property_id' ordinal='0' />
                  <column datatype='string' name='property_link' ordinal='1' />
                  <column datatype='string' name='listing_title' ordinal='2' />
                  <column datatype='string' name='description' ordinal='3' />
                  <column datatype='string' name='location' ordinal='4' />
                  <column datatype='real' name='num_bedrooms' ordinal='5' />
                  <column datatype='real' name='num_bathrooms' ordinal='6' />
                  <column datatype='integer' name='max_tenants' ordinal='7' />
                  <column datatype='string' name='deposit' ordinal='8' />
                  <column datatype='real' name='rent_pcm' ordinal='9' />
                  <column datatype='string' name='bills_included' ordinal='10' />
                  <column datatype='string' name='student_friendly' ordinal='11' />
                  <column datatype='string' name='family_friendly' ordinal='12' />
                  <column datatype='string' name='pet_friendly' ordinal='13' />
                  <column datatype='string' name='smoker_friendly' ordinal='14' />
                  <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM, yyyy' name='available_from' ordinal='15' />
                  <column datatype='string' name='min_tenancy_months' ordinal='16' />
                  <column datatype='string' name='garden' ordinal='17' />
                  <column datatype='string' name='parking' ordinal='18' />
                  <column datatype='string' name='fireplace' ordinal='19' />
                  <column datatype='string' name='furnishing' ordinal='20' />
                  <column datatype='string' name='closest_station' ordinal='21' />
                  <column datatype='string' name='closest_station_mins' ordinal='22' />
                  <column datatype='string' name='postcode' ordinal='23' />
                  <column datatype='string' name='listing_type' ordinal='24' />
                  <column datatype='string' name='region_loc' ordinal='25' />
                  <column datatype='real' name='bed_bath_ratio' ordinal='26' />
                  <column datatype='date' date-parse-format='dd-MMM-yy|#|#|dd MMMM yyyy' name='scrape_date' ordinal='27' />
                  <column datatype='real' name='predicted_monthly_rent' ordinal='28' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <shared-views>
    <shared-view name='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
      <datasources>
        <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
      </datasources>
      <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
        <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
        </column>
        <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
        </column>
        <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
        </column>
        <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
        <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
        <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
        <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;flat&quot;' value='Flat' />
            <alias key='&quot;shared&quot;' value='Shared Accom.' />
            <alias key='&quot;studio&quot;' value='Studio' />
          </aliases>
        </column>
        <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
        <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
        <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
        <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
        <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
        <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
        <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
        <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
        <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
        <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
        <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_1970606335741288450:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]'>
        <groupfilter function='member' level='[none:Calculation_719379691605893121:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]'>
        <groupfilter function='level-members' level='[none:Calculation_816770033929490432:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' included-values='all' />
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]'>
        <groupfilter function='member' level='[none:furnishing:nk]' member='&quot;Furnished&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]'>
        <groupfilter function='level-members' level='[none:garden:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]'>
        <groupfilter function='level-members' level='[none:listing_type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]'>
        <groupfilter function='level-members' level='[none:parking:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]'>
        <groupfilter function='level-members' level='[none:postcode:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='quantitative' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' included-values='in-range-or-null'>
        <min>570.0</min>
        <max>1500.0</max>
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Visit Listing' name='[Action1_51F15CEFC7C34818B17E56C731E378F1]'>
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Data Detail' />
      <link caption='' expression='https://www.openrent.co.uk//&lt;[property_id]&gt;' />
    </action>
    <action caption='Filter 1 (generated)' name='[Action2_362B439DEC2140838165D7179AA66AF6]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Flat Map' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='London Rental Flat Overview' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action3_79184BA9BC234F8586E6F2A258202FBE]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='London Rental Flat Overview' type='sheet' worksheet='Rent By Borough' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='London Rental Flat Overview' />
      </command>
    </action>
    <datasources>
      <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
    </datasources>
    <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
      <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='# Properties'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[property_id]' derivation='CountD' name='[ctd:property_id:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
            <format attr='font-weight' value='normal' />
            <format attr='color' value='#666666' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='9' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Properties still on the market.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{B98E830A-BC1B-4C42-A222-0CAFCBB8EB39}' />
    </worksheet>
    <worksheet name='# Scraped Sanity'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='Value' datatype='real' name='[Calculation_1970606335739912192]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[rent_pcm] - [predicted_monthly_rent]' />
            </column>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_id]' derivation='None' name='[none:property_id:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[scrape_date]' derivation='None' name='[none:scrape_date:ok]' pivot='key' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1970606335739912192]' derivation='Sum' name='[sum:Calculation_1970606335739912192:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:ok]' pivot='key' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Sum' name='[sum:predicted_monthly_rent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Sum' name='[sum:rent_pcm:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:ok]' value='p0.00%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:scrape_date:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335739912192:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:ok] / [federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{75CFF424-BE0E-47AA-8AC2-0D29A47A9C1E}' />
    </worksheet>
    <worksheet name='Average Baths'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[num_bathrooms]' derivation='Avg' name='[avg:num_bathrooms:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='70' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bathrooms:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bathrooms:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bathrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{50A44A0D-34AF-4025-B4E9-5B6230C59DB3}' />
    </worksheet>
    <worksheet name='Average Beds'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[num_bedrooms]' derivation='Avg' name='[avg:num_bedrooms:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='89' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bedrooms:qk]' value='n#,##0.0;-#,##0.0' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:num_bedrooms:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bedrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{4C346898-3402-44AA-A95E-7629B8DC0DBF}' />
    </worksheet>
    <worksheet name='Average Rent'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]'>
            <groupfilter function='level-members' level='[none:min_tenancy_months:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
            <format attr='text-align' value='left' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='8' />
            <format attr='font-weight' value='normal' />
            <format attr='title' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' value='Value Classification'>
              <formatted-text>
                <run bold='true' fontcolor='#666666'>Value Classification</run>
              </formatted-text>
            </format>
            <format attr='title' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' value='Type'>
              <formatted-text>
                <run bold='true' fontcolor='#666666'>Type</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='9' />
            <format attr='font-weight' value='normal' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average rent PCM (Â£).</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{935787A2-80F5-44C0-9D19-15ED33B5ADCE}' />
    </worksheet>
    <worksheet name='Data Detail'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='LAST' datatype='integer' name='[Calculation_2147442990582628352]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='LAST()'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Days on Market' datatype='integer' name='[Calculation_888546153548345344]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column caption='Bills Included' datatype='string' name='[bills_included]' role='dimension' type='nominal' />
            <column caption='Closest Station Mins' datatype='string' default-role='measure' default-type='quantitative' name='[closest_station_mins]' role='dimension' type='nominal' />
            <column caption='Deposit' datatype='string' name='[deposit]' role='dimension' type='nominal' />
            <column caption='Description' datatype='string' name='[description]' role='dimension' type='nominal' />
            <column caption='Family Friendly' datatype='string' name='[family_friendly]' role='dimension' type='nominal' />
            <column caption='Fireplace' datatype='string' name='[fireplace]' role='dimension' type='nominal' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:ok]' pivot='key' type='ordinal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[bills_included]' derivation='None' name='[none:bills_included:nk]' pivot='key' type='nominal' />
            <column-instance column='[closest_station_mins]' derivation='None' name='[none:closest_station_mins:nk]' pivot='key' type='nominal' />
            <column-instance column='[deposit]' derivation='None' name='[none:deposit:nk]' pivot='key' type='nominal' />
            <column-instance column='[description]' derivation='None' name='[none:description:nk]' pivot='key' type='nominal' />
            <column-instance column='[family_friendly]' derivation='None' name='[none:family_friendly:nk]' pivot='key' type='nominal' />
            <column-instance column='[fireplace]' derivation='None' name='[none:fireplace:nk]' pivot='key' type='nominal' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
            <column-instance column='[num_bathrooms]' derivation='None' name='[none:num_bathrooms:ok]' pivot='key' type='ordinal' />
            <column-instance column='[num_bedrooms]' derivation='None' name='[none:num_bedrooms:ok]' pivot='key' type='ordinal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[pet_friendly]' derivation='None' name='[none:pet_friendly:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_id]' derivation='None' name='[none:property_id:nk]' pivot='key' type='nominal' />
            <column-instance column='[property_link]' derivation='None' name='[none:property_link:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='# Baths' datatype='real' name='[num_bathrooms]' role='dimension' type='ordinal' />
            <column caption='# Beds' datatype='real' name='[num_bedrooms]' role='dimension' type='ordinal' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Pet Friendly' datatype='string' name='[pet_friendly]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Property Link' datatype='string' name='[property_link]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_888546153548345344]' derivation='Sum' name='[sum:Calculation_888546153548345344:ok]' pivot='key' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Sum' name='[sum:predicted_monthly_rent:ok]' pivot='key' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Sum' name='[sum:rent_pcm:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_2147442990582628352]' derivation='User' name='[usr:Calculation_2147442990582628352:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_2147442990582628352:ok:1]'>
            <groupfilter function='member' level='[usr:Calculation_2147442990582628352:ok:1]' member='0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
            <single-value-per-nest-shelf-sort dimension-to-sort='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]' direction='ASC' measure-to-sort-by='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]' shelf='rows' />
          </_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_2147442990582628352:ok:1]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='31' />
            <format attr='height' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]' value='36' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height-header' value='48' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]' value='244' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok]' value='80' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' value='144' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok]' value='56' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]' value='44' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]' value='52' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]' value='68' />
            <format attr='width' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' value='72' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]' value='false' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run italic='true' underline='true'>Tenancy Information:</run>
                <run>Ã&#10;</run>
                <run bold='true'>Deposit (Â£):&#9;</run>
                <run><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]>
]]></run>
                <run bold='true'>Minimum Tenancy (Months):&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]>

]]></run>
                <run italic='true' underline='true'>Misc Information:</run>
                <run>Ã&#10;</run>
                <run bold='true'>Postcode:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]>
]]></run>
                <run bold='true'>Pet Friendly:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]>
]]></run>
                <run bold='true'>Bills Included:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]>
]]></run>
                <run bold='true'>Family Friendly:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]>
]]></run>
                <run bold='true'>Fireplace:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]>
]]></run>
                <run bold='true'>Garden:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]>
]]></run>
                <run bold='true'>Parking:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]>
]]></run>
                <run bold='true'>Description:&#9;</run>
                <run><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]>
]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-color' value='#000000' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk] / ([federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk] / [federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]))))))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{E82E9F1A-0918-4BB4-A8CB-804A5C293DC7}' />
    </worksheet>
    <worksheet name='Days on Market'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='Days On Market' datatype='integer' name='[Calculation_768919287822987264]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{FIXED [property_id]: COUNTD([scrape_date])}' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_768919287822987264]' derivation='Avg' name='[avg:Calculation_768919287822987264:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='70' />
            <format attr='text-align' value='left' />
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:Calculation_768919287822987264:qk]' value='n#,##0.0;-#,##0.0' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='16' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:Calculation_768919287822987264:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Average number of Bathrooms.</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{005178B9-4141-47B1-B377-99607A6BDF7B}' />
    </worksheet>
    <worksheet name='Flat Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Rent &amp; # Of Properties</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[predicted_monthly_rent]' derivation='Avg' name='[avg:predicted_monthly_rent:qk]' pivot='key' type='quantitative' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column-instance column='[property_id]' derivation='CountD' name='[ctd:property_id:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1970606335740825601]' derivation='Sum' name='[sum:Calculation_1970606335740825601:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' num-steps='6' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#00ffb7</color>
                <color>#76ecca</color>
                <color>#d9d9d9</color>
                <color>#ec907c</color>
                <color>#ff3a0e</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
            <format attr='enabled' id='hillshade_highlight_bright' value='false' />
            <format attr='enabled' id='hillshade_highlight_med' value='false' />
            <format attr='enabled' id='hillshade_shadow_faint' value='false' />
            <format attr='enabled' id='hillshade_shadow_med' value='false' />
            <format attr='enabled' id='hillshade_shadow_dark' value='false' />
            <format attr='enabled' id='hillshade_shadow_extreme' value='false' />
            <format attr='enabled' id='admin-2-boundaries-bg' value='false' />
            <format attr='enabled' id='admin-2-boundaries' value='false' />
            <format attr='enabled' id='admin-2-boundaries-dispute' value='false' />
            <format attr='enabled' id='country-label-sm' value='false' />
            <format attr='enabled' id='country-label-md' value='false' />
            <format attr='enabled' id='country-label-lg' value='false' />
            <format attr='enabled' id='admin-3-4-boundaries-bg' value='false' />
            <format attr='enabled' id='admin-3-4-boundaries' value='false' />
            <format attr='enabled' id='state-label-sm' value='false' />
            <format attr='enabled' id='state-label-md' value='false' />
            <format attr='enabled' id='state-label-lg' value='false' />
            <format attr='enabled' id='marine-label-sm-ln' value='false' />
            <format attr='enabled' id='marine-label-sm-pt' value='false' />
            <format attr='enabled' id='marine-label-md-ln' value='false' />
            <format attr='enabled' id='marine-label-md-pt' value='false' />
            <format attr='enabled' id='marine-label-lg-ln' value='false' />
            <format attr='enabled' id='marine-label-lg-pt' value='false' />
            <format attr='enabled' id='waterway-label' value='false' />
            <format attr='enabled' id='water-label-sm' value='false' />
            <format attr='enabled' id='water-label' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.25' />
            <format attr='map-style' value='streets' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' />
              <size column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_1970606335740825601:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]' />
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run>Postcode:&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]>]]></run>
                <run>
Value (negative value represents underpriced flat):	</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]>]]></run>
                <run>&#10;Average Monthly Rent:</run>
                <run bold='true'><![CDATA[	Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]>]]></run>
                <run>&#10;Average Fair Value:&#9;</run>
                <run bold='true'><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:predicted_monthly_rent:qk]>]]></run>
                <run>Ã&#10;&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.6591712236404419' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Latitude (generated)]</rows>
        <cols>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{3E9F7505-5E69-4E78-B5E0-76A5372B7081}' />
    </worksheet>
    <worksheet name='Rent By Available Date'>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
              <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
              <aliases>
                <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
                <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_802133335129923585]' derivation='None' name='[none:Calculation_802133335129923585:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[available_from]' derivation='Week-Trunc' name='[twk:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]'>
            <groupfilter function='level-members' level='[Calculation_816770033929490432]' user:ui-action-filter='[Action3_79184BA9BC234F8586E6F2A258202FBE]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]'>
            <groupfilter function='member' level='[none:Calculation_802133335129923585:ok]' member='0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Borough)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' scope='rows' value='Avg Rent PCM (Â£)' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c#,##0;-#,##0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <lod column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Available From Date:&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[twk:available_from:qk]>]]></run>
                <run>Ã&#10;</run>
                <run fontcolor='#787878'>Average Rent PCM:&#9;</run>
                <run bold='true'><![CDATA[Â£<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]>]]></run>
                <run>Ã&#10;</run>
                <run fontcolor='#898989'>Properties Available:</run>
                <run>Ã&#9;</run>
                <run bold='true'><![CDATA[<[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
          </pane>
        </panes>
        <rows>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]</rows>
        <cols>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[twk:available_from:qk]</cols>
      </table>
      <simple-id uuid='{7172DDF7-E204-4F14-A511-AB521FD6B15C}' />
    </worksheet>
    <worksheet name='Rent By Borough'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Rent By Borough</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
              <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
              <aliases>
                <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
                <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
            <column caption='% Value' datatype='real' name='[Calculation_1970606335740825601]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='([predicted_monthly_rent] - [rent_pcm])/[rent_pcm]' />
            </column>
            <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
            </column>
            <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
            </column>
            <column caption='# Properties' datatype='integer' name='[Calculation_719379691610189826]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNTD([property_id])' />
            </column>
            <column aggregation='Sum' caption='Date Split Calc' datatype='integer' name='[Calculation_802133335129923585]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [Parameters].[Parameter 1] = &apos;Rent By Scrape Date&apos; THEN 1 ELSE 0 END' />
            </column>
            <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
            </column>
            <column caption='Most Recent Data Scrape' datatype='date' name='[Calculation_863705986603687936]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='{FIXED: MAX([scrape_date])}' />
            </column>
            <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
            <column-instance column='[rent_pcm]' derivation='Avg' name='[avg:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
            <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
            <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;flat&quot;' value='Flat' />
                <alias key='&quot;shared&quot;' value='Shared Accom.' />
                <alias key='&quot;studio&quot;' value='Studio' />
              </aliases>
            </column>
            <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_802133335129923585]' derivation='None' name='[none:Calculation_802133335129923585:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
            <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
            <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
            <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
            <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
            <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
            <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
            <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
            <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
            <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
            <column caption='Fair Value' datatype='real' name='[predicted_monthly_rent]' role='measure' type='quantitative' />
            <column caption='Property Id' datatype='string' name='[property_id]' role='dimension' type='nominal' />
            <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
            <column caption='Scrape Date' datatype='date' name='[scrape_date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_719379691610189826]' derivation='User' name='[usr:Calculation_719379691610189826:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]'>
            <groupfilter function='level-members' level='[postcode]' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action2_362B439DEC2140838165D7179AA66AF6]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Calculation_1970606335741288450]' />
              <groupfilter function='level-members' level='[postcode]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]'>
            <groupfilter function='member' level='[none:Calculation_802133335129923585:ok]' member='1' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[Action (Value Classification,Postcode)]</column>
            <column>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c&quot;Â£&quot;#,##0.00;-&quot;Â£&quot;#,##0.00' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' value='c#,##0;-#,##0' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='stroke-color' id='refline0' value='#f28e2b' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
              <color column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' />
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' />
              <text column='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[avg:rent_pcm:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{0E970F95-65AC-438A-B0F3-E577B3E314AC}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='London Rental Flat Overview'>
      <style />
      <size maxheight='1500' maxwidth='1000' minheight='1500' minwidth='1000' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
        <datasource caption='all_rental_data' name='federated.08d00uo1ue0adw1bnxbw40m8rntt' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column alias='By Borough' caption='Date Param' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Rent By Scrape Date&quot;'>
          <calculation class='tableau' formula='&quot;Rent By Scrape Date&quot;' />
          <aliases>
            <alias key='&quot;Rent By Available Date&quot;' value='By Available Date' />
            <alias key='&quot;Rent By Scrape Date&quot;' value='By Borough' />
          </aliases>
          <members>
            <member alias='By Borough' value='&quot;Rent By Scrape Date&quot;' />
            <member alias='By Available Date' value='&quot;Rent By Available Date&quot;' />
          </members>
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.08d00uo1ue0adw1bnxbw40m8rntt'>
        <column caption='Value Classification' datatype='string' name='[Calculation_1970606335741288450]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [Calculation_1970606335740825601] &gt;= 0.07 THEN &apos;Good Value&apos;&#10;ELSEIF [Calculation_1970606335740825601] &gt;= -0.07 THEN &apos;Fairly Valued&apos;&#10;ELSE &apos;Over Valued&apos;&#10;END' />
        </column>
        <column caption='Still On Market' datatype='boolean' name='[Calculation_719379691605893121]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='{FIXED [property_id]: MAX([scrape_date]) = MAX([Calculation_863705986603687936])}' />
        </column>
        <column caption='Borough' datatype='string' name='[Calculation_816770033929490432]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='IF [postcode] = &apos;E1&apos; THEN &apos;Whitechapel, Stepney, Mile End&apos;&#10;ELSEIF [postcode] = &apos;E1W&apos; THEN &apos;Wapping&apos;&#10;ELSEIF [postcode] = &apos;E2&apos; THEN &apos;Bethnal Green, Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;E3&apos; THEN &apos;Bow, Bromley-by-Bow&apos;&#10;ELSEIF [postcode] = &apos;E4&apos; THEN &apos;Chingford, Highams Park&apos;&#10;ELSEIF [postcode] = &apos;E5&apos; THEN &apos;Clapton&apos;&#10;ELSEIF [postcode] = &apos;E6&apos; THEN &apos;East Ham&apos;&#10;ELSEIF [postcode] = &apos;E7&apos; THEN &apos;Forest Gate, Upton Park&apos;&#10;ELSEIF [postcode] = &apos;E8&apos; THEN &apos;Hackney, Dalston&apos;&#10;ELSEIF [postcode] = &apos;E9&apos; THEN &apos;Hackney, Homerton&apos;&#10;ELSEIF [postcode] = &apos;E10&apos; THEN &apos;Leyton&apos;&#10;ELSEIF [postcode] = &apos;E11&apos; THEN &apos;Leytonstone&apos;&#10;ELSEIF [postcode] = &apos;E12&apos; THEN &apos;Manor Park&apos;&#10;ELSEIF [postcode] = &apos;E13&apos; THEN &apos;Plaistow&apos;&#10;ELSEIF [postcode] = &apos;E14&apos; THEN &apos;Poplar, Millwall, Isle of Dogs, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E15&apos; THEN &apos;Stratford, West Ham&apos;&#10;ELSEIF [postcode] = &apos;E16&apos; THEN &apos;Canning Town, North Woolwich, Docklands&apos;&#10;ELSEIF [postcode] = &apos;E17&apos; THEN &apos;Walthamstow&apos;&#10;ELSEIF [postcode] = &apos;E18&apos; THEN &apos;South Woodford&apos;&#10;ELSEIF [postcode] = &apos;E20&apos; THEN &apos;Olympic Park&apos;&#10;ELSEIF [postcode] = &apos;WC1&apos; THEN &apos;Bloomsbury, Grays Inn&apos;&#10;ELSEIF [postcode] = &apos;WC2&apos; THEN &apos;Covent Garden, Holborn, Strand&apos;&#10;ELSEIF [postcode] = &apos;EC1&apos; THEN &apos;Clerkenwell, Finsbury, Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC2&apos; THEN &apos;Moorgate, Liverpool Street&apos;&#10;ELSEIF [postcode] = &apos;EC3&apos; THEN &apos;Monument, Tower Hill, Aldgate&apos;&#10;ELSEIF [postcode] = &apos;EC4&apos; THEN &apos;Fleet Street, St. Pauls&apos;&#10;ELSEIF [postcode] = &apos;N1&apos; THEN &apos;Islington, Barnsbury, Canonbury&apos;&#10;ELSEIF [postcode] = &apos;N2&apos; THEN &apos;East Finchley&apos;&#10;ELSEIF [postcode] = &apos;N3&apos; THEN &apos;Finchley Central&apos;&#10;ELSEIF [postcode] = &apos;N4&apos; THEN &apos;Finsbury Park, Manor House&apos;&#10;ELSEIF [postcode] = &apos;N5&apos; THEN &apos;Highbury&apos;&#10;ELSEIF [postcode] = &apos;N6&apos; THEN &apos;Highgate&apos;&#10;ELSEIF [postcode] = &apos;N7&apos; THEN &apos;Holloway&apos;&#10;ELSEIF [postcode] = &apos;N8&apos; THEN &apos;Hornsey, Crouch End&apos;&#10;ELSEIF [postcode] = &apos;N9&apos; THEN &apos;Lower Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N10&apos; THEN &apos;Muswell Hill&apos;&#10;ELSEIF [postcode] = &apos;N11&apos; THEN &apos;Friern Barnet, New Southgate&apos;&#10;ELSEIF [postcode] = &apos;N12&apos; THEN &apos;North Finchley, Woodside Park&apos;&#10;ELSEIF [postcode] = &apos;N13&apos; THEN &apos;Palmers Green&apos;&#10;ELSEIF [postcode] = &apos;N14&apos; THEN &apos;Southgate&apos;&#10;ELSEIF [postcode] = &apos;N15&apos; THEN &apos;Seven Sisters&apos;&#10;ELSEIF [postcode] = &apos;N16&apos; THEN &apos;Stoke Newington, Stamford Hill&apos;&#10;ELSEIF [postcode] = &apos;N17&apos; THEN &apos;Tottenham&apos;&#10;ELSEIF [postcode] = &apos;N18&apos; THEN &apos;Upper Edmonton&apos;&#10;ELSEIF [postcode] = &apos;N19&apos; THEN &apos;Archway, Tufnell Park&apos;&#10;ELSEIF [postcode] = &apos;N20&apos; THEN &apos;Whetstone, Totteridge&apos;&#10;ELSEIF [postcode] = &apos;N21&apos; THEN &apos;Winchmore Hill&apos;&#10;ELSEIF [postcode] = &apos;N22&apos; THEN &apos;Wood Green, Alexandra Palace&apos;&#10;ELSEIF [postcode] = &apos;NW1&apos; THEN &apos;Regents Park, Camden Town&apos;&#10;ELSEIF [postcode] = &apos;NW2&apos; THEN &apos;Cricklewood, Neasden&apos;&#10;ELSEIF [postcode] = &apos;NW3&apos; THEN &apos;Hampstead, Swiss Cottage&apos;&#10;ELSEIF [postcode] = &apos;NW4&apos; THEN &apos;Hendon, Brent Cross&apos;&#10;ELSEIF [postcode] = &apos;NW5&apos; THEN &apos;Kentish Town&apos;&#10;ELSEIF [postcode] = &apos;NW6&apos; THEN &apos;West Hampstead, Kilburn, Queens Park&apos;&#10;ELSEIF [postcode] = &apos;NW7&apos; THEN &apos;Mill Hill&apos;&#10;ELSEIF [postcode] = &apos;NW8&apos; THEN &apos;St Johns Wood&apos;&#10;ELSEIF [postcode] = &apos;NW9&apos; THEN &apos;Kinsbury, Colindale&apos;&#10;ELSEIF [postcode] = &apos;NW10&apos; THEN &apos;Willesden, Harlesden, Kensal Green&apos;&#10;ELSEIF [postcode] = &apos;NW11&apos; THEN &apos;Golders Green, Hampstead Gdn Suburb&apos;&#10;ELSEIF [postcode] = &apos;SE1&apos; THEN &apos;Waterloo, Bermondsey, Southwark, Borough&apos;&#10;ELSEIF [postcode] = &apos;SE2&apos; THEN &apos;Abbey Wood&apos;&#10;ELSEIF [postcode] = &apos;SE3&apos; THEN &apos;Blackheath, Westcombe Park&apos;&#10;ELSEIF [postcode] = &apos;SE4&apos; THEN &apos;Brockley, Crofton Park, Honor Oak Park&apos;&#10;ELSEIF [postcode] = &apos;SE5&apos; THEN &apos;Camberwell&apos;&#10;ELSEIF [postcode] = &apos;SE6&apos; THEN &apos;Catford, Hither Green, Bellingham&apos;&#10;ELSEIF [postcode] = &apos;SE7&apos; THEN &apos;Charlton&apos;&#10;ELSEIF [postcode] = &apos;SE8&apos; THEN &apos;Deptford&apos;&#10;ELSEIF [postcode] = &apos;SE9&apos; THEN &apos;Eltham, Mottingham&apos;&#10;ELSEIF [postcode] = &apos;SE10&apos; THEN &apos;Greenwich&apos;&#10;ELSEIF [postcode] = &apos;SE11&apos; THEN &apos;Lambeth&apos;&#10;ELSEIF [postcode] = &apos;SE12&apos; THEN &apos;Lee, Grove Park&apos;&#10;ELSEIF [postcode] = &apos;SE13&apos; THEN &apos;Lewisham, Hither Green&apos;&#10;ELSEIF [postcode] = &apos;SE14&apos; THEN &apos;New Cross, New Cross Gate&apos;&#10;ELSEIF [postcode] = &apos;SE15&apos; THEN &apos;Peckham, Nunhead&apos;&#10;ELSEIF [postcode] = &apos;SE16&apos; THEN &apos;Rotherhithe, South Bermonsey, Surrey Docks&apos;&#10;ELSEIF [postcode] = &apos;SE17&apos; THEN &apos;Walworth, Elephant &amp; Castle&apos;&#10;ELSEIF [postcode] = &apos;SE18&apos; THEN &apos;Woolwich, Plumstead&apos;&#10;ELSEIF [postcode] = &apos;SE19&apos; THEN &apos;Upper Norwood, Crystal Palace&apos;&#10;ELSEIF [postcode] = &apos;SE20&apos; THEN &apos;Penge, Anerley&apos;&#10;ELSEIF [postcode] = &apos;SE21&apos; THEN &apos;Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE22&apos; THEN &apos;East Dulwich&apos;&#10;ELSEIF [postcode] = &apos;SE23&apos; THEN &apos;Forest Hill&apos;&#10;ELSEIF [postcode] = &apos;SE24&apos; THEN &apos;Herne Hill&apos;&#10;ELSEIF [postcode] = &apos;SE25&apos; THEN &apos;South Norwood&apos;&#10;ELSEIF [postcode] = &apos;SE26&apos; THEN &apos;Sydenham&apos;&#10;ELSEIF [postcode] = &apos;SE27&apos; THEN &apos;West Norwood, Tulse Hill&apos;&#10;ELSEIF [postcode] = &apos;SE28&apos; THEN &apos;Thamesmead&apos;&#10;ELSEIF [postcode] = &apos;SW1&apos; THEN &apos;Westminster, Belgravia, Pimlico&apos;&#10;ELSEIF [postcode] = &apos;SW2&apos; THEN &apos;Brixton, Streatham Hill&apos;&#10;ELSEIF [postcode] = &apos;SW3&apos; THEN &apos;Chelsea, Brompton&apos;&#10;ELSEIF [postcode] = &apos;SW4&apos; THEN &apos;Clapham&apos;&#10;ELSEIF [postcode] = &apos;SW5&apos; THEN &apos;Earls Court&apos;&#10;ELSEIF [postcode] = &apos;SW6&apos; THEN &apos;Fulham, Parsons Green&apos;&#10;ELSEIF [postcode] = &apos;SW7&apos; THEN &apos;South Kensington&apos;&#10;ELSEIF [postcode] = &apos;SW8&apos; THEN &apos;South Lambeth, Nine Elms&apos;&#10;ELSEIF [postcode] = &apos;SW9&apos; THEN &apos;Stockwell, Brixton&apos;&#10;ELSEIF [postcode] = &apos;SW10&apos; THEN &apos;West Brompton, Worlds End&apos;&#10;ELSEIF [postcode] = &apos;SW11&apos; THEN &apos;Battersea, Clapham Junction&apos;&#10;ELSEIF [postcode] = &apos;SW12&apos; THEN &apos;Balham&apos;&#10;ELSEIF [postcode] = &apos;SW13&apos; THEN &apos;Barnes, Castelnau&apos;&#10;ELSEIF [postcode] = &apos;SW14&apos; THEN &apos;Mortlake, East Sheen&apos;&#10;ELSEIF [postcode] = &apos;SW15&apos; THEN &apos;Putney, Roehampton&apos;&#10;ELSEIF [postcode] = &apos;SW16&apos; THEN &apos;Streatham, Norbury&apos;&#10;ELSEIF [postcode] = &apos;SW17&apos; THEN &apos;Tooting&apos;&#10;ELSEIF [postcode] = &apos;SW18&apos; THEN &apos;Wandsworth, Earlsfield&apos;&#10;ELSEIF [postcode] = &apos;SW19&apos; THEN &apos;Wimbledon, Merton&apos;&#10;ELSEIF [postcode] = &apos;SW20&apos; THEN &apos;South Wimbledon, Raynes Park&apos;&#10;ELSEIF [postcode] = &apos;W1&apos; THEN &apos;Mayfair, Marylebone, Soho&apos;&#10;ELSEIF [postcode] = &apos;W2&apos; THEN &apos;Bayswater, Paddington&apos;&#10;ELSEIF [postcode] = &apos;W3&apos; THEN &apos;Acton&apos;&#10;ELSEIF [postcode] = &apos;W4&apos; THEN &apos;Chiswick&apos;&#10;ELSEIF [postcode] = &apos;W5&apos; THEN &apos;Ealing&apos;&#10;ELSEIF [postcode] = &apos;W6&apos; THEN &apos;Hammersmith&apos;&#10;ELSEIF [postcode] = &apos;W7&apos; THEN &apos;Hanwell&apos;&#10;ELSEIF [postcode] = &apos;W8&apos; THEN &apos;Kensington&apos;&#10;ELSEIF [postcode] = &apos;W9&apos; THEN &apos;Maida Vale, Warwick Avenue&apos;&#10;ELSEIF [postcode] = &apos;W10&apos; THEN &apos;Ladbroke Grove, North Kensington&apos;&#10;ELSEIF [postcode] = &apos;W11&apos; THEN &apos;Notting Hill, Holland Park&apos;&#10;ELSEIF [postcode] = &apos;W12&apos; THEN &apos;Shepherds Bush&apos;&#10;ELSEIF [postcode] = &apos;W13&apos; THEN &apos;West Ealing&apos;&#10;ELSEIF [postcode] = &apos;W14&apos; THEN &apos;West Kensington&apos;&#10;ELSEIF [postcode] = &apos;EC1N&apos; THEN &apos;Hatton Harden&apos;&#10;ELSEIF [postcode] = &apos;EC1R&apos; THEN &apos;Finsbury&apos;&#10;ELSEIF [postcode] = &apos;EC1V&apos; THEN &apos;Finsbury East, Moorfields Eye Hospital&apos;&#10;ELSEIF [postcode] = &apos;EC1Y&apos; THEN &apos;St Lukes&apos;&#10;ELSEIF [postcode] = &apos;EC2A&apos; THEN &apos;Shoreditch&apos;&#10;ELSEIF [postcode] = &apos;EC2Y&apos; THEN &apos;Barbican&apos;&#10;ELSEIF [postcode] = &apos;EC3R&apos; THEN &apos;Monument&apos;&#10;ELSEIF [postcode] = &apos;EC4A&apos; THEN &apos;Fetter Lane&apos;&#10;ELSEIF [postcode] = &apos;EC4V&apos; THEN &apos;Blackfriars&apos; &#10;ELSEIF [postcode] = &apos;EC1M&apos; THEN &apos;Clerkenwell, Farringdon&apos;&#10;ELSEIF [postcode] = &apos;N1C&apos; THEN &apos;Kings Cross Central&apos;&#10;ELSEIF [postcode] = &apos;SW1P&apos; THEN &apos;Parliament Square&apos;&#10;ELSEIF [postcode] = &apos;SW1V&apos; THEN &apos;Vauxhall Bridge, Grosvenor&apos;&#10;ELSEIF [postcode] = &apos;SW1W&apos; THEN &apos;Lower Belgravia, Chelsea&apos;&#10;ELSEIF [postcode] = &apos;SW1X&apos; THEN &apos;Upper Belgravia&apos;&#10;ELSEIF [postcode] = &apos;SW1Y&apos; THEN &apos;St. James&apos;&apos;&apos;&#10;ELSEIF [postcode] = &apos;W1B&apos; THEN &apos;Portland Place&apos;&#10;ELSEIF [postcode] = &apos;W1D&apos; THEN &apos;Soho&apos;&#10;ELSEIF [postcode] = &apos;W1G&apos; THEN &apos;Harley Street&apos;&#10;ELSEIF [postcode] = &apos;W1H&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1J&apos; THEN &apos;Mayfair (South)&apos;&#10;ELSEIF [postcode] = &apos;W1K&apos; THEN &apos;Mayfair (North)&apos;&#10;ELSEIF [postcode] = &apos;W1T&apos; THEN &apos;Fitzrovia&apos;&#10;ELSEIF [postcode] = &apos;W1U&apos; THEN &apos;Marylebone&apos;&#10;ELSEIF [postcode] = &apos;W1W&apos; THEN &apos;Great Portland Street&apos;&#10;ELSEIF [postcode] = &apos;WC1A&apos; THEN &apos;New Oxford Street&apos;&#10;ELSEIF [postcode] = &apos;WC1B&apos; THEN &apos;Bloomsbury&apos;&#10;ELSEIF [postcode] = &apos;WC1E&apos; THEN &apos;Birkbeck College&apos;&#10;ELSEIF [postcode] = &apos;WC1H&apos; THEN &apos;St. Pancras&apos;&#10;ELSEIF [postcode] = &apos;WC1N&apos; THEN &apos;Russell Square&apos;&#10;ELSEIF [postcode] = &apos;WC1R&apos; THEN &apos;Gray&apos;&apos;s Inn&apos;&#10;ELSEIF [postcode] = &apos;WC1V&apos; THEN &apos;High Holborn&apos;&#10;ELSEIF [postcode] = &apos;WC1X&apos; THEN &apos;King&apos;&apos;s Cross, Finsbury&apos;&#10;ELSEIF [postcode] = &apos;WC2B&apos; THEN &apos;Drury Lane&apos;&#10;ELSEIF [postcode] = &apos;WC2E&apos; THEN &apos;Covent Garden&apos;&#10;ELSEIF [postcode] = &apos;WC2H&apos; THEN &apos;Leicester Square&apos;&#10;ELSEIF [postcode] = &apos;WC2R&apos; THEN &apos;Somerset House&apos;&#10;ELSE [postcode]&#10;END' />
        </column>
        <column caption='Available From' datatype='date' name='[available_from]' role='dimension' type='ordinal' />
        <column caption='Furnishing' datatype='string' name='[furnishing]' role='dimension' type='nominal' />
        <column caption='Garden' datatype='string' name='[garden]' role='dimension' type='nominal' />
        <column caption='Type' datatype='string' name='[listing_type]' role='dimension' type='nominal'>
          <aliases>
            <alias key='&quot;flat&quot;' value='Flat' />
            <alias key='&quot;shared&quot;' value='Shared Accom.' />
            <alias key='&quot;studio&quot;' value='Studio' />
          </aliases>
        </column>
        <column caption='Min Tenancy Months' datatype='string' name='[min_tenancy_months]' role='dimension' type='nominal' />
        <column-instance column='[Calculation_1970606335741288450]' derivation='None' name='[none:Calculation_1970606335741288450:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_719379691605893121]' derivation='None' name='[none:Calculation_719379691605893121:nk]' pivot='key' type='nominal' />
        <column-instance column='[Calculation_816770033929490432]' derivation='None' name='[none:Calculation_816770033929490432:nk]' pivot='key' type='nominal' />
        <column-instance column='[available_from]' derivation='None' name='[none:available_from:qk]' pivot='key' type='quantitative' />
        <column-instance column='[furnishing]' derivation='None' name='[none:furnishing:nk]' pivot='key' type='nominal' />
        <column-instance column='[garden]' derivation='None' name='[none:garden:nk]' pivot='key' type='nominal' />
        <column-instance column='[listing_type]' derivation='None' name='[none:listing_type:nk]' pivot='key' type='nominal' />
        <column-instance column='[min_tenancy_months]' derivation='None' name='[none:min_tenancy_months:nk]' pivot='key' type='nominal' />
        <column-instance column='[parking]' derivation='None' name='[none:parking:nk]' pivot='key' type='nominal' />
        <column-instance column='[postcode]' derivation='None' name='[none:postcode:nk]' pivot='key' type='nominal' />
        <column-instance column='[rent_pcm]' derivation='None' name='[none:rent_pcm:qk]' pivot='key' type='quantitative' />
        <column caption='Parking' datatype='string' name='[parking]' role='dimension' type='nominal' />
        <column caption='Postcode' datatype='string' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal' />
        <column caption='Rent PCM' datatype='real' name='[rent_pcm]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98934' id='26' param='horz' type-v2='layout-flow' w='98400' x='800' y='533'>
            <zone h='98934' id='5' param='vert' type-v2='layout-flow' w='98400' x='800' y='533'>
              <zone fixed-size='50' h='3333' id='29' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='533'>
                <zone fixed-size='274' forceUpdate='true' h='3333' id='30' is-fixed='true' type-v2='text' w='28200' x='800' y='533'>
                  <formatted-text>
                    <run bold='true' fontsize='13'>London Rental Flat Overview</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='59' layout-strategy-id='distribute-evenly' param='horz' type-v2='layout-flow' w='70200' x='29000' y='533'>
                  <zone alt-text='Image of Apartment Building' h='3334' id='61' is-scaled='1' param='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate/images/apartment.png' type-v2='bitmap' w='14100' x='29000' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='27' mode='checkdropdown' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='89' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='94' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='3334' id='28' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' show-null-ctrls='false' show-slider='false' type-v2='filter' values='relevant' w='14000' x='85200' y='533'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
              <zone h='3333' id='58' layout-strategy-id='distribute-evenly' param='horz' type-v2='layout-flow' w='98400' x='800' y='3866'>
                <zone h='3333' id='51' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' show-null-ctrls='false' show-reldate-picker='false' show-slider='false' type-v2='filter' values='relevant' w='14100' x='800' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='52' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='14900' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='57' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='29000' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='53' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='54' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='56' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='3333' id='55' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='85200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='2' h='666' id='24' is-fixed='true' type-v2='empty' w='98400' x='800' y='7199'>
                <zone-style>
                  <format attr='border-color' value='#666666' />
                  <format attr='border-style' value='solid' />
                  <format attr='border-width' value='2' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone fixed-size='12' h='1333' id='23' is-fixed='true' type-v2='empty' w='98400' x='800' y='7865'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='90269' id='6' type-v2='layout-basic' w='98400' x='800' y='9198'>
                <zone h='90269' id='8' param='vert' type-v2='layout-flow' w='98400' x='800' y='9198'>
                  <zone fixed-size='400' h='26667' id='49' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='9198'>
                    <zone h='26667' id='81' param='vert' type-v2='layout-flow' w='71400' x='800' y='9198'>
                      <zone h='1800' id='82' type-v2='text' w='71400' x='800' y='9198'>
                        <formatted-text>
                          <run bold='true' fontsize='12'>Average Rent &amp; # Of Listings</run>
                        </formatted-text>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='2466' id='80' name='Flat Map' pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-title='false' type-v2='color' w='71400' x='800' y='10998'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone fixed-size='692' h='22401' id='36' is-fixed='true' name='Flat Map' show-title='false' w='71400' x='800' y='13464'>
                        <layout-cache minheight='201' minwidth='201' type-h='scalable' type-w='scalable' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                    </zone>
                    <zone fixed-size='12' h='26667' id='50' is-fixed='true' type-v2='empty' w='2000' x='72200' y='9198'>
                      <zone-style>
                        <format attr='border-color' value='#000000' />
                        <format attr='border-style' value='none' />
                        <format attr='border-width' value='0' />
                        <format attr='margin' value='4' />
                      </zone-style>
                    </zone>
                    <zone fixed-size='250' h='26667' id='48' is-fixed='true' param='vert' type-v2='layout-flow' w='25000' x='74200' y='9198'>
                      <zone h='4000' id='13' param='vert' type-v2='layout-flow' w='25000' x='74200' y='9198'>
                        <zone forceUpdate='true' h='1800' id='14' type-v2='text' w='25000' x='74200' y='9198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average Rent:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='15' name='Average Rent' show-title='false' w='25000' x='74200' y='10998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='100' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='12' param='vert' type-v2='layout-flow' w='25000' x='74200' y='13198'>
                        <zone h='1800' id='11' type-v2='text' w='25000' x='74200' y='13198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'># Properties:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='10' name='# Properties' show-title='false' w='25000' x='74200' y='14998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='60' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='91' param='vert' type-v2='layout-flow' w='25000' x='74200' y='17198'>
                        <zone forceUpdate='true' h='1800' id='92' type-v2='text' w='25000' x='74200' y='17198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average Days On Market:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='93' name='Days on Market' show-title='false' w='25000' x='74200' y='18998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='16' param='vert' type-v2='layout-flow' w='25000' x='74200' y='21198'>
                        <zone forceUpdate='true' h='1800' id='17' type-v2='text' w='25000' x='74200' y='21198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average # Beds:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='18' name='Average Beds' show-title='false' w='25000' x='74200' y='22998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='89' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                      <zone h='4000' id='19' param='vert' type-v2='layout-flow' w='25000' x='74200' y='25198'>
                        <zone forceUpdate='true' h='1800' id='20' type-v2='text' w='25000' x='74200' y='25198'>
                          <formatted-text>
                            <run bold='true' fontsize='12'>Average # Baths:</run>
                          </formatted-text>
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                        <zone h='2200' id='21' name='Average Baths' show-title='false' w='25000' x='74200' y='26998'>
                          <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                          <zone-style>
                            <format attr='border-color' value='#000000' />
                            <format attr='border-style' value='none' />
                            <format attr='border-width' value='0' />
                            <format attr='margin' value='4' />
                          </zone-style>
                        </zone>
                      </zone>
                    </zone>
                  </zone>
                  <zone fixed-size='12' h='1333' id='31' is-fixed='true' type-v2='empty' w='98400' x='800' y='35865'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone fixed-size='450' h='30000' id='35' is-fixed='true' param='horz' type-v2='layout-flow' w='98400' x='800' y='37198'>
                    <zone fixed-size='550' h='30000' id='32' is-fixed='true' param='vert' type-v2='layout-flow' w='98400' x='800' y='37198'>
                      <zone forceUpdate='true' h='1800' id='37' type-v2='text' w='98400' x='800' y='37198'>
                        <formatted-text>
                          <run bold='true' fontsize='12'>Average Rent (Â£) PCM &lt;</run>
                          <run bold='true' fontsize='12'>[Parameters].[Parameter 1]</run>
                          <run bold='true' fontsize='12'>&gt;</run>
                        </formatted-text>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='3333' id='38' mode='list' param='[Parameters].[Parameter 1]' show-title='false' type-v2='paramctrl' w='98400' x='800' y='38998'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone fixed-size='2' h='666' id='39' is-fixed='true' type-v2='empty' w='98400' x='800' y='42331'>
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='24134' id='33' name='Rent By Borough' show-title='false' w='98400' x='800' y='42997'>
                        <layout-cache cell-count-h='1' type-h='cell' type-w='cell' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                      <zone h='67' id='34' name='Rent By Available Date' show-title='false' w='98400' x='800' y='67131'>
                        <layout-cache has-max-size-h='true' maxheight='1' minheight='1' minwidth='170' type-h='scalable' type-w='scalable' />
                        <zone-style>
                          <format attr='border-color' value='#000000' />
                          <format attr='border-style' value='none' />
                          <format attr='border-width' value='0' />
                          <format attr='margin' value='4' />
                        </zone-style>
                      </zone>
                    </zone>
                  </zone>
                  <zone fixed-size='12' h='1333' id='47' is-fixed='true' type-v2='empty' w='98400' x='800' y='67198'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone fixed-size='12' h='1333' id='41' is-fixed='true' type-v2='empty' w='98400' x='800' y='68531'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='29603' id='42' name='Data Detail' w='98400' x='800' y='69864'>
                    <layout-cache fixed-size-h='4115' type-h='fixed' type-w='fixed' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='2750' minheight='2750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='104' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98934' id='103' param='vert' type-v2='layout-flow' w='98400' x='800' y='533'>
                <zone fixed-size='274' forceUpdate='true' h='3333' id='30' type-v2='text' w='28200' x='800' y='533'>
                  <formatted-text>
                    <run bold='true' fontsize='13'>London Rental Flat Overview</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone alt-text='Image of Apartment Building' fixed-size='42' h='3334' id='61' is-fixed='true' is-scaled='1' param='/Users/eric/Desktop/PYTHON/Portfolio Projects/real estate/images/apartment.png' type-v2='bitmap' w='14100' x='29000' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='1800' id='82' type-v2='text' w='71400' x='800' y='9198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent &amp; # Of Listings</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='14' type-v2='text' w='25000' x='74200' y='9198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='89' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='94' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='51' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]' show-null-ctrls='false' show-reldate-picker='false' show-slider='false' type-v2='filter' values='relevant' w='14100' x='800' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='52' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='14900' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='57' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='29000' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='53' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='54' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='57200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='56' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='71200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='55' mode='checkdropdown' name='Average Rent' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]' show-apply='true' type-v2='filter' values='relevant' w='14000' x='85200' y='3867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='15' is-fixed='true' name='Average Rent' show-title='false' w='25000' x='74200' y='10998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='100' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='1800' id='11' type-v2='text' w='25000' x='74200' y='13198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'># Properties:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='22401' id='36' is-fixed='true' name='Flat Map' show-title='false' w='71400' x='800' y='13464'>
                  <layout-cache minheight='201' minwidth='201' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2466' id='80' name='Flat Map' pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' show-title='false' type-v2='color' w='71400' x='800' y='10998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='27' mode='checkdropdown' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]' show-apply='true' type-v2='filter' values='relevant' w='14100' x='43100' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3334' id='28' name='# Properties' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]' show-null-ctrls='false' show-slider='false' type-v2='filter' values='relevant' w='14000' x='85200' y='533'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='10' is-fixed='true' name='# Properties' show-title='false' w='25000' x='74200' y='14998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='60' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='92' type-v2='text' w='25000' x='74200' y='17198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Days On Market:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='93' is-fixed='true' name='Days on Market' show-title='false' w='25000' x='74200' y='18998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='17' type-v2='text' w='25000' x='74200' y='21198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average # Beds:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='18' is-fixed='true' name='Average Beds' show-title='false' w='25000' x='74200' y='22998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='89' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='20' type-v2='text' w='25000' x='74200' y='25198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average # Baths:</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='25' h='2200' id='21' is-fixed='true' name='Average Baths' show-title='false' w='25000' x='74200' y='26998'>
                  <layout-cache fixed-size-h='25' fixed-size-w='70' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='1800' id='37' type-v2='text' w='98400' x='800' y='37198'>
                  <formatted-text>
                    <run bold='true' fontsize='12'>Average Rent (Â£) PCM &lt;</run>
                    <run bold='true' fontsize='12'>[Parameters].[Parameter 1]</run>
                    <run bold='true' fontsize='12'>&gt;</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3333' id='38' mode='list' param='[Parameters].[Parameter 1]' show-title='false' type-v2='paramctrl' w='98400' x='800' y='38998'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='24134' id='33' is-fixed='true' name='Rent By Borough' show-title='false' w='98400' x='800' y='42997'>
                  <layout-cache cell-count-h='1' type-h='cell' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='67' id='34' is-fixed='true' name='Rent By Available Date' show-title='false' w='98400' x='800' y='67131'>
                  <layout-cache has-max-size-h='true' maxheight='1' minheight='1' minwidth='170' type-h='scalable' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='29603' id='42' is-fixed='true' name='Data Detail' w='98400' x='800' y='69864'>
                  <layout-cache fixed-size-h='4115' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B9D33C1C-25C4-4B1A-97F4-F7207E5F080A}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='dashboard' maximized='true' name='London Rental Flat Overview'>
      <viewpoints>
        <viewpoint name='# Properties' />
        <viewpoint name='Average Baths' />
        <viewpoint name='Average Beds' />
        <viewpoint name='Average Rent' />
        <viewpoint name='Data Detail' />
        <viewpoint name='Days on Market' />
        <viewpoint name='Flat Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Rent By Available Date'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Rent By Borough'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{7A761B9E-5006-4E78-A9D4-F1FDA3324CBA}' />
    </window>
    <window class='worksheet' name='# Scraped Sanity' tab-color='#6e597f'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6FF067E0-E058-4F5B-B1D3-1D434D256116}' />
    </window>
    <window class='worksheet' hidden='true' name='# Properties' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DCE1320E-D9F5-4029-AFEA-7435A9875862}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Baths' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{647E7764-7A08-47D4-9784-B801E4DA5298}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Beds' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D6A4D944-709A-4EE0-8AF3-CD9366A41873}' />
    </window>
    <window class='worksheet' hidden='true' name='Average Rent' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FDC41464-F2D0-4616-8812-9B3E00A8CDFA}' />
    </window>
    <window class='worksheet' hidden='true' name='Data Detail' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:available_from:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:bills_included:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:closest_station_mins:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:deposit:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:description:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:family_friendly:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:fireplace:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:furnishing:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:garden:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:min_tenancy_months:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:parking:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:pet_friendly:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_id:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:property_link:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:Calculation_888546153548345344:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:predicted_monthly_rent:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[sum:rent_pcm:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_2147442990582628352:ok:1]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:available_from:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{73A3DC87-29BA-438F-8277-8EFFF35EC597}' />
    </window>
    <window class='worksheet' hidden='true' name='Days on Market' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bathrooms:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:num_bedrooms:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FF53636D-43D3-4788-B034-CC58F9BEA8E0}' />
    </window>
    <window class='worksheet' hidden='true' name='Flat Map' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[ctd:property_id:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[med:num_bedrooms:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_1970606335741288450:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_719379691605893121:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:listing_type:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:postcode:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:rent_pcm:qk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[tmn:available_from:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E264242F-CCE5-4901-8540-A5282A277032}' />
    </window>
    <window class='worksheet' hidden='true' name='Rent By Available Date' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:available_from:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{37947904-12FE-4351-8DCE-D1DF70ADA9FC}' />
    </window>
    <window class='worksheet' hidden='true' name='Rent By Borough' tab-color='#72bcbb'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.08d00uo1ue0adw1bnxbw40m8rntt].[usr:Calculation_719379691610189826:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_802133335129923585:ok]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[none:Calculation_816770033929490432:nk]</field>
            <field>[federated.08d00uo1ue0adw1bnxbw40m8rntt].[yr:scrape_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1B714B8D-1279-44D1-8D22-7E415911D9B3}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='# Scraped Sanity' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOydd3gVxf7/X+ecnPQe0ukhQAi9CXIBBQSp8qVJL9Iv0uQqRVGQKlVAOlIk
      1NCkl9BLSOiEEtJ7Iz0n7bT5/YHZnxH0Kgbxyr6e5zxPMrs7+5nZ2Z32mfcohBACGRkZGZk3
      DuXrNkBGRkZG5vUgVwAyMjIybyhyBSAjIyPzhiJXADIyMjJvKHIFICMjI/OGIlcAMjIyMm8o
      cgUgIyMj84YiVwAyMjIybyhyBSAjIyPzhiJXADIyMjJvKHIFICMjI/OGIlcAMjIyMm8ocgUg
      IyMj84YiVwAyMjIybyhyBSAjIyPzhiJXADIyMjJvKHIFICMjI/OGIlcAMjIyMm8oJi8KzM3N
      JScn56+2RUZGRkbmL0Txoj2B9Xo9er3+ddjzWjl69CharZYePXoAUFBQwOLFi+nYsSNNmzYF
      wGAwsH79etzc3KTzzp8/T0REBB07dmTRokX06dOHf/3rXxiNRj7//HNGjBiBl5cXRqOROXPm
      MGDAAJ48ecLRo0dZsGAB48ePp0GDBmRmZlJUVMSkSZMoX758mabNYDAwadIklixZgpmZmRSe
      kJDA1KlTeeutt4iLi8PMzIxPP/0Ue3t7ACIjI1m1ahXffvsthw4dwmg00qNHDx49esSPP/7I
      9OnTy9TOl8XPzw8PDw/atGlTKnz+/PkUFhZiZ2fH48ePGTBgAG3atCEmJobVq1czbdo0nJyc
      ACguLmbFihU0adKEd99997l7CCFYsmQJ77zzDk2aNAEgKSmJbdu24erqSnBwMPPmzZPi+18k
      JyeHefPmMXz4cGrUqCGF79+/n+LiYvr37//cNZmZmSxdupRBgwZRs2ZNKbykzC1evBhzc/O/
      xP6/CxqNhmXLllFQUABArVq1GDx4MAD+/v5YW1vTsWPHUtfk5eXx5ZdfMnv2bLZs2QLAuHHj
      mD17NiNGjODWrVtcunSJ5cuXA/Ddd9+hUqlwcXEhNDSUqVOnolar/5CdL+wBmJiYYGJS+pAQ
      glu3bhEREUHLli3x9PRECMHDhw+5e/cu9evXx9fXF4VC8Vx8Qgiys7O5cuUKGo2GBg0aUKNG
      jRee+9+IiIggKCgIS0tL2rZti62tLUIIUlJSuH//Pk2aNMHR0fEPxyuEQKfTodVqpQ/k0qVL
      8fb2pkmTJiiVStRqNfv37yc9PZ3Ro0ejUCgwNTUlMjKScuXK4eXlRZMmTYiJiaFdu3Zcv34d
      jUZDjRo1MDExIS8vj7i4ODw9PalWrRpbtmzBxMSE2bNnI4Tg4sWL5Ofn4+7uXqYvjBACg8FA
      VlYWarUaMzMzcnJyKCgowNPTk6+//hqAAwcO4OHhgYODA2q1GoVCgaWlJampqZibm1OtWjX8
      /f3p27cvDx48oFKlSn+LF1sIQVFREQaDATMzM4QQREVFUalSJYYNG0ZBQQEZGRmEhYVRv359
      dDodX3/9NVOnTsXJyQm1Wo1SqWTTpk3Y2NjQunVrlEolpqampKamYmJigpOTE0+ePOHx48dM
      mTJFSnfFihWZPXs24eHh3L17l3LlypWqYP+X0Ov1LFq0iLZt21K9enVUKhVqtZrc3FwOHz7M
      N998I6U7NTUVlUqFvb09S5cupVWrVtSsWVO6pqTMZWdnY2pqipmZ2Uu97/+rmJubM3/+/OfC
      hRBotVp0Op2UJ/Hx8djb25ORkYHBYKBcuXJ88MEHLFq0iMLCQpKTk3F3d6dLly7s2bMHg8HA
      +fPnqVSpEjExMTRv3pzHjx+j0+mwsbH5Q3aqZs2aNev3nBgUFMTu3bupW7cua9eupVWrVkRH
      R/Pdd9/Rpk0bVq9ejbe3N87Ozs9dm5uby7hx4/D09MTV1ZX169djZWWFl5cXAEajEaPRiEKh
      4OrVq2RlZeHq6vrCAnPx4kU8PT0JCwvjzJkzvPPOO2i1Wvz8/PD39+df//rXS7XAdu7cycmT
      J4mKiiIvLw8fHx+WL19Oamoqp06dIiUlhYYNG7Jx40YSExM5e/Yst2/fplWrVpQrVw4/Pz8C
      AwOJjo5m2LBh2NnZceTIEXx8fKhXrx4AarWa7Oxsdu7cydmzZ2nUqBHvvvsuLi4uuLi4kJ6e
      joWFBQ0aNPjD9v8WycnJzJo1i7S0NO7cucNbb73FhQsX2L9/Px07dpTuHxsbS5UqVahWrRoX
      Llxgw4YNBAQE0K9fP6pXr46bmxs3b97k6NGjJCUlMXr0aCwsLMrU1pdh/fr1XLlyhfDwcIxG
      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
      ibW1teQaB89kCtLT06WFN2W5l22JK14J1tbWWFpaotFoSE9Px9XVFQsLC+DZUvSUlBQcHBxe
      enn5X4nBYCAzM1Ny1y3xv87KyiIrKwsbGxucnZ1RKBTk5OSUUoe0t7fH1NS0VHwlz8fOzg4n
      JycKCwtJS0sDnm04/1urvP+J6PV6nj59SmFhIW5ublhaWiKEIDMzs1RP2snJqZQQmdFoJCUl
      Ba1Wi4uLC5aWls89k386JSvSAczNzZ97nzIyMsjOzsbe3l5aMyCE4OnTp+Tl5eHp6Ym5uTmF
      hYXodDrp+rS0NGxsbKR39s8gVwA/sWfPHo4ePUr79u0ZPHgwACtXrsTc3JzQ0FB69epFhw4d
      2LVrF0+fPiUpKYmaNWsyevRowsPDWbVqFZ6enjx9+pQ5c+ZgYWGBn58fJ06coFu3bpLOz86d
      OykqKuL27dtMmDCBpk2b8uTJE1atWoWXlxd6vZ6JEyc+92H6M5w5c4ZTp04Bz/ywhw8fzttv
      v83s2bNxd3cnPT2duXPnolar+frrr7G0tCQ5OZlp06b97dcCZGVlMW/ePEkKWq/Xs3XrVvz8
      /NDpdNy4cYPPPvuMhg0bsnv3bu7cuQNAfHw8c+bMoWHDhlJct27dYuvWrXh5eQEwadIkrly5
      QkhICFFRUVSuXJkpU6a8URvNJycns337drRaLcnJyaxcuRJTU1NWrVolrbZNTExk06ZNuLm5
      Ac8+/ps2bSI2NhYHBwfq1KlDhw4d2L59Ozqdjjt37vDJJ5+Uyvt/Iv7+/ly5cgU7OzsaNWpE
      //79Sx3fvHkzAHfv3mXmzJnUrFmTwMBAtm/fjrOzMzqdjs8++4wVK1ZgYmJCr169cHV1Zdmy
      ZS9UZH0pXkpC7h9IYWHhc2qgOp1OCPFMDXTGjBmlwuLi4kS/fv2EVqsVixYtEmfPnhVGo1HM
      mTNHnDlzRhiNRlFYWPhCNVCj0Si+//578cMPPwghhPjkk0/E9evXhVarfaWqkzk5OWLMmDEi
      LS1NbN26VWzZskUYjUaxePFicfz4cREYGChmzJghDAaDOHz4sFi2bNkrs6WsMRqNYuvWrcLP
      z69U+Lfffiv27dtXKiwuLk6MGTOmlBqkwWAQY8aMEQ8ePHjhc3j8+LEYPXr0G6cKWkJhYaEY
      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
      27aNrl27UlRUxH/+8x90Oh1r1qyhSZMmso/3/WTZsmWsWLECHx8fGjduXOFYTk4OH374IVlZ
      WVy7do1WrVqhVCqZNGkSZrOZLVu2UL9+ffz8/Ni+fTt79uwhMTGR2NhYHn/88Qp5bd68maKi
      IlasWEG9evWoXbs2UPZgGTZsGH5+fjRs2PBPq/efgRCCmTNnsmrVKtq0aSMrfpaTmprK4cOH
      SU5O5ptvvqFHjx5y/4qIiGDs2LH06dMHFxcXli9fzoULFzh79iwlJSU0bdqUuLg45syZg81m
      Y8eOHfzzn/+kqKiICRMmoNVq+eabb+jUqRMqlYpPPvmE0tJStm3bRkhICL6+vuzatYtdu3aR
      mJjIlStXeOyxx4iOjmbBggVYLBa2b99Ot27dyMnJYdKkSSiVSjZs2ED79u0rRU75Xvzwww+E
      h4ej1+uJi4ursFNdCMG8efO4efOmLAlTv359VqxYwaVLl7hy5QrR0dE0atSIL774gpiYGHnQ
      W7ZsGd27d6+ciWKlycr9xbHZbGLjxo0V1EAdDocQokwNdNKkSRXSkpOTxcCBA4XVahUzZswQ
      R48eFZIkiVmzZok9e/aIlJQUMWjQIGEwGITJZBJCCJGfny9effVVYTAYRHFxsejdu7dwOBxi
      8ODBQq/XC5vNJoYOHSqSkpIqtW4Oh0NYLBbx0ksvCaPReNe6jxs3Tnz44Ydi3759QgghRowY
      IW7cuCEcDocYPXq0iI6OFrt37xZff/21kCRJhIeHi5kzZ1ZqOX8vNptNLFy4UOzateuOYxkZ
      GWLs2LEV0s6dOyc++ugjIUmSOHHihPjkk0+ExWIRb7zxhkhPTxcGg0G8+uqroqCg4I78JEkS
      X3zxhdxOdrtdfPzxx+LDDz8Uu3fvrpoK3kckSRI2m02MHz9eXLx48VfPKy0tFa+//rrIy8sT
      QpS1+9tvvy1ef/11UVhYKHJycsSgQYOE0WgUeXl5om/fvkKSJBEWFiZOnDghJEkS48ePF1FR
      UWLDhg1i5cqVsmruf//7XxEVFSXGjRsnJEkSkZGRYtKkScJqtYq+ffuKwsJCYbFYxIABA0Re
      Xp4YP368OHPmjHA4HGLMmDEiOjparF69Wqxfv15IkiSWLl0qvvvuuyptN7PZLN544w2RkZEh
      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
      WmbPno3RaGTjxo1cuXJF3D87O5v33nuvRlo1q1atIjU1lZycHL744otHWqaniU2bNrFixQqy
      s7PFtMjISNauXSsKIkLV87Jnzx7Mzc2ZOXMmJpOpxnm+//574uLiUCqVzJ8//7Hl/0kRGhrK
      8ePHMRgMzJkzp9b12LRpExcuXCA+Pp7CwkKgqlG4ePEiFy9eJDAwkPj4eL799luOHj3KpUuX
      yMjI4OjRo7U6On+WerkI/DBef/11TCZTDT2NqVOnAoi6OQB9+vQBqnS4w8LCgCqtnVGjRjFo
      0CDS09M5f/483t7eeHl5MXToUPz8/Pjmm28YNmwYzz33HDY2Nhw7dkz8HaPRyKpVq+jSpcsj
      KZu3tzeff/65KHD2S6pF6e7fv49GowGq3P8VCgU9e/bk8OHDWFhYEBUVhbe3Ny+88AIWFhZP
      TQ9u0qRJolzDw/D19WX69Oni96ioKDw8PBg5ciQ+Pj7s27ePbt26odPpWL169a9KF5eUlNCx
      Y0dcXFyemsbvUSOTyZg1a5b4gqpm0KBBWFtbExERIaaVlpbi5OREr169OHDgQC1HpuLiYlq2
      bClKp/zdKSkpwdXVle7du3Pq1Kla18PMzIxx48bh5eUlplVrVF28eJHy8nLc3Nxwd3enU6dO
      3Lp1i0OHDvHpp5/WmSqtNAL4HVQqFXv37hVfkhqNhtmzZ7NkyRLefPNNZDIZ2dnZ4k309PQk
      OzsbDw8PMjIyKCoqIjk5meLi4of2vgH27t2Ln58f3bt3f2zlepC7d+/y4Ycfsm/fPkaNGgVA
      165dyc7OZtSoUfTs2RNHR0eysrJITEzkm2++YcqUKVy9evWJ5PePUB0wY+LEiezduxdBEGrc
      Lzc3NwoKCjAYDGzbto0ePXr8qgbSyJEjWb58OfPmzeONN954nMV4LAiCgF6vFz/VwoD/Lf37
      9+fixYuMHj2aV199tdYLb+TIkaxfv57333+fCRMm1GXWn0oGDx7M0aNHGT9+PGPGjKl1PZo2
      bcr8+fP5/PPPUalUYnpFRQWbNm3i3Xffxc/PDysrK6KiokhKSqJPnz4UFBTUmYik1AD8BtVD
      1bFjx4q9QhsbGxYsWMAnn3zCihUr0Ov1WFtbiyMHnU6HtbU13t7eTJw4kW+++Ya7d+/i4ODw
      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
      ZUs2bdqEn58fu3fvBmDEiBHMnDkTZ2dncej+NHPr1i3S0tL47rvvmDZtGitXrkSn07Fp0yY2
      btzIypUrWb9+PWVlZbi5ufHpp58ye/Zs1q1bV+tcLVu2ZNy4cbz33nscO3bsCZTm6cPOzg6Z
      TEZ5ebk4Ovy9qUGDwUBqaionTpzg22+/JSIigmvXrtGjRw9mzpyJQqGgbdu2tUbcfycEQUCp
      VFJSUkJJSQkajeah+9nY2GBhYYFGo8FkMqFUKmt1Tlq3bk1gYCDDhg1j165dopx2teikSqXC
      xcWFrl27UlxcTLdu3SguLsbKyopz5879Zj7rpR/Aw8jJyeH+/ftioBBPT08WL17MgAEDuHXr
      FsXFxbRu3Zrk5GRsbGyIjY3F1dUVMzMz9Ho96enpVFRUkJaWhoODA2VlZaxevZqPP/6Yq1ev
      0rRpUxo2bEhhYSFZWVkolUoyMjLw8/Ojf//+HDp0iF69eqHRaH533u6Pkpubi6urK+np6SgU
      Cpo3by7GJMjOzkYQBJycnP6fvfMMr6pY2/C9axrpnSQQCAGBQJAqoELwIIodOXIULEgT4YAI
      6hE5igUUpEmvHqR3CFVCM5RQEggBAqSTkN6TnezsnV3m+xGyLiPIpxgbWfd15UdWmT0za9aa
      8r7zvNKLq1AoyMnJwcvLq17z8Xug1WopKSkhJSUFo9GIs7MzSqUShULBlStXqK6uplGjRqhU
      Kq5cuYKjoyMxMTFSHUdERKDRaAgLCyMjIwOr1cqZM2eksKBGo5GkpCQMBgOJiYmEhIRI+u33
      I3l5eWRnZ1NcXEx6ejpNmjQhJCSEiIgIvL29adSoEb6+vhiNRpKTk+vUy7Vr17h+/TqDBg1i
      6dKlQE1AmZiYGDp16kRpaakULObq1auMHDnyTy7t74eNjQ39+/evc0wIQVZWFgUFBej1erKz
      s/H19aVjx44cOHCA5s2bo9Fo8Pf3l4IxhYWFcfnyZVxdXbly5Qru7u4oFArCwsIIDw/H398f
      BwcHGjduzLFjx3BwcKBnz56SwOT/9y2RvYBuERMTg06nw9bWFovFQtOmTamsrJQCpahUKoKC
      goiLiyMiIoKqqipGjx6Ni4sLBoOBQ4cOERAQQGFhIU2aNJECPeh0OgoLC3F3d8fb25vExERS
      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
      9PHxoUqVKsTGxpKXl8ft27dxc3N7qhcunZycaNOmjcWxTp06MWPGDBo3bszPP//Miy++iNFo
      ZMGCBbz22mscPHiQ2rVr07ZtW1asWEHbtm3p1auXHFZ16NChvP/++6hUKi5cuICDgwM//vij
      HF/jaUWhUODp6cmvv/5K9erV5YBDu3btwt3dnRdffJHjx4/j4+PDqVOn6NKlC1AaD0ChUBAU
      FESPHj1wdXVl586dtG7dmoCAAL777juys7Np3LhxheTTqgb6G2lpabi4uFCtWjWcnJzw9fXF
      y8sLLy8v1Go1Hh4eVKlShaysLK5fv46npycjRozA3t4ek8lEQkICzZo1w9bWlqpVq+Lo6Mi1
      a9dITU3lrbfeonHjxggh8PHxwdPTE7VajaenJ76+vrLapFqtlhU3K5KSkhLq1q1LgwYNys0d
      qlQqfH198ff3l+ck8/PzGTZsGDVq1HjineZcXFxo1qyZLNk9ePBg7Ozs6NixIzExMVSrVo1+
      /fqhVCrR6/UEBgaWK19vb2+L9QAXFxf8/f1xdXVFo9Fw9epVvL29GTZs2BMRA/lR4urqSuPG
      jYmIiKBDhw506tQJwKIeV6pUSV4jKyu3Mnx8fKhRowYqlYq4uDji4uJkpcsnvW79r3To0IGU
      lBTy8vJ477338PPzA6By5cp4eHhw8+ZNbt++TadOnejVqxdKpZKUlBQiIyNp3rw5r732Gjqd
      Tp739/DwwNvbm7p169K0adMKKT+rI5gVK1asPKNYF4GtWLFi5RnF2gFYsWLFyjPKM7kInJ6e
      /rizYMWKFSuPnWeyA6jokItWrFix8k/EughsxYoVK88o1jWAP/DH/lD8j2qgD3L94+CP3onw
      z1S+rKiyf5KezZPE/1LfHyT9aePP7L3f7+5//Z6/c89ncgrofhw6dIgDBw7QrVs32Ullzpw5
      5ObmotFo+Oijj2jZsiV79+7l4sWLpKam8vbbb/Pqq69SVFTEN998Q2RkJN988w1+fn6y5MMP
      P/yAWq2ma9eu9O3bl6CgIH766ScMBgMjRoygbdu2HD16lG3btmFvb09gYCAff/xxhdp28eJF
      li9fjqOjIzVr1mTatGkYjUa++OILMjIyMBgMLFy4EB8fH1asWMHNmzdxcnJi+vTp5fSRnkS2
      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
      4hGf8AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='London Rental Flat Overview' width='384'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
